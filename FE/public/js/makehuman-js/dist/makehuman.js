(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["makehuman"] = factory();
	else
		root["makehuman"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 158);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

var store      = __webpack_require__(47)('wks')
  , uid        = __webpack_require__(31)
  , Symbol     = __webpack_require__(2).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ },
/* 2 */
/***/ function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

var global    = __webpack_require__(2)
  , core      = __webpack_require__(0)
  , ctx       = __webpack_require__(13)
  , hide      = __webpack_require__(10)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(4)
  , IE8_DOM_DEFINE = __webpack_require__(62)
  , toPrimitive    = __webpack_require__(50)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(6) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(14)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(63)
  , defined = __webpack_require__(39);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.2';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      value = Object(value);
      return (symToStringTag && symToStringTag in value)
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      object = Object(object);
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(156), __webpack_require__(157)(module)))

/***/ },
/* 9 */
/***/ function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(5)
  , createDesc = __webpack_require__(21);
module.exports = __webpack_require__(6) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ },
/* 11 */
/***/ function(module, exports) {

"use strict";
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _defineProperty = __webpack_require__(33);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(37);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ },
/* 14 */
/***/ function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ },
/* 15 */
/***/ function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ },
/* 16 */
/***/ function(module, exports) {

module.exports = {};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(70)
  , enumBugKeys = __webpack_require__(41);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(103), __esModule: true };

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(102), __esModule: true };

/***/ },
/* 20 */
/***/ function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ },
/* 21 */
/***/ function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(39);
module.exports = function(it){
  return Object(defined(it));
};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var $at  = __webpack_require__(128)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(66)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.THREE = global.THREE || {})));
}(this, (function (exports) { 'use strict';

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		( function () {

			Object.assign = function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( 'Cannot convert undefined or null to object' );

				}

				var output = Object( target );

				for ( var index = 1; index < arguments.length; index ++ ) {

					var source = arguments[ index ];

					if ( source !== undefined && source !== null ) {

						for ( var nextKey in source ) {

							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

								output[ nextKey ] = source[ nextKey ];

							}

						}

					}

				}

				return output;

			};

		} )();

	}

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [], i = 0;
				var length = listenerArray.length;

				for ( i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	var REVISION = '82';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var BlendingMode = {
		NoBlending: NoBlending,
		NormalBlending: NormalBlending,
		AdditiveBlending: AdditiveBlending,
		SubtractiveBlending: SubtractiveBlending,
		MultiplyBlending: MultiplyBlending,
		CustomBlending: CustomBlending
	};
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var TextureMapping = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var TextureWrapping = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	var NearestFilter = 1003;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipMapLinearFilter = 1008;
	var TextureFilter = {
		NearestFilter: NearestFilter,
		NearestMipMapNearestFilter: NearestMipMapNearestFilter,
		NearestMipMapLinearFilter: NearestMipMapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipMapNearestFilter: LinearMipMapNearestFilter,
		LinearMipMapLinearFilter: LinearMipMapLinearFilter
	};
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RGB_S3TC_DXT1_Format = 2001;
	var RGBA_S3TC_DXT1_Format = 2002;
	var RGBA_S3TC_DXT3_Format = 2003;
	var RGBA_S3TC_DXT5_Format = 2004;
	var RGB_PVRTC_4BPPV1_Format = 2100;
	var RGB_PVRTC_2BPPV1_Format = 2101;
	var RGBA_PVRTC_4BPPV1_Format = 2102;
	var RGBA_PVRTC_2BPPV1_Format = 2103;
	var RGB_ETC1_Format = 2151;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function generateUUID() {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		random16: function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Vector2.prototype = {

		constructor: Vector2,

		isVector2: true,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector2();
					max = new Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: TextureIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding :  LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = {

		constructor: Texture,

		isTexture: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	Object.assign( Texture.prototype, EventDispatcher.prototype );

	var count = 0;
	function TextureIdCount() { return count++; }

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Vector4.prototype = {

		constructor: Vector4,

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector4();
					max = new Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.uuid = _Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
		this.activeMipMapLevel = 0;

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Quaternion.prototype = {

		constructor: Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( (euler && euler.isEuler) === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function setFromUnitVectors( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				return this.normalize();

			};

		}(),

		inverse: function () {

			return this.conjugate().normalize();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Vector3.prototype = {

		constructor: Vector3,

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}
			
			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( (euler && euler.isEuler) === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromEuler( euler ) );

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new Quaternion();

				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new Vector3();
					max = new Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( vector ) {

			var scalar = vector.dot( this ) / vector.lengthSq();

			return this.copy( vector ).multiplyScalar( scalar );

		},

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			};

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			};

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		distanceToManhattan: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function( s ) {

			var sinPhiRadius = Math.sin( s.phi ) * s.radius;

			this.x = sinPhiRadius * Math.sin( s.theta );
			this.y = Math.cos( s.phi ) * s.radius;
			this.z = sinPhiRadius * Math.cos( s.theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			return this.setFromMatrixColumn( m, 3 );

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			if ( typeof m === 'number' ) {

				console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
				var temp = m;
				m = index;
				index = temp;

			}

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix4.prototype = {

		constructor: Matrix4,

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function extractRotation( m ) {

				if ( v1 === undefined ) v1 = new Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( (euler && euler.isEuler) === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function lookAt( eye, target, up ) {

				if ( x === undefined ) {

					x = new Vector3();
					y = new Vector3();
					z = new Vector3();

				}

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.z += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getPosition: function () {

			var v1;

			return function getPosition() {

				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				return v1.setFromMatrixColumn( this, 3 );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function decompose( position, quaternion, scale ) {

				if ( vector === undefined ) {

					vector = new Vector3();
					matrix = new Matrix4();

				}

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( _Math.DEG2RAD * fov * 0.5 );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author tschw
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [renderer] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'renderer' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (renderer factorizations):
	 *
	 * .upload( gl, seq, values, renderer )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (renderer factorizations):
	 *
	 * .setValue( gl, name, value )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .set( gl, obj, prop )
	 *
	 * 		sets uniform from object and property with same name than uniform
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyCubeTexture = new CubeTexture();

	// --- Base for inner nodes (including the root) ---

	function UniformContainer() {

		this.seq = [];
		this.map = {};

	}

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	// Texture unit allocation

	function allocTexUnits( renderer, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			r[ i ] = renderer.allocTextureUnit();

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValue1f( gl, v ) { gl.uniform1f( this.addr, v ); }
	function setValue1i( gl, v ) { gl.uniform1i( this.addr, v ); }

	// Single float vector (from flat array or THREE.VectorN)

	function setValue2fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
		else gl.uniform2f( this.addr, v.x, v.y );

	}

	function setValue3fv( gl, v ) {

		if ( v.x !== undefined )
			gl.uniform3f( this.addr, v.x, v.y, v.z );
		else if ( v.r !== undefined )
			gl.uniform3f( this.addr, v.r, v.g, v.b );
		else
			gl.uniform3fv( this.addr, v );

	}

	function setValue4fv( gl, v ) {

		if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
		else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	}

	// Single matrix (from flat array or MatrixN)

	function setValue2fm( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, v.elements || v );

	}

	function setValue3fm( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, v.elements || v );

	}

	function setValue4fm( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, v.elements || v );

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT6( gl, v, renderer ) {

		var unit = renderer.allocTextureUnit();
		gl.uniform1i( this.addr, unit );
		renderer.setTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValue2iv( gl, v ) { gl.uniform2iv( this.addr, v ); }
	function setValue3iv( gl, v ) { gl.uniform3iv( this.addr, v ); }
	function setValue4iv( gl, v ) { gl.uniform4iv( this.addr, v ); }

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1f; // FLOAT
			case 0x8b50: return setValue2fv; // _VEC2
			case 0x8b51: return setValue3fv; // _VEC3
			case 0x8b52: return setValue4fv; // _VEC4

			case 0x8b5a: return setValue2fm; // _MAT2
			case 0x8b5b: return setValue3fm; // _MAT3
			case 0x8b5c: return setValue4fm; // _MAT4

			case 0x8b5e: return setValueT1; // SAMPLER_2D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// Array of scalars

	function setValue1fv( gl, v ) { gl.uniform1fv( this.addr, v ); }
	function setValue1iv( gl, v ) { gl.uniform1iv( this.addr, v ); }

	// Array of vectors (flat or from THREE classes)

	function setValueV2a( gl, v ) {

		gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

	}

	function setValueV3a( gl, v ) {

		gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

	}

	function setValueV4a( gl, v ) {

		gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2a( gl, v ) {

		gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

	}

	function setValueM3a( gl, v ) {

		gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

	}

	function setValueM4a( gl, v ) {

		gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

	}

	// Array of textures (2D / Cube)

	function setValueT1a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6a( gl, v, renderer ) {

		var n = v.length,
			units = allocTexUnits( renderer, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValue1fv; // FLOAT
			case 0x8b50: return setValueV2a; // _VEC2
			case 0x8b51: return setValueV3a; // _VEC3
			case 0x8b52: return setValueV4a; // _VEC4

			case 0x8b5a: return setValueM2a; // _MAT2
			case 0x8b5b: return setValueM3a; // _MAT3
			case 0x8b5c: return setValueM4a; // _MAT4

			case 0x8b5e: return setValueT1a; // SAMPLER_2D
			case 0x8b60: return setValueT6a; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
			case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
			case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function StructuredUniform( id ) {

		this.id = id;

		UniformContainer.call( this ); // mix-in

	}

	StructuredUniform.prototype.setValue = function( gl, value ) {

		// Note: Don't need an extra 'renderer' parameter, since samplers
		// are not allowed in structured uniforms.

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ] );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		for (; ;) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined ||
					subscript === '[' && matchEnd + 2 === pathLength ) {
				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
						new SingleUniform( id, activeInfo, addr ) :
						new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {
				// step into inner node / create it in case it doesn't exist

				var map = container.map,
					next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program, renderer ) {

		UniformContainer.call( this );

		this.renderer = renderer;

		var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( var i = 0; i !== n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				path = info.name,
				addr = gl.getUniformLocation( program, path );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function( gl, name, value ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, this.renderer );

	};

	WebGLUniforms.prototype.set = function( gl, object, name ) {

		var u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

	};

	WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	};


	// Static interface

	WebGLUniforms.upload = function( gl, seq, values, renderer ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {
				// note: always updating when .needsUpdate is undefined

				u.setValue( gl, v.value, renderer );

			}

		}

	};

	WebGLUniforms.seqWithValue = function( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	};

	/**
	 * Uniform Utilities
	 */

	var UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src && ( parameter_src.isColor ||
						parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
						parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
						parameter_src.isTexture ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "\nvec3 transformed = vec3( position );\n";

	var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

	var bsdfs = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

	var defaultnormal_vertex = "#ifdef FLIP_SIDED\n\tobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

	var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

	var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color = pointLight.color;\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#include <normal_flip>\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#include <normal_flip>\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

	var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\t\t\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

	var logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

	var map_particle_fragment = "#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.r;\n#endif\n";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

	var normal_flip = "#ifdef DOUBLE_SIDED\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n\tfloat flipNormal = 1.0;\n#endif\n";

	var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

	var project_vertex = "#ifdef USE_SKINNING\n\tvec4 mvPosition = modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.r;\n#endif\n";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n#endif\n";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

	var tonemapping_pars_fragment = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";

	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

	var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var distanceRGBA_frag = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

	var distanceRGBA_vert = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <skinbase_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition;\n}\n";

	var equirect_frag = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

	var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse = vec3( 0.0 );\n\treflectedLight.directSpecular = vec3( 0.0 );\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\n\treflectedLight.indirectSpecular = vec3( 0.0 );\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n}\n";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <normal_flip>\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_flip>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <displacementmap_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var normal_frag = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n\t#include <logdepthbuf_fragment>\n}\n";

	var normal_vert = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvNormal = normalize( normalMatrix * normal );\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var shadow_frag = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

	var shadow_vert = "#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_vertex: envmap_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars: lights_pars,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_template: lights_template,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_flip: normal_flip,
		normal_fragment: normal_fragment,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert
	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	Color.prototype = {

		constructor: Color,

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( (value && value.isColor) ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function setHSL( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = _Math.euclideanModulo( h, 1 );
				s = _Math.clamp( s, 0, 1 );
				l = _Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	};

	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) },

			specularMap: { value: null },
			alphaMap: { value: null },

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			offsetRepeat: { value: new Vector4( 0, 0, 1, 1 ) }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) }
				}

			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					specular : { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}

			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,

				{
					emissive : { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0 },
					envMapIntensity : { value: 1 }, // temporary
				}

			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		points: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.points,
				UniformsLib.fog

			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.fog,

				{
					scale    : { value: 1 },
					dashSize : { value: 1 },
					totalSize: { value: 2 }
				}

			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: UniformsUtils.merge( [

				UniformsLib.common,
				UniformsLib.displacementmap

			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: {

				opacity : { value: 1.0 }

			},

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		equirect: {

			uniforms: {
				tEquirect: { value: null },
				tFlip: { value: - 1 }
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: {

				lightPos: { value: new Vector3() }

			},

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		}

	};

	ShaderLib.physical = {

		uniforms: UniformsUtils.merge( [

			ShaderLib.standard.uniforms,

			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}

		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Box2.prototype = {

		constructor: Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector2();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector2();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlarePlugin( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var shader, program, attributes, uniforms;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"uniform sampler2D occlusionMap;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if ( renderType == 2 ) {",

							"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

							"vVisibility =        visibility.r / 9.0;",
							"vVisibility *= 1.0 - visibility.g / 9.0;",
							"vVisibility *=       visibility.b / 9.0;",
							"vVisibility *= 1.0 - visibility.a / 9.0;",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						// pink square

						"if ( renderType == 0 ) {",

							"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

						// restore

						"} else if ( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * vVisibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new Vector2( size * invAspect, size );

			var screenPosition = new Vector3( 1, 1, 0 ),
				screenPositionPixels = new Vector2( 1, 1 );

			var validArea = new Box2();

			validArea.min.set( viewport.x, viewport.y );
			validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.setDepthWrite( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				// horizontal and vertical coordinate of the lower left corner of the pixels to copy

				screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
				screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

				// screen cull

				if ( validArea.containsPoint( screenPositionPixels ) === true ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture2D( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.setDepthWrite( true );

			renderer.resetGLState();

		};

		function createProgram( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	}

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpritePlugin( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new Vector3();
		var spriteRotation = new Quaternion();
		var spriteScale = new Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( (fog && fog.isFog) ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( (fog && fog.isFogExp2) ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				if ( material.visible === false ) continue;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map ) {

					renderer.setTexture2D( material.map, 0 );

				} else {

					renderer.setTexture2D( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram() {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable( a, b ) {

			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Material() {

		Object.defineProperty( this, 'id', { value: MaterialIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;
		this.lights = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.shading = SmoothShading; // THREE.FlatShading, THREE.SmoothShading
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	}

	Material.prototype = {

		constructor: Material,

		isMaterial: true,

		get needsUpdate() {

			return this._needsUpdate;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.update();
			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( (currentValue && currentValue.isColor) ) {

					currentValue.set( newValue );

				} else if ( (currentValue && currentValue.isVector3) && (newValue && newValue.isVector3) ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( (this.color && this.color.isColor) ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( (this.emissive && this.emissive.isColor) ) data.emissive = this.emissive.getHex();
			if ( (this.specular && this.specular.isColor) ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( (this.map && this.map.isTexture) ) data.map = this.map.toJSON( meta ).uuid;
			if ( (this.alphaMap && this.alphaMap.isTexture) ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( (this.lightMap && this.lightMap.isTexture) ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( (this.bumpMap && this.bumpMap.isTexture) ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( (this.normalMap && this.normalMap.isTexture) ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( (this.displacementMap && this.displacementMap.isTexture) ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( (this.roughnessMap && this.roughnessMap.isTexture) ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( (this.metalnessMap && this.metalnessMap.isTexture) ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( (this.emissiveMap && this.emissiveMap.isTexture) ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( (this.specularMap && this.specularMap.isTexture) ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( (this.envMap && this.envMap.isTexture) ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.shading !== SmoothShading ) data.shading = this.shading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			data.skinning = this.skinning;
			data.morphTargets = this.morphTargets;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;
			this.lights = source.lights;

			this.blending = source.blending;
			this.side = source.side;
			this.shading = source.shading;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.premultipliedAlpha = source.premultipliedAlpha;

			this.overdraw = source.overdraw;

			this.visible = source.visible;
			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

			this.clippingPlanes = dstPlanes;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	Object.assign( Material.prototype, EventDispatcher.prototype );

	var count$1 = 0;
	function MaterialIdCount() { return count$1++; }

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}

	Box3.prototype = {

		constructor: Box3,

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new Vector3();

			return function setFromCenterAndSize( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var v1 = new Vector3();

			return function setFromObject( object ) {

				var scope = this;

				object.updateMatrixWorld( true );

				this.makeEmpty();

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( (geometry && geometry.isGeometry) ) {

							var vertices = geometry.vertices;

							for ( var i = 0, il = vertices.length; i < il; i ++ ) {

								v1.copy( vertices[ i ] );
								v1.applyMatrix4( node.matrixWorld );

								scope.expandByPoint( v1 );

							}

						} else if ( (geometry && geometry.isBufferGeometry) ) {

							var attribute = geometry.attributes.position;

							if ( attribute !== undefined ) {

								var array, offset, stride;

								if ( (attribute && attribute.isInterleavedBufferAttribute) ) {

									array = attribute.data.array;
									offset = attribute.offset;
									stride = attribute.data.stride;

								} else {

									array = attribute.array;
									offset = 0;
									stride = 3;

								}

								for ( var i = offset, il = array.length; i < il; i += stride ) {

									v1.fromArray( array, i );
									v1.applyMatrix4( node.matrixWorld );

									scope.expandByPoint( v1 );

								}

							}

						}

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new Vector3();

			return function distanceToPoint( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new Vector3();

			return function getBoundingSphere( optionalTarget ) {

				var result = optionalTarget || new Sphere();

				this.getCenter( result.center );

				result.radius = this.getSize( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if( this.isEmpty() ) this.makeEmpty();

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3()
			];

			return function applyMatrix4( matrix ) {

				// transform of empty box is an empty box.
				if( this.isEmpty() ) return this;

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Sphere.prototype = {

		constructor: Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new Box3();

			return function setFromPoints( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).getCenter( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	function Matrix3() {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Matrix3.prototype = {

		constructor: Matrix3,

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		setFromMatrix4: function( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[  8 ],
				me[ 1 ], me[ 5 ], me[  9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function applyToVector3Array( array, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( j, v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( (matrix && matrix.isMatrix4) ) {

				console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();
			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
					"- just use .toArray instead." );

			return this.toArray( array, offset );

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 */

	function Plane( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Plane.prototype = {

		constructor: Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function setFromCoplanarPoints( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new Vector3();

			return function intersectLine( line, optionalTarget ) {

				var result = optionalTarget || new Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new Vector3();
			var m1 = new Matrix3();

			return function applyMatrix4( matrix, optionalNormalMatrix ) {

				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

				// transform normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

				// recalculate constant (like in setFromNormalAndCoplanarPoint)
				this.constant = - referencePoint.dot( normal );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Frustum.prototype = {

		constructor: Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new Sphere();

			return function intersectsObject( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSprite: function () {

			var sphere = new Sphere();

			return function intersectsSprite( sprite ) {

				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new Vector3(),
				p2 = new Vector3();

			return function intersectsBox( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _lights, _objects, capabilities ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_lightShadows = _lights.shadows,

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];

		// init

		var depthMaterialTemplate = new MeshDepthMaterial();
		depthMaterialTemplate.depthPacking = RGBADepthPacking;
		depthMaterialTemplate.clipping = true;

		var distanceShader = ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = depthMaterialTemplate.clone();
			depthMaterial.morphTargets = useMorphing;
			depthMaterial.skinning = useSkinning;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new ShaderMaterial( {
				defines: {
					'USE_SHADOWMAP': ''
				},
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning,
				clipping: true
			} );

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.renderReverseSided = true;
		this.renderSingleSided = true;

		this.render = function ( scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( _lightShadows.length === 0 ) return;

			// Set GL state for depth map.
			_state.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var faceCount, isPointLight;

			for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

				var light = _lightShadows[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				var shadowCamera = shadow.camera;

				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );

				if ( (light && light.isPointLight) ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadowCamera.updateProjectionMatrix();

				}

				if ( (shadow && shadow.isSpotLightShadow) ) {

					shadow.update( light );

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( (material && material.isMultiMaterial) ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

			}

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var result = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = false;

				if ( material.morphTargets ) {

					if ( (geometry && geometry.isBufferGeometry) ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( (geometry && geometry.isGeometry) ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				var useSkinning = object.isSkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				result = materialVariants[ variantIndex ];

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
				 material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			var side = material.side;

			if ( scope.renderSingleSided && side == DoubleSide ) {

				side = FrontSide;

			}

			if ( scope.renderReverseSided ) {

				if ( side === FrontSide ) side = BackSide;
				else if ( side === BackSide ) side = FrontSide;

			}

			result.side = side;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( isPointLight && result.uniforms.lightPos !== undefined ) {

				result.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return result;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();

	}

	Ray.prototype = {

		constructor: Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function () {

			var v1 = new Vector3();

			return function recast( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new Vector3();

			return function distanceSqToPoint( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();

			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new Vector3();

			return function intersectSphere( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new Vector3();

			return function intersectsBox( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();

			return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Euler.prototype = {

		constructor: Euler,

		isEuler: true,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function setFromQuaternion( q, order, update ) {

				if ( matrix === undefined ) matrix = new Matrix4();

				matrix.makeRotationFromQuaternion( q );

				return this.setFromRotationMatrix( matrix, order, update );

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new Quaternion();

			return function reorder( newOrder ) {

				q.setFromEuler( this );

				return this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1;

	}

	Layers.prototype = {

		constructor: Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	function Object3D() {

		Object.defineProperty( this, 'id', { value: Object3DIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

		this.onBeforeRender = function(){}; 
		this.onAfterRender = function(){};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object.assign( Object3D.prototype, EventDispatcher.prototype, {

		isObject3D: true,

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new Quaternion();

			return function rotateOnAxis( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function rotateX( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function rotateY( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function rotateZ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new Vector3();

			return function translateOnAxis( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new Vector3( 1, 0, 0 );

			return function translateX( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new Vector3( 0, 1, 0 );

			return function translateY( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new Vector3( 0, 0, 1 );

			return function translateZ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new Matrix4();

			return function worldToLocal( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new Matrix4();

			return function lookAt( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( (object && object.isObject3D) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new Vector3();
			var scale = new Vector3();

			return function getWorldQuaternion( optionalTarget ) {

				var result = optionalTarget || new Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new Quaternion();

			return function getWorldRotation( optionalTarget ) {

				var result = optionalTarget || new Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new Vector3();
			var quaternion = new Quaternion();

			return function getWorldScale( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			// meta is '' when called from JSON.stringify
			var isRootObject = ( meta === undefined || meta === '' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	var count$2 = 0;
	function Object3DIdCount() { return count$2++; }

	/**
	 * @author bhouston / http://clara.io
	 */

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Line3.prototype = {

		constructor: Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new Vector3();
			var startEnd = new Vector3();

			return function closestPointToPointParameter( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = _Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Triangle.normal = function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	Triangle.barycoordFromPoint = function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	Triangle.containsPoint = function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	Triangle.prototype = {

		constructor: Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new Vector3();
			var v1 = new Vector3();

			return function area() {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		closestPointToPoint: function () {

			var plane, edgeList, projectedPoint, closestPoint;

			return function closestPointToPoint( point, optionalTarget ) {

				if ( plane === undefined ) {

					plane = new Plane();
					edgeList = [ new Line3(), new Line3(), new Line3() ];
					projectedPoint = new Vector3();
					closestPoint = new Vector3();

				}

				var result = optionalTarget || new Vector3();
				var minDistance = Infinity;

				// project the point onto the plane of the triangle

				plane.setFromCoplanarPoints( this.a, this.b, this.c );
				plane.projectPoint( point, projectedPoint );

				// check if the projection lies within the triangle

				if( this.containsPoint( projectedPoint ) === true ) {

					// if so, this is the closest point

					result.copy( projectedPoint );

				} else {

					// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

					edgeList[ 0 ].set( this.a, this.b );
					edgeList[ 1 ].set( this.b, this.c );
					edgeList[ 2 ].set( this.c, this.a );

					for( var i = 0; i < edgeList.length; i ++ ) {

						edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

						var distance = projectedPoint.distanceToSquared( closestPoint );

						if( distance < minDistance ) {

							minDistance = distance;

							result.copy( closestPoint );

						}

					}

				}

				return result;

			};

		}(),

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = (normal && normal.isVector3) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = (color && color.isColor) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Face3.prototype = {

		constructor: Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.lights = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	BufferAttribute.prototype = {

		constructor: BufferAttribute,

		isBufferAttribute: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	function Int8Attribute( array, itemSize ) {

		return new BufferAttribute( new Int8Array( array ), itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint8Array( array ), itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		return new BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		return new BufferAttribute( new Int16Array( array ), itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint16Array( array ), itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		return new BufferAttribute( new Int32Array( array ), itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		return new BufferAttribute( new Uint32Array( array ), itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		return new BufferAttribute( new Float32Array( array ), itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		return new BufferAttribute( new Float64Array( array ), itemSize );

	}

	// Deprecated

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	function Geometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( Geometry.prototype, EventDispatcher.prototype, {

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( (geometry && geometry.isGeometry) === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( (mesh && mesh.isMesh) === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];
			this.colors = [];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var colors = source.colors;

			for ( var i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	var count$3 = 0;
	function GeometryIdCount() { return count$3++; }

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, EventDispatcher.prototype, {

		computeBoundingBox: Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: GeometryIdCount() } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	}

	Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( (attribute && attribute.isBufferAttribute) === false && (attribute && attribute.isInterleavedBufferAttribute) === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.getCenter().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( (object && object.isPoints) || (object && object.isLine) ) {

				var positions = new Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( (object && object.isMesh) ) {

				if ( (geometry && geometry.isGeometry) ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( (object && object.isMesh) ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var positions = this.attributes.position.array;

			if ( positions !== undefined ) {

				this.boundingBox.setFromArray( positions );

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			var box = new Box3();
			var vector = new Vector3();

			return function computeBoundingSphere() {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new Sphere();

				}

				var positions = this.attributes.position;

				if ( positions ) {

					var array = positions.array;
					var center = this.boundingSphere.center;

					box.setFromArray( array );
					box.getCenter( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = array.length; i < il; i += 3 ) {

						vector.fromArray( array, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new Vector3(),
				pB = new Vector3(),
				pC = new Vector3(),

				cb = new Vector3(),
				ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( (geometry && geometry.isBufferGeometry) === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array,
					normalized: attribute.normalized
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	BufferGeometry.MaxIndex = 65535;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			return this;

		},

		updateMorphTargets: function () {

			var morphTargets = this.geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( var m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ morphTargets[ m ].name ] = m;

				}

			}

		},

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();

			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			var barycoord = new Vector3();

			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();

			function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

				Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

				uv1.multiplyScalar( barycoord.x );
				uv2.multiplyScalar( barycoord.y );
				uv3.multiplyScalar( barycoord.z );

				uv1.add( uv2 ).add( uv3 );

				return uv1.clone();

			}

			function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

				var intersect;
				var material = object.material;

				if ( material.side === BackSide ) {

					intersect = ray.intersectTriangle( pC, pB, pA, true, point );

				} else {

					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

				}

				if ( intersect === null ) return null;

				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

				if ( distance < raycaster.near || distance > raycaster.far ) return null;

				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};

			}

			function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

				vA.fromArray( positions, a * 3 );
				vB.fromArray( positions, b * 3 );
				vC.fromArray( positions, c * 3 );

				var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

				if ( intersection ) {

					if ( uvs ) {

						uvA.fromArray( uvs, a * 2 );
						uvB.fromArray( uvs, b * 2 );
						uvC.fromArray( uvs, c * 2 );

						intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

					}

					intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
					intersection.faceIndex = a;

				}

				return intersection;

			}

			return function raycast( raycaster, intersects ) {

				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;

				if ( material === undefined ) return;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				// Check boundingBox before continuing

				if ( geometry.boundingBox !== null ) {

					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

				}

				var uvs, intersection;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var a, b, c;
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( attributes.uv !== undefined ) {

						uvs = attributes.uv.array;

					}

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length; i < l; i += 3 ) {

							a = indices[ i ];
							b = indices[ i + 1 ];
							c = indices[ i + 2 ];

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
								intersects.push( intersection );

							}

						}

					} else {


						for ( var i = 0, l = positions.length; i < l; i += 9 ) {

							a = i / 3;
							b = a + 1;
							c = a + 2;

							intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

							if ( intersection ) {

								intersection.index = a; // triangle number in positions buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var fvA, fvB, fvC;
					var isFaceMaterial = (material && material.isMultiMaterial);
					var materials = isFaceMaterial === true ? material.materials : null;

					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

						var face = faces[ f ];
						var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

						if ( faceMaterial === undefined ) continue;

						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];

						if ( faceMaterial.morphTargets === true ) {

							var morphTargets = geometry.morphTargets;
							var morphInfluences = this.morphTargetInfluences;

							vA.set( 0, 0, 0 );
							vB.set( 0, 0, 0 );
							vC.set( 0, 0, 0 );

							for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

								var influence = morphInfluences[ t ];

								if ( influence === 0 ) continue;

								var targets = morphTargets[ t ].vertices;

								vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
								vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
								vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

							}

							vA.add( fvA );
							vB.add( fvB );
							vC.add( fvC );

							fvA = vA;
							fvB = vB;
							fvC = vC;

						}

						intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

						if ( intersection ) {

							if ( uvs ) {

								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );

								intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

							}

							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );

						}

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		BufferGeometry.call( this );

		this.type = 'BoxBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		var scope = this;

		// segments
		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;

		// these are used to calculate buffer length
		var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
		var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;
		var numberOfVertices = 0;

		// group variables
		var groupStart = 0;

		// build each side of the box geometry
		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
		buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
		buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		// helper functions

		function calculateVertexCount( w, h, d ) {

			var vertices = 0;

			// calculate the amount of vertices for each side (plane)
			vertices += (w + 1) * (h + 1) * 2; // xy
			vertices += (w + 1) * (d + 1) * 2; // xz
			vertices += (d + 1) * (h + 1) * 2; // zy

			return vertices;

		}

		function calculateIndexCount( w, h, d ) {

			var index = 0;

			// calculate the amount of squares for each side
			index += w * h * 2; // xy
			index += w * d * 2; // xz
			index += d * h * 2; // zy

			return index * 6; // two triangles per square => six vertices per square

		}

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			var segmentWidth	= width / gridX;
			var segmentHeight = height / gridY;

			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var vertexCounter = 0;
			var groupCount = 0;

			var vector = new Vector3();

			// generate vertices, normals and uvs

			for ( var iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segmentHeight - heightHalf;

				for ( var ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segmentWidth - widthHalf;

					// set values to correct vector component
					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer
					vertices[ vertexBufferOffset ] = vector.x;
					vertices[ vertexBufferOffset + 1 ] = vector.y;
					vertices[ vertexBufferOffset + 2 ] = vector.z;

					// set values to correct vector component
					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer
					normals[ vertexBufferOffset ] = vector.x;
					normals[ vertexBufferOffset + 1 ] = vector.y;
					normals[ vertexBufferOffset + 2 ] = vector.z;

					// uvs
					uvs[ uvBufferOffset ] = ix / gridX;
					uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

					// update offsets and counters
					vertexBufferOffset += 3;
					uvBufferOffset += 2;
					vertexCounter += 1;

				}

			}

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					// indices
					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;

					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;

					// update offsets and counters
					indexBufferOffset += 6;
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups
			groupStart += groupCount;

			// update total number of vertices
			numberOfVertices += vertexCounter;

		}

	}

	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();

	}

	Camera.prototype = Object.create( Object3D.prototype );
	Camera.prototype.constructor = Camera;

	Camera.prototype.isCamera = true;

	Camera.prototype.getWorldDirection = function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new Matrix4();

		return function lookAt( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	Camera.prototype.copy = function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
					Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan(
						_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( view !== null ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makeFrustum(
					left, left + width, top - height, top, near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source ) {

			Camera.prototype.copy.call( this, source );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

			this.view = {
				fullWidth: fullWidth,
				fullHeight: fullHeight,
				offsetX: x,
				offsetY: y,
				width: width,
				height: height
			};

			this.updateProjectionMatrix();

		},

		clearViewOffset: function() {

			this.view = null;
			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * size );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {

			setMode: setMode,
			setIndex: setIndex,
			render: render,
			renderInstances: renderInstances

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			infoRender.calls ++;
			infoRender.vertices += count;

			if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			var count = 0;

			if ( (position && position.isInterleavedBufferAttribute) ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				count = position.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			}

			infoRender.calls ++;
			infoRender.vertices += count * geometry.maxInstancedCount;

			if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		return {
			setMode: setMode,
			render: render,
			renderInstances: renderInstances
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLLights() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear','( value )' ];
			case sRGBEncoding:
				return [ 'sRGB','( value )' ];
			case RGBEEncoding:
				return [ 'RGBE','( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM','( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM','( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD','( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = "Linear";
				break;

			case ReinhardToneMapping:
				toneMappingName = "Reinhard";
				break;

			case Uncharted2ToneMapping:
				toneMappingName = "Uncharted2";
				break;

			case CineonToneMapping:
				toneMappingName = "OptimizedCineon";
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program, identifiers ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

	}

	function parseIncludes( string ) {

		var pattern = /#include +<([\w\d.]+)>/g;

		function replace( match, include ) {

			var replace = ShaderChunk[ include ];

			if ( replace === undefined ) {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

			return parseIncludes( replace );

		}

		return string.replace( pattern, replace );

	}

	function unrollLoops( string ) {

		var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

		function replace( match, start, end, snippet ) {

			var unroll = '';

			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

			}

			return unroll;

		}

		return string.replace( pattern, replace );

	}

	function WebGLProgram( renderer, code, material, parameters ) {

		var gl = renderer.context;

		var extensions = material.extensions;
		var defines = material.defines;

		var vertexShader = material.__webglShader.vertexShader;
		var fragmentShader = material.__webglShader.fragmentShader;

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		}

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( material.envMap.mapping ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

			switch ( material.envMap.mapping ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

			switch ( material.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		// console.log( 'building new program ' );

		//

		var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

		var customDefines = generateDefines( defines );

		//

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,
				customDefines,

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		} else {

			prefixVertex = [

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',

				'#define SHADER_NAME ' + material.__webglShader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
				'#define UNION_CLIPPING_PLANES ' + (parameters.numClippingPlanes - parameters.numClipIntersection),

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

				parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',

				( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

				parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = parseIncludes( vertexShader, parameters );
		vertexShader = replaceLightNums( vertexShader, parameters );

		fragmentShader = parseIncludes( fragmentShader, parameters );
		fragmentShader = replaceLightNums( fragmentShader, parameters );

		if ( ! material.isShaderMaterial ) {

			vertexShader = unrollLoops( vertexShader );
			fragmentShader = unrollLoops( fragmentShader );

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		var programLog = gl.getProgramInfoLog( program );
		var vertexLog = gl.getShaderInfoLog( glVertexShader );
		var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

		var runnable = true;
		var haveDiagnostics = true;

		// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
		// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,
				material: material,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function() {

			if ( cachedUniforms === undefined ) {

				cachedUniforms =
						new WebGLUniforms( gl, program, renderer );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function() {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function() {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		// DEPRECATED

		Object.defineProperties( this, {

			uniforms: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
					return this.getUniforms();

				}
			},

			attributes: {
				get: function() {

					console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
					return this.getAttributes();

				}
			}

		} );


		//

		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking"
		];


		function allocateBones( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && (object && object.isSkinnedMesh) ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( (map && map.isTexture) ) {

				encoding = map.encoding;

			} else if ( (map && map.isWebGLRenderTarget) ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getCurrentRenderTarget();

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: !! fog,
				useFog: material.fog,
				fogExp: (fog && fog.isFogExp2),

				flatShading: material.shading === FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			return array.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, properties, info ) {

		var geometries = {};

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO

			var property = properties.get( geometry );

			if ( property.wireframe ) {

				deleteAttribute( property.wireframe );

			}

			properties.delete( geometry );

			var bufferproperty = properties.get( buffergeometry );

			if ( bufferproperty.wireframe ) {

				deleteAttribute( bufferproperty.wireframe );

			}

			properties.delete( buffergeometry );

			//

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		return {

			get: function ( object ) {

				var geometry = object.geometry;

				if ( geometries[ geometry.id ] !== undefined ) {

					return geometries[ geometry.id ];

				}

				geometry.addEventListener( 'dispose', onGeometryDispose );

				var buffergeometry;

				if ( geometry.isBufferGeometry ) {

					buffergeometry = geometry;

				} else if ( geometry.isGeometry ) {

					if ( geometry._bufferGeometry === undefined ) {

						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

					}

					buffergeometry = geometry._bufferGeometry;

				}

				geometries[ geometry.id ] = buffergeometry;

				info.memory.geometries ++;

				return buffergeometry;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( gl, properties, info ) {

		var geometries = new WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry.isGeometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute.isInterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false ) {

				gl.bufferData( bufferType, data.array, gl.STATIC_DRAW );

			} else if ( data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		return {

			getAttributeBuffer: getAttributeBuffer,
			getWireframeAttribute: getWireframeAttribute,

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

		var _infoMemory = info.memory;
		var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

		//

		function clampToMaxSize( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = _Math.nearestPowerOfTwo( image.width );
				canvas.height = _Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) return true;

			return false;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) return;

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( (renderTarget && renderTarget.isWebGLRenderTargetCube) ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		//



		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = (texture && texture.isCompressedTexture);
					var isDataTexture = (texture.image[ 0 ] && texture.image[ 0 ].isDataTexture);

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isPowerOfTwoImage ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( (texture && texture.isDepthTexture) ) {

				// populate depth texture with dummy data

				var internalFormat = _gl.DEPTH_COMPONENT;

				if ( texture.type === FloatType ) {

					if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
					internalFormat = _gl.DEPTH_COMPONENT32F;

				} else if ( _isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					internalFormat = _gl.DEPTH_COMPONENT16;

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					internalFormat = _gl.DEPTH_STENCIL;

				}

				state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( (texture && texture.isDataTexture) ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( (texture && texture.isCompressedTexture) ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( !( (renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture) ) ) {

				throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

			}

			// upload an empty depth texture with framebuffer size
			if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			} else {

				throw new Error('Unknown depthTexture format')

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( (renderTarget && renderTarget.isWebGLRenderTargetCube) );
			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;

			if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
					texture.minFilter !== NearestFilter &&
					texture.minFilter !== LinearFilter ) {

				var target = (renderTarget && renderTarget.isWebGLRenderTargetCube) ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				_gl.generateMipmap( target );
				state.bindTexture( target, null );

			}

		}

		this.setTexture2D = setTexture2D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = {};

		return {

			get: function ( object ) {

				var uuid = object.uuid;
				var map = properties[ uuid ];

				if ( map === undefined ) {

					map = {};
					properties[ uuid ] = map;

				}

				return map;

			},

			delete: function ( object ) {

				delete properties[ object.uuid ];

			},

			clear: function () {

				properties = {};

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, paramThreeToGL ) {

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4();

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a ) {

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( 0, 0, 0, 1 );

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( gl.NEVER );
									break;

								case AlwaysDepth:

									gl.depthFunc( gl.ALWAYS );
									break;

								case LessDepth:

									gl.depthFunc( gl.LESS );
									break;

								case LessEqualDepth:

									gl.depthFunc( gl.LEQUAL );
									break;

								case EqualDepth:

									gl.depthFunc( gl.EQUAL );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( gl.GEQUAL );
									break;

								case GreaterDepth:

									gl.depthFunc( gl.GREATER );
									break;

								case NotEqualDepth:

									gl.depthFunc( gl.NOTEQUAL );
									break;

								default:

									gl.depthFunc( gl.LEQUAL );

							}

						} else {

							gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail  = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef  = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

						currentStencilFail  = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		//

		function init() {

			clearColor( 0, 0, 0, 1 );
			clearDepth( 1 );
			clearStencil( 0 );

			enable( gl.DEPTH_TEST );
			setDepthFunc( LessEqualDepth );

			setFlipSided( false );
			setCullFace( CullFaceBack );
			enable( gl.CULL_FACE );

			enable( gl.BLEND );
			setBlending( NormalBlending );

		}

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		}

		function getCompressedTextureFormats() {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		}

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending !== NoBlending ) {

				enable( gl.BLEND );

			} else {

				disable( gl.BLEND );

			}

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( blending === AdditiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

					}

				} else if ( blending === SubtractiveBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

					}

				} else if ( blending === MultiplyBlending ) {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

					} else {

						gl.blendEquation( gl.FUNC_ADD );
						gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

					}

				} else {

					if ( premultipliedAlpha ) {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					} else {

						gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
						gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

					}

				}

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			if ( blending === CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		}

		// TODO Deprecate

		function setColorWrite( colorWrite ) {

			colorBuffer.setMask( colorWrite );

		}

		function setDepthTest( depthTest ) {

			depthBuffer.setTest( depthTest );

		}

		function setDepthWrite( depthWrite ) {

			depthBuffer.setMask( depthWrite );

		}

		function setDepthFunc( depthFunc ) {

			depthBuffer.setFunc( depthFunc );

		}

		function setStencilTest( stencilTest ) {

			stencilBuffer.setTest( stencilTest );

		}

		function setStencilWrite( stencilWrite ) {

			stencilBuffer.setMask( stencilWrite );

		}

		function setStencilFunc( stencilFunc, stencilRef, stencilMask ) {

			stencilBuffer.setFunc( stencilFunc, stencilRef, stencilMask );

		}

		function setStencilOp( stencilFail, stencilZFail, stencilZPass ) {

			stencilBuffer.setOp( stencilFail, stencilZFail, stencilZPass );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function getScissorTest() {

			return currentScissorTest;

		}

		function setScissorTest( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		}

		// TODO Deprecate

		function clearColor( r, g, b, a ) {

			colorBuffer.setClear( r, g, b, a );

		}

		function clearDepth( depth ) {

			depthBuffer.setClear( depth );

		}

		function clearStencil( stencil ) {

			stencilBuffer.setClear( stencil );

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			init: init,
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,

			setBlending: setBlending,

			setColorWrite: setColorWrite,
			setDepthTest: setDepthTest,
			setDepthWrite: setDepthWrite,
			setDepthFunc: setDepthFunc,
			setStencilTest: setStencilTest,
			setStencilWrite: setStencilWrite,
			setStencilFunc: setStencilFunc,
			setStencilOp: setStencilOp,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			getScissorTest: getScissorTest,
			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,

			clearColor: clearColor,
			clearDepth: clearDepth,
			clearStencil: clearStencil,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true && !! extensions.get( 'EXT_frag_depth' );

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		return {

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					case 'WEBGL_compressed_texture_etc1':
						extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function() {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function() {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled ||
					planes === null || planes.length === 0 ||
					renderingShadows && ! clipShadows ) {
				// there's no local clipping

				if ( renderingShadows ) {
					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();
				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset;
										i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).
								applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			
			return dstArray;

		}

	}

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		console.log( 'THREE.WebGLRenderer', REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );

		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		_currentViewport = new Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_clearColor = new Color( 0x000000 ),
		_clearAlpha = 0,

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		_sphere = new Sphere(),

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: []

		},

		// info

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: {

				geometries: 0,
				textures: 0

			},
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new WebGLExtensions( _gl );

		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		var state = new WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new WebGLProperties();
		var textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
		var objects = new WebGLObjects( _gl, properties, this.info );
		var programCache = new WebGLPrograms( this, capabilities );
		var lightCache = new WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		var backgroundCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
		var backgroundCamera2 = new PerspectiveCamera();
		var backgroundPlaneMesh = new Mesh(
			new PlaneBufferGeometry( 2, 2 ),
			new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
		);
		var backgroundBoxShader = ShaderLib[ 'cube' ];
		var backgroundBoxMesh = new Mesh(
			new BoxBufferGeometry( 5, 5, 5 ),
			new ShaderMaterial( {
				uniforms: backgroundBoxShader.uniforms,
				vertexShader: backgroundBoxShader.vertexShader,
				fragmentShader: backgroundBoxShader.fragmentShader,
				side: BackSide,
				depthTest: false,
				depthWrite: false,
				fog: false
			} )
		);

		//

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			state.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.properties = properties;
		this.state = state;

		// shadow map

		var shadowMap = new WebGLShadowMap( this, _lights, objects, capabilities );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new SpritePlugin( this, sprites );
		var lensFlarePlugin = new LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = function () {

			return capabilities.getMaxAnisotropy();

		};

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _viewport.z, _viewport.w, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			state.viewport( _viewport.set( x, y, width, height ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			state.scissor( _scissor.set( x, y, width, height ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			transparentObjects = [];
			transparentObjectsLastIndex = -1;
			opaqueObjects = [];
			opaqueObjectsLastIndex = -1;

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( ! material.isMeshPhongMaterial &&
				     ! material.isMeshStandardMaterial &&
				       material.shading === FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( absNumericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				for ( var i = activeInfluences.length, il = morphInfluences.length; i < il; i ++ ) {

					morphInfluences[ i ] = 0.0;

				}

				program.getUniforms().setValue(
						_gl, 'morphTargetInfluences', morphInfluences );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataCount = 0;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) return;

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				if ( geometry.maxInstancedCount > 0 ) {

					renderer.renderInstances( geometry, drawStart, drawCount );

				}

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry && geometry.isInstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var type = _gl.FLOAT;
						var array = geometryAttribute.array;
						var normalized = geometryAttribute.normalized;

						if ( array instanceof Float32Array ) {

							type = _gl.FLOAT;

						} else if ( array instanceof Float64Array ) {

							console.warn( "Unsupported data buffer format: Float64Array" );

						} else if ( array instanceof Uint16Array ) {

							type = _gl.UNSIGNED_SHORT;

						} else if ( array instanceof Int16Array ) {

							type = _gl.SHORT;

						} else if ( array instanceof Uint32Array ) {

							type = _gl.UNSIGNED_INT;

						} else if ( array instanceof Int32Array ) {

							type = _gl.INT;

						} else if ( array instanceof Int8Array ) {

							type = _gl.BYTE;

						} else if ( array instanceof Uint8Array ) {

							type = _gl.UNSIGNED_BYTE;

						}

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function absNumericalSort( a, b ) {

			return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

		}

		function painterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {

				return a.material.program.id - b.material.program.id;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera !== undefined && camera.isCamera !== true ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			//

			if ( _clippingEnabled ) _clipping.beginShadows();

			setupShadows( lights );

			shadowMap.render( scene, camera );

			setupLights( lights, camera );

			if ( _clippingEnabled ) _clipping.endShadows();

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			//

			var background = scene.background;

			if ( background === null ) {

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			} else if ( background && background.isColor ) {

				glClearColor( background.r, background.g, background.b, 1 );
				forceClear = true;

			}

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			if ( background && background.isCubeTexture ) {

				backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

				backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
				backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

				backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
				backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

				objects.update( backgroundBoxMesh );

				_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

			} else if ( background && background.isTexture ) {

				backgroundPlaneMesh.material.map = background;

				objects.update( backgroundPlaneMesh );

				_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				renderObjects( transparentObjects, scene, camera, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( NoBlending );
				renderObjects( opaqueObjects, scene, camera );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, scene, camera );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				textures.updateRenderTargetMipmap( renderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		// TODO Duplicated code (Frustum)

		function isObjectViewable( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSpriteViewable( sprite ) {

			_sphere.center.set( 0, 0, 0 );
			_sphere.radius = 0.7071067811865476;
			_sphere.applyMatrix4( sprite.matrixWorld );

			return isSphereViewable( _sphere );

		}

		function isSphereViewable( sphere ) {

			if ( ! _frustum.intersectsSphere( sphere ) ) return false;

			var numPlanes = _clipping.numPlanes;

			if ( numPlanes === 0 ) return true;

			var planes = _this.clippingPlanes,

				center = sphere.center,
				negRad = - sphere.radius,
				i = 0;

			do {

				// out when deeper than radius in the negative halfspace
				if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

			} while ( ++ i !== numPlanes );

			return true;

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			var visible = ( object.layers.mask & camera.layers.mask ) !== 0;

			if ( visible ) {

				if ( object.isLight ) {

					lights.push( object );

				} else if ( object.isSprite ) {

					if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object.isLensFlare ) {

					lensFlares.push( object );

				} else if ( object.isImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material.isMultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				if ( object.isImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, scene.fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );


			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters(
					material, _lights, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.__webglShader.uniforms;

			if ( ! material.isShaderMaterial &&
			     ! material.isRawShaderMaterial ||
			       material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.lightsHash = _lights.hash;

			if ( material.lights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.spotLights.value = _lights.spot;
				uniforms.pointLights.value = _lights.point;
				uniforms.hemisphereLights.value = _lights.hemi;

				uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
				uniforms.spotShadowMap.value = _lights.spotShadowMap;
				uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
				uniforms.pointShadowMap.value = _lights.pointShadowMap;
				uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setMaterial( material ) {

			material.side === DoubleSide
				? state.disable( _gl.CULL_FACE )
				: state.enable( _gl.CULL_FACE );

			state.setFlipSided( material.side === BackSide );

			material.transparent === true
				? state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
				: state.setBlending( NoBlending );

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );

				}

			}

			if ( material.needsUpdate === false ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( material.lights && materialProperties.lightsHash !== _lights.hash ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes || 
	 				  materialProperties.numIntersection  !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				p_uniforms.set( _gl, camera, 'projectionMatrix' );

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshBasicMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isShaderMaterial ||
				     material.skinning ) {

					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				}

				p_uniforms.set( _gl, _this, 'toneMappingExposure' );
				p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

						p_uniforms.set( _gl, skeleton, 'boneTexture' );
						p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
						p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ||
				     material.isMeshLambertMaterial ||
				     material.isMeshPhongMaterial ||
				     material.isMeshStandardMaterial ||
				     material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material.isLineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material.isMeshDepthMaterial ) {

					if ( material.displacementMap ) {

						m_uniforms.displacementMap.value = material.displacementMap;
						m_uniforms.displacementScale.value = material.displacementScale;
						m_uniforms.displacementBias.value = material.displacementBias;

					}

				} else if ( material.isMeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );

			}


			// common matrices

			p_uniforms.set( _gl, object, 'modelViewMatrix' );
			p_uniforms.set( _gl, object, 'normalMatrix' );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

			refreshUniformsStandard( uniforms, material );

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Lighting

		function setupShadows( lights ) {

			var lightShadowsLength = 0;

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				if ( light.castShadow ) {

					_lights.shadows[ lightShadowsLength ++ ] = light;

				}

			}

			_lights.shadows.length = lightShadowsLength;

		}

		function setupLights( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,
			shadowMap,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isDirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.directionalShadowMap[ directionalLength ] = shadowMap;
					_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light.isSpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.spotShadowMap[ spotLength ] = shadowMap;
					_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light.isPointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

					}

					_lights.pointShadowMap[ pointLength ] = shadowMap;

					if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

						_lights.pointShadowMatrix[ pointLength ] = new Matrix4();

					}

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position
					_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
					_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light.isHemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.spot.length = spotLength;
			_lights.point.length = pointLength;
			_lights.hemi.length = hemiLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			state.setCullFace( cullFace );
			state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

		};

		// Textures

		function allocTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		this.allocTextureUnit = allocTextureUnit;

		// this.setTexture2D = setTexture2D;
		this.setTexture2D = ( function() {

			var warned = false;

			// backwards compatibility: peel texture.texture
			return function setTexture2D( texture, slot ) {

				if ( texture && texture.isWebGLRenderTarget ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTexture = ( function() {

			var warned = false;

			return function setTexture( texture, slot ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
					warned = true;

				}

				textures.setTexture2D( texture, slot );

			};

		}() );

		this.setTextureCube = ( function() {

			var warned = false;

			return function setTextureCube( texture, slot ) {

				// backwards compatibility: peel texture.texture
				if ( texture && texture.isWebGLRenderTargetCube ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warned = true;

					}

					texture = texture.texture;

				}

				// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

					// CompressedTexture can have Array in image :/

					// this function alone should take care of cube textures
					textures.setTextureCube( texture, slot );

				} else {

					// assumed: texture property of THREE.WebGLRenderTargetCube

					textures.setTextureCubeDynamic( texture, slot );

				}

			};

		}() );

		this.getCurrentRenderTarget = function() {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			var framebuffer;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

				_currentViewport.copy( renderTarget.viewport );

			} else {

				framebuffer = null;

				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			state.viewport( _currentViewport );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( ( renderTarget && renderTarget.isWebGLRenderTarget ) === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && paramThreeToGL( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && paramThreeToGL( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					     ! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					     ! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, paramThreeToGL( textureFormat ), paramThreeToGL( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		// Map three.js constants to WebGL constants

		function paramThreeToGL( p ) {

			var extension;

			if ( p === RepeatWrapping ) return _gl.REPEAT;
			if ( p === ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === NearestFilter ) return _gl.NEAREST;
			if ( p === NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === LinearFilter ) return _gl.LINEAR;
			if ( p === LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === ByteType ) return _gl.BYTE;
			if ( p === ShortType ) return _gl.SHORT;
			if ( p === UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === IntType ) return _gl.INT;
			if ( p === UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === FloatType ) return _gl.FLOAT;

			if ( p === HalfFloatType ) {

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) return extension.HALF_FLOAT_OES;

			}

			if ( p === AlphaFormat ) return _gl.ALPHA;
			if ( p === RGBFormat ) return _gl.RGB;
			if ( p === RGBAFormat ) return _gl.RGBA;
			if ( p === LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return _gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return _gl.DEPTH_STENCIL;

			if ( p === AddEquation ) return _gl.FUNC_ADD;
			if ( p === SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === ZeroFactor ) return _gl.ZERO;
			if ( p === OneFactor ) return _gl.ONE;
			if ( p === SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === DstColorFactor ) return _gl.DST_COLOR;
			if ( p === OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				 p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			if ( p === MinEquation || p === MaxEquation ) {

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;

				}

			}

			if ( p === UnsignedInt248Type ) {

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

			}

			return 0;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2 ( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	FogExp2.prototype.isFogExp2 = true;

	FogExp2.prototype.clone = function () {

		return new FogExp2( this.color.getHex(), this.density );

	};

	FogExp2.prototype.toJSON = function ( meta ) {

		return {
			type: 'FogExp2',
			color: this.color.getHex(),
			density: this.density
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog ( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Fog.prototype.isFog = true;

	Fog.prototype.clone = function () {

		return new Fog( this.color.getHex(), this.near, this.far );

	};

	Fog.prototype.toJSON = function ( meta ) {

		return {
			type: 'Fog',
			color: this.color.getHex(),
			near: this.near,
			far: this.far
		};

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene () {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	}

	Scene.prototype = Object.create( Object3D.prototype );

	Scene.prototype.constructor = Scene;

	Scene.prototype.copy = function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	Scene.prototype.toJSON = function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function LensFlare( texture, size, distance, blending, color ) {

		Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	}

	LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LensFlare,

		isLensFlare: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.positionScreen.copy( source.positionScreen );
			this.customUpdateCallback = source.customUpdateCallback;

			for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

				this.lensFlares.push( source.lensFlares[ i ] );

			}

			return this;

		},

		add: function ( texture, size, distance, blending, color, opacity ) {

			if ( size === undefined ) size = - 1;
			if ( distance === undefined ) distance = 0;
			if ( opacity === undefined ) opacity = 1;
			if ( color === undefined ) color = new Color( 0xffffff );
			if ( blending === undefined ) blending = NormalBlending;

			distance = Math.min( distance, Math.max( 0, distance ) );

			this.lensFlares.push( {
				texture: texture,	// THREE.Texture
				size: size, 		// size in pixels (-1 = use texture.width)
				distance: distance, 	// distance (0-1) from light source (0=at light source)
				x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
				scale: 1, 		// scale
				rotation: 0, 		// rotation
				opacity: opacity,	// opacity
				color: color,		// color
				blending: blending	// blending
			} );

		},

		/*
		 * Update lens flares update positions on all flares based on the screen position
		 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
		 */

		updateLensFlares: function () {

			var f, fl = this.lensFlares.length;
			var flare;
			var vecX = - this.positionScreen.x * 2;
			var vecY = - this.positionScreen.y * 2;

			for ( f = 0; f < fl; f ++ ) {

				flare = this.lensFlares[ f ];

				flare.x = this.positionScreen.x + vecX * flare.distance;
				flare.y = this.positionScreen.y + vecY * flare.distance;

				flare.wantedRotation = flare.x * Math.PI * 0.25;
				flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2()
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;
		this.lights = false;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
				var guessSizeSq = this.scale.x * this.scale.y / 4;

				if ( distanceSq > guessSizeSq ) {

					return;

				}

				intersects.push( {

					distance: Math.sqrt( distanceSq ),
					point: this.position,
					face: null,
					object: this

				} );

			};

		}() ),

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

	}


	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) distance = 0;

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			for ( var i = 1, l = levels.length; i < l; i ++ ) {

				if ( distance < levels[ i ].distance ) {

					break;

				}

			}

			return levels[ i - 1 ].object;

		},

		raycast: ( function () {

			var matrixPosition = new Vector3();

			return function raycast( raycaster, intersects ) {

				matrixPosition.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( matrixPosition );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			};

		}() ),

		update: function () {

			var v1 = new Vector3();
			var v2 = new Vector3();

			return function update( camera ) {

				var levels = this.levels;

				if ( levels.length > 1 ) {

					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );

					var distance = v1.distanceTo( v2 );

					levels[ 0 ].object.visible = true;

					for ( var i = 1, l = levels.length; i < l; i ++ ) {

						if ( distance >= levels[ i ].distance ) {

							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;

						} else {

							break;

						}

					}

					for ( ; i < l; i ++ ) {

						levels[ i ].object.visible = false;

					}

				}

			};

		}(),

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps  = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	function Skeleton( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = _Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, RGBAFormat, FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ b ] ) {

					inverse.getInverse( this.bones[ b ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone;

			// recover the bind-time world matrices

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ b ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				bone = this.bones[ b ];

				if ( bone ) {

					if ( (bone.parent && bone.parent.isBone) ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: ( function () {

			var offsetMatrix = new Matrix4();

			return function update() {

				// flatten bone matrices to array

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					// compute the offset between the current and the original transform

					var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

					offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
					offsetMatrix.toArray( this.boneMatrices, b * 16 );

				}

				if ( this.useVertexTexture ) {

					this.boneTexture.needsUpdate = true;

				}

			};

		} )(),

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone( skin ) {

		Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.skin = source.skin;

			return this;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material, useVertexTexture ) {

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null &&
						bones[ gbone.parent ] !== undefined ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	}


	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		bind: function( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			if ( (this.geometry && this.geometry.isGeometry) ) {

				for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

					var sw = this.geometry.skinWeights[ i ];

					var scale = 1.0 / sw.lengthManhattan();

					if ( scale !== Infinity ) {

						sw.multiplyScalar( scale );

					} else {

						sw.set( 1, 0, 0, 0 ); // do something reasonable

					}

				}

			} else if ( (this.geometry && this.geometry.isBufferGeometry) ) {

				var vec = new Vector4();

				var skinWeight = this.geometry.attributes.skinWeight;

				for ( var i = 0; i < skinWeight.count; i ++ ) {

					vec.x = skinWeight.getX( i );
					vec.y = skinWeight.getY( i );
					vec.z = skinWeight.getZ( i );
					vec.w = skinWeight.getW( i );

					var scale = 1.0 / vec.lengthManhattan();

					if ( scale !== Infinity ) {

						vec.multiplyScalar( scale );

					} else {

						vec.set( 1, 0, 0, 0 ); // do something reasonable

					}

					skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

				}

			}

		},

		updateMatrixWorld: function( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, true );

			if ( this.bindMode === "attached" ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === "detached" ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function() {

			return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.lights = false;

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new LineSegments( geometry, material );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var precision = raycaster.linePrecision;
				var precisionSq = precision * precision;

				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = (this && this.isLineSegments) ? 2 : 1;

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

							var a = indices[ i ];
							var b = indices[ i + 1 ];

							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					} else {

						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );

							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				} else if ( (geometry && geometry.isGeometry) ) {

					var vertices = geometry.vertices;
					var nbVertices = vertices.length;

					for ( var i = 0; i < nbVertices - 1; i += step ) {

						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.lights = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: ( function () {

			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();

			return function raycast( raycaster, intersects ) {

				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;

				// Checking boundingSphere distance to ray

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );

				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

				//

				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();

				function testPoint( point, index ) {

					var rayPointDistanceSq = ray.distanceSqToPoint( point );

					if ( rayPointDistanceSq < localThresholdSq ) {

						var intersectPoint = ray.closestPointToPoint( point );
						intersectPoint.applyMatrix4( matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectPoint );

						if ( distance < raycaster.near || distance > raycaster.far ) return;

						intersects.push( {

							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object

						} );

					}

				}

				if ( (geometry && geometry.isBufferGeometry) ) {

					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;

					if ( index !== null ) {

						var indices = index.array;

						for ( var i = 0, il = indices.length; i < il; i ++ ) {

							var a = indices[ i ];

							position.fromArray( positions, a * 3 );

							testPoint( position, a );

						}

					} else {

						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

							position.fromArray( positions, i * 3 );

							testPoint( position, i );

						}

					}

				} else {

					var vertices = geometry.vertices;

					for ( var i = 0, l = vertices.length; i < l; i ++ ) {

						testPoint( vertices[ i ], i );

					}

				}

			};

		}() ),

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	}

	VideoTexture.prototype = Object.create( Texture.prototype );
	VideoTexture.prototype.constructor = VideoTexture;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' )

		}

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.type = type !== undefined ? type : UnsignedShortType;

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( (geometry && geometry.isGeometry) ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

		} else if ( (geometry && geometry.isBufferGeometry) ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new BufferAttribute( coords, 3 ) );

			}

		}

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// generate vertices and uvs

		var vertices = [];
		var uvs = [];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				vertices.push( p.x, p.y, p.z );

				uvs.push( u, v );

			}

		}

		// generate indices

		var indices = [];
		var a, b, c, d;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		appplyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.addAttribute( 'position', Float32Attribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvBuffer, 2 ) );
		this.normalizeNormals();

		this.boundingSphere = new Sphere( new Vector3(), radius );

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols ; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function appplyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth  ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] =  uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function OctahedronBufferGeometry( radius,detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	function IcosahedronGeometry( radius, detail ) {

	 	Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 *
	 */

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( ( indices.length > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', Float32Attribute( vertices, 3 ) );
		this.addAttribute( 'normal', Float32Attribute( normals, 3 ) );
		this.addAttribute( 'uv', Float32Attribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			var P = path.getPointAt( i / tubularSegments );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin =   Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Creates a tube which extrudes along a 3d spline.
	 */

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * see: http://www.blackpawn.com/texts/pqtorus/
	 */
	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 100;
		tube = tube || 40;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var i, j, index = 0, indexOffset = 0;

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				// vertex
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
				normal.subVectors( vertex, P1 ).normalize();
				normals.setXYZ( index, normal.x, normal.y, normal.z );

				// uv
				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices
				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 */

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// used to calculate buffer length
		var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
		var indexCount = radialSegments * tubularSegments * 2 * 3;

		// buffers
		var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
		var vertices = new Float32Array( vertexCount * 3 );
		var normals = new Float32Array( vertexCount * 3 );
		var uvs = new Float32Array( vertexCount * 2 );

		// offset variables
		var vertexBufferOffset = 0;
		var uvBufferOffset = 0;
		var indexBufferOffset = 0;

		// helper variables
		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices[ vertexBufferOffset ] = vertex.x;
				vertices[ vertexBufferOffset + 1 ] = vertex.y;
				vertices[ vertexBufferOffset + 2 ] = vertex.z;

				// this vector is used to calculate the normal
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				// normal
				normal.subVectors( vertex, center ).normalize();

				normals[ vertexBufferOffset ] = normal.x;
				normals[ vertexBufferOffset + 1 ] = normal.y;
				normals[ vertexBufferOffset + 2 ] = normal.z;

				// uv
				uvs[ uvBufferOffset ] = i / tubularSegments;
				uvs[ uvBufferOffset + 1 ] = j / radialSegments;

				// update offsets
				vertexBufferOffset += 3;
				uvBufferOffset += 2;

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// face one
				indices[ indexBufferOffset ] = a;
				indices[ indexBufferOffset + 1 ] = b;
				indices[ indexBufferOffset + 2 ] = d;

				// face two
				indices[ indexBufferOffset + 3 ] = b;
				indices[ indexBufferOffset + 4 ] = c;
				indices[ indexBufferOffset + 5 ] = d;

				// update offset
				indexBufferOffset += 6;

			}

		}

		// build geometry
		this.setIndex( new BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function triangulate( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function removeDupEndPts(points) {

				var l = points.length;

				if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

					points.pop();

				}

			}

			removeDupEndPts( contour );
			holes.forEach( removeDupEndPts );

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function b2( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function b3( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <Object> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ExtrudeGeometry( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new Vector3();
			normal = new Vector3();
			position2 = new Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * Math.cos ( t * Math.PI / 2 );
			bs = bevelSize * Math.sin( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new Vector2( a.x, a.y ),
				new Vector2( b.x, b.y ),
				new Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new Vector2( a.x, 1 - a.z ),
					new Vector2( b.x, 1 - b.z ),
					new Vector2( c.x, 1 - c.z ),
					new Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new Vector2( a.y, 1 - a.z ),
					new Vector2( b.y, 1 - b.z ),
					new Vector2( c.y, 1 - c.z ),
					new Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	function TextGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( (font && font.isFont) === false ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		ExtrudeGeometry.call( this, shapes, parameters );

		this.type = 'TextGeometry';

	}

	TextGeometry.prototype = Object.create( ExtrudeGeometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? Uint32Attribute : Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 20;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// these are used to calculate buffer length
		var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
		var indexCount = thetaSegments * phiSegments * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// some helper variables
		var index = 0, indexOffset = 0, segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		// values are generate from the inside of the ring to the outside

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, 0, 1 );

				// uv
				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index++;

			}

			// increase the radius for next row of vertices
			radius += radiusStep;

		}

		// generate indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				// indices
				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;

				// face two
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 */

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	 // points - to create a closed torus, one must use a set of points
	 //    like so: [ a, b, c, d, a ], see first is the same as last.
	 // segments - the number of circumference segments to create
	 // phiStart - the starting radian
	 // phiLength - the radian (0 to 2PI) range of the lathed section
	 //    2PI is a closed lathe, less than 2PI is a portion.

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]
		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );

		// these are used to calculate buffer length
		var vertexCount = ( segments + 1 ) * points.length;
		var indexCount = segments * points.length * 2 * 3;

		// buffers
		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables
		var index = 0, indexOffset = 0, base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex
				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// uv
				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

		}

		// generate indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				// indices
				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// face one
				indices.setX( indexOffset, a ); indexOffset++;
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

				// face two
				indices.setX( indexOffset, b ); indexOffset++;
				indices.setX( indexOffset, c ); indexOffset++;
				indices.setX( indexOffset, d ); indexOffset++;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'uv', uvs );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices
			base = segments * points.length * 3;

			for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line
				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line
				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals
				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals
				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			} // next row

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2PI) range of the lathed section
	//    2PI is a closed lathe, less than 2PI is a portion.

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	function ShapeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( (geometry && geometry.isBufferGeometry) ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new BufferAttribute( new Float32Array( coords ), 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

		// used to calculate buffer length

		var nbCap = 0;

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) nbCap ++;
			if ( radiusBottom > 0 ) nbCap ++;

		}

		var vertexCount = calculateVertexCount();
		var indexCount = calculateIndexCount();

		// buffers

		var indices = new BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
		var vertices = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		// helper variables

		var index = 0,
		    indexOffset = 0,
		    indexArray = [],
		    halfHeight = height / 2;

		// group variables
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.addAttribute( 'position', vertices );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		// helper functions

		function calculateVertexCount() {

			var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

			if ( openEnded === false ) {

				count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

			}

			return count;

		}

		function calculateIndexCount() {

			var count = radialSegments * heightSegments * 2 * 3;

			if ( openEnded === false ) {

				count += radialSegments * nbCap * 3;

			}

			return count;

		}

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row
				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex
					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );

					// uv
					uvs.setXY( index, u, 1 - v );

					// save index of vertex in respective row
					indexRow.push( index );

					// increase index
					index ++;

				}

				// now save vertices of the row in our index array
				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices
					var i1 = indexArray[ y ][ x ];
					var i2 = indexArray[ y + 1 ][ x ];
					var i3 = indexArray[ y + 1 ][ x + 1 ];
					var i4 = indexArray[ y ][ x + 1 ];

					// face one
					indices.setX( indexOffset, i1 ); indexOffset ++;
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// face two
					indices.setX( indexOffset, i2 ); indexOffset ++;
					indices.setX( indexOffset, i3 ); indexOffset ++;
					indices.setX( indexOffset, i4 ); indexOffset ++;

					// update counters
					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex
				vertices.setXYZ( index, 0, halfHeight * sign, 0 );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = 0.5;
				uv.y = 0.5;

				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// save the index of the last center vertex
			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex
				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

				// normal
				normals.setXYZ( index, 0, sign, 0 );

				// uv
				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.setXY( index, uv.x, uv.y );

				// increase index
				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				} else {

					// face bottom
					indices.setX( indexOffset, i + 1 ); indexOffset ++;
					indices.setX( indexOffset, i ); indexOffset ++;
					indices.setX( indexOffset, c ); indexOffset ++;

				}

				// update counters
				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support
			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups
			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	/**
	 * @author: abelnation / http://github.com/abelnation
	 */

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new Sphere( new Vector3(), radius );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;

	/**
	 * @author hughes
	 */

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();

	}

	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;



	var Geometries = Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		SphereGeometry: SphereGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		CircleGeometry: CircleGeometry,
		BoxBufferGeometry: BoxBufferGeometry,
		BoxGeometry: BoxGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ShadowMaterial() {

		ShaderMaterial.call( this, {
			uniforms: UniformsUtils.merge( [
				UniformsLib[ "lights" ],
				{
					opacity: { value: 1.0 }
				}
			] ),
			vertexShader: ShaderChunk[ 'shadow_vert' ],
			fragmentShader: ShaderChunk[ 'shadow_frag' ]
		} );

		this.lights = true;
		this.transparent = true;

		Object.defineProperties( this, {
			opacity: {
				enumerable: true,
				get: function () {
					return this.uniforms.opacity.value;
				},
				set: function ( value ) {
					this.uniforms.opacity.value = value;
				}
			}
		} );

	}

	ShadowMaterial.prototype = Object.create( ShaderMaterial.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MultiMaterial( materials ) {

		this.uuid = _Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	}

	MultiMaterial.prototype = {

		constructor: MultiMaterial,

		isMultiMaterial: true,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = { 'PHYSICAL': '' };

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = { 'PHYSICAL': '' };

		this.reflectivity = source.reflectivity;

		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;
		this.lights = false;
		this.morphTargets = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.lights = false;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( Material.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MultiMaterial: MultiMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function XHRLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( XHRLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) url = '';

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) onLoad( cached );

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[1];
				var isBase64 = !!dataUriRegexResult[2];
				var data = dataUriRegexResult[3];

				data = window.decodeURIComponent(data);

				if( isBase64 ) {
					data = window.atob(data);
				}

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

						 	response = new ArrayBuffer( data.length );
							var view = new Uint8Array( response );
							for ( var i = 0; i < data.length; i ++ ) {

									view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ response ], { "type" : mimeType } );

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					}, 0);

				} catch ( error ) {

					// Wait for next browser tick
					window.setTimeout( function() {

						if ( onError ) onError( error );

						scope.manager.itemError( url );

					}, 0);

				}

			} else {

				var request = new XMLHttpRequest();
				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = event.target.response;

					Cache.add( url, response );

					if ( this.status === 200 ) {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else if ( this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else {

						if ( onError ) onError( event );

						scope.manager.itemError( url );

					}

				}, false );

				if ( onProgress !== undefined ) {

					request.addEventListener( 'progress', function ( event ) {

						onProgress( event );

					}, false );

				}

				request.addEventListener( 'error', function ( event ) {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				if ( request.overrideMimeType ) request.overrideMimeType( 'text/plain' );

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	function CompressedTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( CompressedTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	var DataTextureLoader = BinaryTextureLoader;
	function BinaryTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	}

	Object.assign( BinaryTextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( ImageLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
			image.onload = function () {

				image.onload = null;

				URL.revokeObjectURL( image.src );

				if ( onLoad ) onLoad( image );

				scope.manager.itemEnd( url );

			};
			image.onerror = onError;

			if ( url.indexOf( 'data:' ) === 0 ) {

				image.src = url;

			} else {

				var loader = new XHRLoader();
				loader.setPath( this.path );
				loader.setResponseType( 'blob' );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( blob ) {

					image.src = URL.createObjectURL( blob );

				}, onProgress, onError );

			}

			scope.manager.itemStart( url );

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( CubeTextureLoader.prototype, {

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( TextureLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setWithCredentials( this.withCredentials );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setPath: function ( value ) {

			this.path = value;
			return this;

		}



	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.matrix = new Matrix4();

	}

	Object.assign( LightShadow.prototype, {

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		update: function ( light ) {

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || 500;

			var camera = this.camera;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * Math.PI;
			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / Math.PI;
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {
				// intensity = power per solid angle.
				// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
				this.intensity = power / ( 4 * Math.PI );
			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow( light ) {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true,

	} );

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Interpolant.prototype = {

		constructor: Interpolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			Interpolant.prototype.copySampleValue_

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	}

	CubicInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	ZeroCurvatureEnding,
			endingEnd:		ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	var KeyframeTrackPrototype;

	KeyframeTrackPrototype = {

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) ++ from;
			while ( to !== -1 && times[ to ] > endTime ) -- to;

			++ to; // inclusive -> exclusive bound

			if( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.
						arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
									value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else keep = true;

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j )

							values[ writeOffset + j ] = values[ readOffset + j ];

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

					values[ writeOffset + j ] = values[ readOffset + j ];

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	function KeyframeTrackConstructor( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	}

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrackConstructor.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype =
			Object.assign( Object.create( KeyframeTrackPrototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited


		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrackConstructor.apply( this, arguments );

	}

	KeyframeTrack.prototype = KeyframeTrackPrototype;
	KeyframeTrackPrototype.constructor = KeyframeTrack;

	// Static methods:

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				var times = [], values = [];

				AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return VectorKeyframeTrack;

				case "color":

					return ColorKeyframeTrack;

				case "quaternion":

					return QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return BooleanKeyframeTrack;

				case "string":

					return StringKeyframeTrack;

			}

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		this.optimize();

	}

	AnimationClip.prototype = {

		constructor: AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new AnimationClip( name, -1, tracks );

		},

		findByName: function( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};

	}

	Object.assign( MaterialLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;

			// for PointsMaterial

			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MultiMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( BufferGeometryLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new BufferGeometry();

			var index = json.data.index;

			var TYPED_ARRAYS = {
				'Int8Array': Int8Array,
				'Uint8Array': Uint8Array,
				'Uint8ClampedArray': Uint8ClampedArray,
				'Int16Array': Int16Array,
				'Uint16Array': Uint16Array,
				'Int32Array': Int32Array,
				'Uint32Array': Uint32Array,
				'Float32Array': Float32Array,
				'Float64Array': Float64Array
			};

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader() {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	}

	Loader.prototype = {

		constructor: Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function createMaterial( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new Color();
				if ( textureLoader === undefined ) textureLoader = new TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = _Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function JSONLoader( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.withCredentials = false;

	}

	Object.assign( JSONLoader.prototype, {

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

			var loader = new XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			}

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			}

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			}

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.texturePath = '';

	}

	Object.assign( ObjectLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new JSONLoader();
				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'IcosahedronGeometry':
						case 'OctahedronGeometry':
						case 'TetrahedronGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemError( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;

					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TextureMapping );

					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TextureWrapping );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TextureWrapping );

					}

					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TextureFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TextureFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

					if ( data.flipY !== undefined ) texture.flipY = data.flipY;

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new Matrix4();

			return function parseObject( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new Scene();

						if ( data.background !== undefined ) {

							if ( Number.isInteger( data.background ) ) {

								object.background = new Color( data.background );

							}

						}

						if ( data.fog !== undefined ) {

							if ( data.fog.type === 'Fog' ) {

								object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

							} else if ( data.fog.type === 'FogExp2' ) {

								object.fog = new FogExp2( data.fog.color, data.fog.density );

							}

						}

						break;

					case 'PerspectiveCamera':

						object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						if ( data.focus !== undefined ) object.focus = data.focus;
						if ( data.zoom !== undefined ) object.zoom = data.zoom;
						if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
						if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
						if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

						break;

					case 'OrthographicCamera':

						object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

						break;

					case 'HemisphereLight':

						object = new HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new SkinnedMesh( geometry, material );

						} else {

							object = new Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new LOD();

						break;

					case 'Line':

						object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'LineSegments':

						object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'PointCloud':
					case 'Points':

						object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new Group();

						break;

					default:

						object = new Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.shadow ) {

					if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
					if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
					if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
					if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

				}

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			};

		}()

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTangentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {}

	Curve.prototype = {

		constructor: Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		}

	};

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	/**************************************************************
	 *	Line
	 **************************************************************/

	function LineCurve( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t ) {

		if ( t === 1 ) {

			return this.v2.clone();

		}

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 40;

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = (curve && curve.isEllipseCurve) ? divisions * 2
					: (curve && curve.isLineCurve) ? 1
					: (curve && curve.isSplineCurve) ? divisions * curve.points.length
					: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		/**************************************************************
		 *	Create Geometries Helpers
		 **************************************************************/

		/// Generate geometry from path points (for Line or Points objects)

		createPointsGeometry: function ( divisions ) {

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		// Generate geometry from equidistant sampling along the path

		createSpacedPointsGeometry: function ( divisions ) {

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function( t ) {

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return new Vector2( x, y );

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	function SplineCurve( points /* array of Vector2 */ ) {

		this.points = ( points === undefined ) ? [] : points;

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = CurveUtils.interpolate;

		return new Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = ShapeUtils.b3;

		return new Vector2(
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = CurveUtils.tangentCubicBezier;

		return new Vector2(
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	function QuadraticBezierCurve( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;


	QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = ShapeUtils.b2;

		return new Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = CurveUtils.tangentQuadraticBezier;

		return new Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

		fromPoints: function ( vectors ) {

			this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

			for ( var i = 1, l = vectors.length; i < l; i ++ ) {

				this.lineTo( vectors[ i ].x, vectors[ i ].y );

			}

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape() {

		Path.apply( this, arguments );

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( PathPrototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// Get points of shape and holes (keypoints based on segments parameter)

		extractAllPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		extractPoints: function ( divisions ) {

			return this.extractAllPoints( divisions );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	function Path( points ) {

		CurvePath.call( this );
		this.currentPoint = new Vector2();

		if ( points ) {

			this.fromPoints( points );

		}

	}

	Path.prototype = PathPrototype;
	PathPrototype.constructor = Path;


	// minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	function ShapePath() {
		this.subPaths = [];
		this.currentPath = null;
	}

	ShapePath.prototype = {
		moveTo: function ( x, y ) {
			this.currentPath = new Path();
			this.subPaths.push(this.currentPath);
			this.currentPath.moveTo( x, y );
		},
		lineTo: function ( x, y ) {
			this.currentPath.lineTo( x, y );
		},
		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
		},
		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
		},
		splineThru: function ( pts ) {
			this.currentPath.splineThru( pts );
		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt  = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];

			if ( noHoles === true )	return	toShapesNoHoles( subPaths );


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}
	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Font( data ) {

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var offset = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var ret = createPath( chars[ i ], scale, offset );
					offset += ret.offset;

					paths.push( ret.path );

				}

				return paths;

			}

			function createPath( c, scale, offset ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new ShapePath();

				var pts = [], b2 = ShapeUtils.b2, b3 = ShapeUtils.b3;
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b2( t, cpx0, cpx1, cpx );
										b2( t, cpy0, cpy1, cpy );

									}

								}

								break;

							case 'b': // bezierCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;
								cpx2 = outline[ i ++ ] * scale + offset;
								cpy2 = outline[ i ++ ] * scale;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b3( t, cpx0, cpx1, cpx2, cpx );
										b3( t, cpy0, cpy1, cpy2, cpy );

									}

								}

								break;

						}

					}

				}

				return { offset: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( FontLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new XHRLoader( this.manager );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) onLoad( font );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		}

	} );

	var context;

	function getAudioContext() {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	}

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	}

	Object.assign( AudioLoader.prototype, {

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.load( url, function ( buffer ) {

				var context = getAudioContext();

				context.decodeAudioData( buffer, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	}

	Object.assign( StereoCamera.prototype, {

		update: ( function () {

			var instance, focus, fov, aspect, near, far, zoom;

			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();

			return function update( camera ) {

				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom;

				if ( needsUpdate ) {

					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CubeCamera( near, far, cubeResolution ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = getAudioContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.value = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();

			var orientation = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				var listener = this.context.listener;
				var up = this.up;

				this.matrixWorld.decompose( position, quaternion, scale );

				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			};

		} )()

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.source.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) this.play();

			return this;

		},

		play: function () {

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			var source = this.context.createBufferSource();

			source.buffer = this.source.buffer;
			source.loop = this.source.loop;
			source.onended = this.source.onended;
			source.start( 0, this.startTime );
			source.playbackRate.value = this.playbackRate;

			this.isPlaying = true;

			this.source = source;

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = this.context.currentTime;
			this.isPlaying = false;

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.stop();
			this.startTime = 0;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) value = [];

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.value = this.playbackRate;

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.source.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.source.loop = value;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},


		setVolume: function ( value ) {

			this.gain.gain.value = value;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

		},

		updateMatrixWorld: ( function () {

			var position = new Vector3();

			return function updateMatrixWorld( force ) {

				Object3D.prototype.updateMatrixWorld.call( this, force );

				position.setFromMatrixPosition( this.matrixWorld );

				this.panner.setPosition( position.x, position.y, position.z );

			};

		} )()


	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	PropertyMixer.prototype = {

		constructor: PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	PropertyBinding.prototype = {

		constructor: PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	PropertyBinding.Composite.prototype = {

		constructor: PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( (root && root.isAnimationObjectGroup) ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//    .bone[Armature.DEF_cog].position
		//    scene:helium_balloon_model:helium_balloon_model.position
		// created and tested via https://regex101.com/#javascript

		var re = /^((?:\w+[\/:])*)(\w+)?(?:\.(\w+)(?:\[(.+)\])?)?\.(\w+)(?:\[(.+)\])?$/;
		var matches = re.exec( trackName );

		if ( ! matches ) {

			throw new Error( "cannot parse trackName at all: " + trackName );

		}

		var results = {
			// directoryName: matches[ 1 ], // (tschw) currently unused
			nodeName: matches[ 2 ], 	// allowed to be null, specified root node.
			objectName: matches[ 3 ],
			objectIndex: matches[ 4 ],
			propertyName: matches[ 5 ],
			propertyIndex: matches[ 6 ]	// allowed to be null, specifies that the whole property is set.
		};

		if ( results.propertyName === null || results.propertyName.length === 0 ) {

			throw new Error( "can not parse propertyName from trackName: " + trackName );

		}

		return results;

	};

	PropertyBinding.findNode = function( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	};

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup( var_args ) {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	}

	AnimationObjectGroup.prototype = {

		constructor: AnimationObjectGroup,

		isAnimationObjectGroup: true,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	ZeroCurvatureEnding,
				endingEnd:		ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	}

	AnimationAction.prototype = {

		constructor: AnimationAction,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount;

			if ( loop === LoopOnce ) {

				if ( loopCount === -1 ) {
					// just started

					this.loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break handle_stop;

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				var pingPong = ( loop === LoopPingPong );

				if ( loopCount === -1 ) {
					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings(
								true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings(
								this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {
					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending < 0 ) {
						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						time = deltaTime > 0 ? duration : 0;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : -1
						} );

					} else {
						// keep running

						if ( pending === 0 ) {
							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {
					// invert time for the "pong round"

					this.time = time;
					return duration - time;

				}

			}

			this.time = time;
			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= ZeroSlopeEnding;
				settings.endingEnd		= ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					clipObject = prototypeAction._clip;

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	// Implementation details:

	Object.assign( AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< AnimationAction >	- used as prototypes
			// 		actionByRoot: AnimationAction			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	InstancedBufferGeometry.prototype.constructor = InstancedBufferGeometry;

	InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;

	InstancedBufferGeometry.prototype.addGroup = function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	};

	InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.uuid = _Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}


	InterleavedBufferAttribute.prototype = {

		constructor: InterleavedBufferAttribute,

		isInterleavedBufferAttribute: true,

		get count() {

			return this.data.count;

		},

		get array() {

			return this.data.array;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.uuid = _Math.generateUUID();

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	InterleavedBuffer.prototype = {

		constructor: InterleavedBuffer,

		isInterleavedBuffer: true,

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setArray: function ( array ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.create( InterleavedBuffer.prototype );
	InstancedInterleavedBuffer.prototype.constructor = InstancedInterleavedBuffer;

	InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;

	InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

		BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	InstancedBufferAttribute.prototype.constructor = InstancedBufferAttribute;

	InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;

	InstancedBufferAttribute.prototype.copy = function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {
					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;
				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) return;

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	//

	Raycaster.prototype = {

		constructor: Raycaster,

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( (camera && camera.isPerspectiveCamera) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

			} else if ( (camera && camera.isOrthographicCamera) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive ) {

			var intersects = [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive ) {

			var intersects = [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Clock.prototype = {

		constructor: Clock,

		start: function () {

			this.startTime = ( performance || Date ).now();

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = ( performance || Date ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Spline( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new Vector3(),
				tmpVec = new Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	}

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The poles (phi) are at the positive and negative y axis.
	 * The equator starts at positive z.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
		this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

		return this;

	}

	Spherical.prototype = {

		constructor: Spherical,

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function() {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function( vec3 ) {

			this.radius = vec3.length();

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
				this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

			}

			return this;

		},

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function MorphBlendMesh( geometry, material ) {

		Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	}

	MorphBlendMesh.prototype = Object.create( Mesh.prototype );
	MorphBlendMesh.prototype.constructor = MorphBlendMesh;

	MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + _Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( (objGeometry && objGeometry.isGeometry) ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( (objGeometry && objGeometry.isBufferGeometry) ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function SpotLightHelper( light ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0,   0,   0,   1,
			0, 0, 0,   1,   0,   1,
			0, 0, 0, - 1,   0,   1,
			0, 0, 0,   0,   1,   1,
			0, 0, 0,   0, - 1,   1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.addAttribute( 'position', new Float32Attribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		var vector = new Vector3();
		var vector2 = new Vector3();

		return function update() {

			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	function SkeletonHelper( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				geometry.vertices.push( new Vector3() );
				geometry.vertices.push( new Vector3() );
				geometry.colors.push( new Color( 0, 0, 1 ) );
				geometry.colors.push( new Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	}


	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( (object && object.isBone) ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( (bone.parent && bone.parent.isBone) ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function HemisphereLightHelper( light, sphereSize ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new Color(), new Color() ];

		var geometry = new SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new MeshBasicMaterial( { vertexColors: FaceColors, wireframe: true } );

		this.lightSphere = new Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var vector = new Vector3();

		return function update() {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		};

	}();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		divisions = divisions || 1;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = ( size * 2 ) / divisions;
		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {

			vertices.push( - size, 0, k, size, 0, k );
			vertices.push( k, 0, - size, k, 0, size );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32Attribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.create( LineSegments.prototype );
	GridHelper.prototype.constructor = GridHelper;

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( (objGeometry && objGeometry.isGeometry) ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		};

	}() );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function DirectionalLightHelper( light, size ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		if ( size === undefined ) size = 1;

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [
			- size,   size, 0,
			  size,   size, 0,
			  size, - size, 0,
			- size, - size, 0,
			- size,   size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.add( new Line( geometry, material ) );

		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.add( new Line( geometry, material ));

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		var lightPlane = this.children[ 0 ];
		var targetLine = this.children[ 1 ];

		lightPlane.geometry.dispose();
		lightPlane.material.dispose();
		targetLine.geometry.dispose();
		targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();

		return function update() {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.lookAt( v3 );
			lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			targetLine.lookAt( v3 );
			targetLine.scale.z = v3.length();

		};

	}();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	function CameraHelper( camera ) {

		var geometry = new Geometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new Vector3() );
			geometry.colors.push( new Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new Vector3();
		var camera = new Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function update() {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	function BoundingBoxHelper( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new Box3();

		Mesh.call( this, new BoxGeometry( 1, 1, 1 ), new MeshBasicMaterial( { color: color, wireframe: true } ) );

	}

	BoundingBoxHelper.prototype = Object.create( Mesh.prototype );
	BoundingBoxHelper.prototype.constructor = BoundingBoxHelper;

	BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.getSize( this.scale );

		this.box.getCenter( this.position );

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BoxHelper( object, color ) {

		if ( color === undefined ) color = 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = ( function () {

		var box = new Box3();

		return function update( object ) {

			if ( (object && object.isBox3) ) {

				box.copy( object );

			} else {

				box.setFromObject( object );

			}

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var lineGeometry = new BufferGeometry();
	lineGeometry.addAttribute( 'position', new Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

	var coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
	coneGeometry.translate( 0, - 0.5, 0 );

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.position.copy( origin );

		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = ( function () {

		var axis = new Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.copy( color );
		this.cone.material.color.copy( color );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxisHelper( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxisHelper.prototype = Object.create( LineSegments.prototype );
	AxisHelper.prototype.constructor = AxisHelper;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	var CatmullRomCurve3 = ( function() {

		var
			tmp = new Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];
				this.closed = false;

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - ( this.closed ? 0 : 1 ) ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( this.closed ) {

					intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

				} else if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3; // 4 points

				if ( this.closed || intPoint > 0 ) {

					p0 = points[ ( intPoint - 1 ) % l ];

				} else {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				}

				p1 = points[ intPoint % l ];
				p2 = points[ ( intPoint + 1 ) % l ];

				if ( this.closed || intPoint + 2 < l ) {

					p3 = points[ ( intPoint + 2 ) % l ];

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	var SplineCurve3 = Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points === undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = CurveUtils.interpolate;

			return new Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	var CubicBezierCurve3 = Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = ShapeUtils.b3;

			return new Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	var QuadraticBezierCurve3 = Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = ShapeUtils.b2;

			return new Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	var LineCurve3 = Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var vector = new Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4 ( a, b, c, d, normal, color, materialIndex ) {
		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );
	}

	var LineStrip = 0;

	var LinePieces = 1;

	function PointCloud ( geometry, material ) {
		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function ParticleSystem ( geometry, material ) {
		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}

	function PointCloudMaterial ( parameters ) {
		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleBasicMaterial ( parameters ) {
		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function ParticleSystemMaterial ( parameters ) {
		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}

	function Vertex ( x, y, z ) {
		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );
	}

	//

	function EdgesHelper( object, hex ) {
		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	function WireframeHelper( object, hex ) {
		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}

	//

	Object.assign( Box2.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Box3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );

	Object.assign( Line3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		}
	} );

	Object.assign( Matrix3.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		}
	} );

	Object.assign( Matrix4.prototype, {
		extractPosition: function ( m ) {
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
		},
		setRotationFromQuaternion: function ( q ) {
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
			return vector.applyProjection( this );
		},
		multiplyVector4: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector3Array: function ( a ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
		},
		rotateAxis: function ( v ) {
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );
		},
		crossVector: function ( vector ) {
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		translate: function ( v ) {
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
		},
		rotateX: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
		},
		rotateY: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
		},
		rotateZ: function ( angle ) {
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
		},
		rotateByAxis: function ( axis, angle ) {
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
		}
	} );

	Object.assign( Plane.prototype, {
		isIntersectionLine: function ( line ) {
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
		}
	} );

	Object.assign( Quaternion.prototype, {
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
		}
	} );

	Object.assign( Ray.prototype, {
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionPlane: function ( plane ) {
			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );

	Object.assign( Shape.prototype, {
		extrude: function ( options ) {
			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );
		},
		makeGeometry: function ( options ) {
			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );
		}
	} );

	Object.assign( Vector3.prototype, {
		setEulerFromRotationMatrix: function () {
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
		},
		setEulerFromQuaternion: function () {
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
		},
		getPositionFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );
		},
		getScaleFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );
		},
		getColumnFromMatrix: function ( index, matrix ) {
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );
		}
	} );

	//

	Object.assign( Object3D.prototype, {
		getChildByName: function ( name ) {
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
		},
		renderDepth: function ( value ) {
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
		},
		translate: function ( distance, axis ) {
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
		}
	} );

	Object.defineProperties( Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	Object.defineProperties( LOD.prototype, {
		objects: {
			get: function () {
				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;
			}
		}
	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	Object.assign( BufferGeometry.prototype, {
		addIndex: function ( index ) {
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
		},
		addDrawCall: function ( start, count, indexOffset ) {
			if ( indexOffset !== undefined ) {
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
		},
		clearDrawCalls: function () {
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
		},
		computeTangents: function () {
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
		},
		computeOffsets: function () {
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
		}
	} );

	Object.defineProperties( BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		}
	} );

	//

	Object.defineProperties( Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new Color();
			}
		}
	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	EventDispatcher.prototype = Object.assign( Object.create( {

		// Note: Extra base ensures these properties are not 'assign'ed.

		constructor: EventDispatcher,

		apply: function ( target ) {

			console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
					"just inherit or Object.assign the prototype to mix-in." );

			Object.assign( target, this );

		}

	} ), EventDispatcher.prototype );

	//

	Object.defineProperties( Uniform.prototype, {
		dynamic: {
			set: function ( value ) {
				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
			}
		},
		onUpdate: {
			value: function () {
				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;
			}
		}
	} );

	//

	Object.assign( WebGLRenderer.prototype, {
		supportsFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );
		},
		supportsHalfFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );
		},
		supportsStandardDerivatives: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );
		},
		supportsCompressedTextureS3TC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
		},
		supportsCompressedTexturePVRTC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
		},
		supportsBlendMinMax: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );
		},
		supportsVertexTextures: function () {
			return this.capabilities.vertexTextures;
		},
		supportsInstancedArrays: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );
		},
		enableScissorTest: function ( boolean ) {
			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );
		},
		initMaterial: function () {
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
		},
		addPrePlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
		},
		addPostPlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
		},
		updateShadowMap: function () {
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
		}
	} );

	Object.defineProperties( WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		}
	} );

	Object.defineProperties( WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				return this.renderReverseSided ? CullFaceFront : CullFaceBack;
			},
			set: function ( cullFace ) {
				var value = ( cullFace !== CullFaceBack );
				console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
				this.renderReverseSided = value;
			}
		}
	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	Object.assign( Audio.prototype, {
		load: function ( file ) {
			console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
			var scope = this;
			var audioLoader = new AudioLoader();
			audioLoader.load( file, function ( buffer ) {
				scope.setBuffer( buffer );
			} );
			return this;
		}
	} );

	Object.assign( AudioAnalyser.prototype, {
		getData: function ( file ) {
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
		}
	} );

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	var ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	function Projector () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	}

	//

	function CanvasRenderer () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	}

	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderer = WebGLRenderer;
	exports.ShaderLib = ShaderLib;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.FogExp2 = FogExp2;
	exports.Fog = Fog;
	exports.Scene = Scene;
	exports.LensFlare = LensFlare;
	exports.Sprite = Sprite;
	exports.LOD = LOD;
	exports.SkinnedMesh = SkinnedMesh;
	exports.Skeleton = Skeleton;
	exports.Bone = Bone;
	exports.Mesh = Mesh;
	exports.LineSegments = LineSegments;
	exports.Line = Line;
	exports.Points = Points;
	exports.Group = Group;
	exports.VideoTexture = VideoTexture;
	exports.DataTexture = DataTexture;
	exports.CompressedTexture = CompressedTexture;
	exports.CubeTexture = CubeTexture;
	exports.CanvasTexture = CanvasTexture;
	exports.DepthTexture = DepthTexture;
	exports.TextureIdCount = TextureIdCount;
	exports.Texture = Texture;
	exports.MaterialIdCount = MaterialIdCount;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.DataTextureLoader = DataTextureLoader;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.TextureLoader = TextureLoader;
	exports.ObjectLoader = ObjectLoader;
	exports.MaterialLoader = MaterialLoader;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.LoadingManager = LoadingManager;
	exports.JSONLoader = JSONLoader;
	exports.ImageLoader = ImageLoader;
	exports.FontLoader = FontLoader;
	exports.XHRLoader = XHRLoader;
	exports.Loader = Loader;
	exports.Cache = Cache;
	exports.AudioLoader = AudioLoader;
	exports.SpotLightShadow = SpotLightShadow;
	exports.SpotLight = SpotLight;
	exports.PointLight = PointLight;
	exports.HemisphereLight = HemisphereLight;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DirectionalLight = DirectionalLight;
	exports.AmbientLight = AmbientLight;
	exports.LightShadow = LightShadow;
	exports.Light = Light;
	exports.StereoCamera = StereoCamera;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.OrthographicCamera = OrthographicCamera;
	exports.CubeCamera = CubeCamera;
	exports.Camera = Camera;
	exports.AudioListener = AudioListener;
	exports.PositionalAudio = PositionalAudio;
	exports.getAudioContext = getAudioContext;
	exports.AudioAnalyser = AudioAnalyser;
	exports.Audio = Audio;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.PropertyMixer = PropertyMixer;
	exports.PropertyBinding = PropertyBinding;
	exports.KeyframeTrack = KeyframeTrack;
	exports.AnimationUtils = AnimationUtils;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationClip = AnimationClip;
	exports.Uniform = Uniform;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.BufferGeometry = BufferGeometry;
	exports.GeometryIdCount = GeometryIdCount;
	exports.Geometry = Geometry;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float32Attribute = Float32Attribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Int16Attribute = Int16Attribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Int8Attribute = Int8Attribute;
	exports.BufferAttribute = BufferAttribute;
	exports.Face3 = Face3;
	exports.Object3DIdCount = Object3DIdCount;
	exports.Object3D = Object3D;
	exports.Raycaster = Raycaster;
	exports.Layers = Layers;
	exports.EventDispatcher = EventDispatcher;
	exports.Clock = Clock;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.LinearInterpolant = LinearInterpolant;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.CubicInterpolant = CubicInterpolant;
	exports.Interpolant = Interpolant;
	exports.Triangle = Triangle;
	exports.Spline = Spline;
	exports.Math = _Math;
	exports.Spherical = Spherical;
	exports.Plane = Plane;
	exports.Frustum = Frustum;
	exports.Sphere = Sphere;
	exports.Ray = Ray;
	exports.Matrix4 = Matrix4;
	exports.Matrix3 = Matrix3;
	exports.Box3 = Box3;
	exports.Box2 = Box2;
	exports.Line3 = Line3;
	exports.Euler = Euler;
	exports.Vector4 = Vector4;
	exports.Vector3 = Vector3;
	exports.Vector2 = Vector2;
	exports.Quaternion = Quaternion;
	exports.ColorKeywords = ColorKeywords;
	exports.Color = Color;
	exports.MorphBlendMesh = MorphBlendMesh;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SkeletonHelper = SkeletonHelper;
	exports.PointLightHelper = PointLightHelper;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.GridHelper = GridHelper;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.CameraHelper = CameraHelper;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.BoxHelper = BoxHelper;
	exports.ArrowHelper = ArrowHelper;
	exports.AxisHelper = AxisHelper;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.SplineCurve3 = SplineCurve3;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.LineCurve3 = LineCurve3;
	exports.ArcCurve = ArcCurve;
	exports.EllipseCurve = EllipseCurve;
	exports.SplineCurve = SplineCurve;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.LineCurve = LineCurve;
	exports.Shape = Shape;
	exports.ShapePath = ShapePath;
	exports.Path = Path;
	exports.Font = Font;
	exports.CurvePath = CurvePath;
	exports.Curve = Curve;
	exports.ShapeUtils = ShapeUtils;
	exports.SceneUtils = SceneUtils;
	exports.CurveUtils = CurveUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.RingGeometry = RingGeometry;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.EdgesGeometry = EdgesGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.ShadowMaterial = ShadowMaterial;
	exports.SpriteMaterial = SpriteMaterial;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.ShaderMaterial = ShaderMaterial;
	exports.PointsMaterial = PointsMaterial;
	exports.MultiMaterial = MultiMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.Material = Material;
	exports.REVISION = REVISION;
	exports.MOUSE = MOUSE;
	exports.CullFaceNone = CullFaceNone;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.BasicShadowMap = BasicShadowMap;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.FrontSide = FrontSide;
	exports.BackSide = BackSide;
	exports.DoubleSide = DoubleSide;
	exports.FlatShading = FlatShading;
	exports.SmoothShading = SmoothShading;
	exports.NoColors = NoColors;
	exports.FaceColors = FaceColors;
	exports.VertexColors = VertexColors;
	exports.NoBlending = NoBlending;
	exports.NormalBlending = NormalBlending;
	exports.AdditiveBlending = AdditiveBlending;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.MultiplyBlending = MultiplyBlending;
	exports.CustomBlending = CustomBlending;
	exports.BlendingMode = BlendingMode;
	exports.AddEquation = AddEquation;
	exports.SubtractEquation = SubtractEquation;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.MinEquation = MinEquation;
	exports.MaxEquation = MaxEquation;
	exports.ZeroFactor = ZeroFactor;
	exports.OneFactor = OneFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.NeverDepth = NeverDepth;
	exports.AlwaysDepth = AlwaysDepth;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.EqualDepth = EqualDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterDepth = GreaterDepth;
	exports.NotEqualDepth = NotEqualDepth;
	exports.MultiplyOperation = MultiplyOperation;
	exports.MixOperation = MixOperation;
	exports.AddOperation = AddOperation;
	exports.NoToneMapping = NoToneMapping;
	exports.LinearToneMapping = LinearToneMapping;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.CineonToneMapping = CineonToneMapping;
	exports.UVMapping = UVMapping;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.TextureMapping = TextureMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.TextureWrapping = TextureWrapping;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.LinearFilter = LinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.TextureFilter = TextureFilter;
	exports.UnsignedByteType = UnsignedByteType;
	exports.ByteType = ByteType;
	exports.ShortType = ShortType;
	exports.UnsignedShortType = UnsignedShortType;
	exports.IntType = IntType;
	exports.UnsignedIntType = UnsignedIntType;
	exports.FloatType = FloatType;
	exports.HalfFloatType = HalfFloatType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.AlphaFormat = AlphaFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBAFormat = RGBAFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.RGBEFormat = RGBEFormat;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.LoopOnce = LoopOnce;
	exports.LoopRepeat = LoopRepeat;
	exports.LoopPingPong = LoopPingPong;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.LinearEncoding = LinearEncoding;
	exports.sRGBEncoding = sRGBEncoding;
	exports.GammaEncoding = GammaEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBDEncoding = RGBDEncoding;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.CubeGeometry = BoxGeometry;
	exports.Face4 = Face4;
	exports.LineStrip = LineStrip;
	exports.LinePieces = LinePieces;
	exports.MeshFaceMaterial = MultiMaterial;
	exports.PointCloud = PointCloud;
	exports.Particle = Sprite;
	exports.ParticleSystem = ParticleSystem;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Vertex = Vertex;
	exports.EdgesHelper = EdgesHelper;
	exports.WireframeHelper = WireframeHelper;
	exports.GeometryUtils = GeometryUtils;
	exports.ImageUtils = ImageUtils;
	exports.Projector = Projector;
	exports.CanvasRenderer = CanvasRenderer;

	Object.defineProperty(exports, '__esModule', { value: true });

	Object.defineProperty( exports, 'AudioContext', {
		get: function () {
			return exports.getAudioContext();
		}
	});

})));


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(87);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(85);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(36);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _typeof2 = __webpack_require__(36);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _from = __webpack_require__(80);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ },
/* 28 */
/***/ function(module, exports) {

module.exports = true;

/***/ },
/* 29 */
/***/ function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

var def = __webpack_require__(5).f
  , has = __webpack_require__(9)
  , TAG = __webpack_require__(1)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ },
/* 31 */
/***/ function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(133);
var global        = __webpack_require__(2)
  , hide          = __webpack_require__(10)
  , Iterators     = __webpack_require__(16)
  , TO_STRING_TAG = __webpack_require__(1)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(100), __esModule: true };

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.targetMetaData = exports.Targets = exports.TargetMetaData = exports.Target = undefined;

var _promise = __webpack_require__(35);

var _Promise = _interopRequireDefault(_promise).default;

var _getPrototypeOf = __webpack_require__(19);

var _Object$getPrototypeOf = _interopRequireDefault(_getPrototypeOf).default;

var _possibleConstructorReturn2 = __webpack_require__(26);

var _possibleConstructorReturn = _interopRequireDefault(_possibleConstructorReturn2).default;

var _inherits2 = __webpack_require__(25);

var _inherits = _interopRequireDefault(_inherits2).default;

var _toConsumableArray2 = __webpack_require__(27);

var _toConsumableArray = _interopRequireDefault(_toConsumableArray2).default;

var _keys = __webpack_require__(18);

var _Object$keys = _interopRequireDefault(_keys).default;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

var _three = __webpack_require__(24);

var THREE = _interopRequireWildcard(_three);

var _targetList = __webpack_require__(151);

var targetList = _interopRequireDefault(_targetList).default;

var _targetCategoryData = __webpack_require__(150);

var targetCategories = _interopRequireDefault(_targetCategoryData).default;

var _helpers = __webpack_require__(54);

var invertByMany = _helpers.invertByMany;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A morphTarget for THREE.Geometry. It represents a target to interpolate the
 * base mesh to. It stores a value which is applied by applied to
 * morphTargetInfluences using target.updateValue.
 *
 * See
 * - morphTargets under http://threejs.org/docs/#Reference/Core/Geometry
 * - targets.py and alg3d in makehuman
 *
 * Each is referenced under mesh.geometry.morphTargets
 */
var Target = exports.Target = function () {

    /**
     * Build a target
     * @param  {Object} config[]
     *
     * @param  {[type]} data   [description]
     * @return {[type]}        [description]
     */
    function Target(config) {
        _classCallCheck(this, Target);

        this.name = config.path;
        // this.parent = null; // prob just a tmp var from mh file warlking
        this.path = config.path;
        this.group = config.group;

        // meta categories which each key part belongs to
        this.categories = config.categories;
        this.variables = config.variables;
        this.macroVariables = config.macroVariables;
        // translation vectors for modified vertices
        // this.dVertices = {}
        // full set of vertices of this morphTarget
        // this.vertices = []
    }

    /** The variables that apply to this target component. **/


    _createClass(Target, [{
        key: 'getVariables',
        value: function getVariables() {
            // filter out null values then grab the keys of the remaining properties
            return _.keys(_.pickBy(this.categories, _.isTrue));
        }

        /** put this targets current value into the threejs mesh's influence array **/

    }, {
        key: 'value',
        set: function set(val) {
            var i = this.parent.human.morphTargetDictionary[this.name];
            this.parent.human.morphTargetInfluences[i] = val;
        }

        /** Get target's value from where threejs stores it **/
        ,
        get: function get() {
            var i = this.parent.human.morphTargetDictionary[this.name];
            return this.parent.human.morphTargetInfluences[i];
        }
    }]);

    return Target;
}();

/**
 * Contains meta data about all available targets
 */
/**
 * @name            MakeHuman
 * @copyright       MakeHuman Team 2001-2016
 * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
 * @author          wassname
 * @description
 * Classes and functions to hold and manipulate morphTargets
 */

// TODO I want to bypass threejs morphtarget sinxe it only support 8target. ThenI canjust update the vertices

var TargetMetaData = exports.TargetMetaData = function () {
    /**
     * [constructor description]
     * @param  {[type]} targetList       [description]
     * @param  {[type]} targetCategories [description]
     * @return {[type]}                  [description]
     */
    function TargetMetaData() {
        _classCallCheck(this, TargetMetaData);

        var self = this;
        // this.groups = _.invertBy(targetList.targets); // Target components, ordered per group
        this.targetCategories = targetCategories;
        this.categoryTargets = _.invertBy(targetCategories);
        this.categories = _.uniq(_.keys(targetCategories));

        // TODO move these to a metadata obj in a property or else prefix with md
        this.targetIndex = _.map(_.keys(targetList.targets), function (path) {
            return self.pathToGroupAndCategories(path);
        });
        this.targetImages = targetList.images; // Images list
        this.targetsByTag = invertByMany(targetList.targets);
        this.targetsUrls = _.keys(targetList.targets); // List of target files
        this.targetsByPath = _.groupBy(this.targetIndex, function (i) {
            return i.path;
        });
        this.targetGroups = _(this.targetsUrls).map(function (path) {
            return new Target(self.pathToGroupAndCategories(path));
        }).groupBy(function (gc) {
            return gc.group;
        }).value();
    }

    /**
     * extract the path for a mprh target to categories and groups
     * @param  {string} path  e.g. 'data/targets/macrodetails/height/female-old-averagemuscle-averageweight-minheight.target'
     * @return {[type]}      {key:"macrodetails,height",data:{'weight': 'averageweight',..}
     */


    _createClass(TargetMetaData, [{
        key: 'pathToGroupAndCategories',
        value: function pathToGroupAndCategories(origPath) {
            // TODO refactor: data, key/groupName => categories, groups
            // lowercase
            origPath = origPath.toLowerCase();

            // remove everything up to the target folder if it's there
            var shortPath = origPath.replace(/^.+targets\//, '');

            // remove ext
            var path = shortPath.replace(/\.target$/g, '');

            // break it by slash, underscore, comma, or dash
            // this makes the tags which make up categories and group
            var subgroups = path.replace(/[/_,]/g, '-').split('-');

            // meta categories which each key part belongs to
            var categories = {};
            // ad null vals
            _Object$keys(this.categoryTargets).map(function (categ) {
                return categories[categ] = null;
            });

            // find which subgroups fit into macro categories
            var macroGroup = _.filter(subgroups, function (group) {
                return targetCategories[group];
            });
            macroGroup.forEach(function (group) {
                var category = targetCategories[group];
                categories[category] = group;
            });

            // now remove macro subgroups
            _.pull.apply(_, [subgroups].concat(_toConsumableArray(macroGroup)));

            return {
                group: subgroups.join('-'),
                categories: categories,
                variables: _.values(_.pickBy(categories, _.isTrue)).sort(),
                macroVariables: _.keys(_.pickBy(categories, _.isTrue)).sort(),
                path: origPath,
                shortPath: shortPath
            };
        }

        /**
         * Get targets that belong to the same group, and their factors
         * @param  {String} path - target path e.g. data/targets/nose/nose-nostrils-angle-up.target'
         * @return {Array}      [path,[factor1,factor2]],[path2,[factor1,factor2]]
         * e.g. ['data/targets/nose/nose-nostrils-angle-up.target',['nose-nostrils-angle-up']]]
         * see makehuman/gui/humanmodifier.py for more
         */

    }, {
        key: 'findTargets',
        value: function findTargets(path) {
            if (path === null) {
                return [];
            }

            var targetsList = void 0;

            try {
                targetsList = this.getTargetsByGroup(path) || [];
            } catch (exc) {
                // TODO check for keyerror or whatever this will return
                console.debug('missing target %s', path);
                targetsList = [];
            }

            var result = [];
            for (var i = 0; i < targetsList.length; i += 1) {
                var target = targetsList[i];
                var factordependencies = _.concat(target.variables, [target.group]);
                result.push([target.path, factordependencies]);
            }
            return result;
        }

        /**
         * get targets by groups e.g. "armslegs,r,upperarms,fat"
         * @param  {String} group Comma seperated string of keys e.g. "armslegs,r,upperarms,fat"
         * @return {Array}       List of target objects
         */

    }, {
        key: 'getTargetsByGroup',
        value: function getTargetsByGroup(group) {
            if (!group) return [];
            group = this.pathToGroupAndCategories(group).group;
            return this.targetGroups[group];
        }
    }]);

    return TargetMetaData;
}();

var Targets = exports.Targets = function (_TargetMetaData) {
    _inherits(Targets, _TargetMetaData);

    function Targets(human) {
        _classCallCheck(this, Targets);

        var _this = _possibleConstructorReturn(this, (Targets.__proto__ || _Object$getPrototypeOf(Targets)).call(this));

        _this.human = human;

        _this.lastBake = new Date().getTime();

        // targets are stored here
        _this.children = {};

        _this.loading = false;

        // for loading
        _this.manager = new THREE.LoadingManager();
        _this.bufferLoader = new THREE.XHRLoader(_this.manager);
        _this.bufferLoader.setResponseType('arraybuffer');
        return _this;
    }

    /**
     * load all from a single file describing sparse data
     * @param  {String} url  - url to bin file containing Int16 array
     *                       nb_targets*nb_vertices*3 in length
     * @return {Promise}     promise of an array of targets
     */


    _createClass(Targets, [{
        key: 'load',
        value: function load() {
            var dataUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data/targets/targets.bin';

            var self = this;
            this.loading = true;

            var targets = [];

            this.referenceVertices = this.human.mesh.geometry.vertices.map(function (v) {
                return v.clone();
            });

            var paths = this.targetIndex.map(function (t) {
                return t.path;
            });
            paths.sort();
            this.human.morphTargetDictionary = paths.reduce(function (a, p, i) {
                a[p] = i;return a;
            }, {});
            this.targetIndex.map(function (t) {
                return t.path;
            }).map(function (path) {
                var config = self.pathToGroupAndCategories(path);
                var target = new Target(config);
                targets.push(target);
                target.parent = self;
                self.children[target.name] = target;
                return target;
            });

            self.human.morphTargetInfluences = new Float32Array(paths.length);

            return new _Promise(function (resolve, reject) {
                return self.bufferLoader.load(dataUrl, resolve, undefined, reject);
            }).then(function (data) {
                self.targetData = new Int16Array(data);
                var loadedTargets = self.human.targets.targetData.length / 3 / self.human.mesh.geometry.vertices.length;
                console.assert(self.targetData.length % (3 * self.human.mesh.geometry.vertices.length) === 0, 'targets should be a multiple of nb_vertices*3');
                console.assert(loadedTargets === _Object$keys(self.children).length, "length of target data doesn't match nb_targets*nb_vertices*3");
                console.debug('loaded targets', loadedTargets);
                self.loading = false;
                return self.targetData;
            }).catch(function (err) {
                self.loading = false;
                throw err;
            });
        }

        /**
         * Updated vertices from applied targets. Should be called on render since it
         * will only run if it's needed and more than a second has passed
         */

    }, {
        key: 'applyTargets',
        value: function applyTargets() {
            // skip if it hasn't been rendered
            if (!this.human || !this.human.mesh || !this.human.mesh.geometry || !this.human.mesh.geometry._bufferGeometry || !this.targetData) return false;

            // skip if less than a second since last
            if (new Date().getTime() - this.lastBake < this.human.minUpdateInterval) return false;

            // check if it'schanged
            if (_.isEqual(this.lastmorphTargetInfluences, this.human.morphTargetInfluences)) return false;

            // let [m,n] =  this.targetData.size
            var m = this.human.geometry.vertices.length * 3;
            var n = this.human.morphTargetInfluences.length;
            var dVert = new Float32Array(m);

            // What is targetData? It's all the makehuman targets, (ordered alphebetically by target path)
            // put in an nb_targets X nb_vertices*3 array as Int16 then flattened written as bytes to a file.
            //  We then load it as a binary buffer and load it into a javascript Int16 array.
            // Now we can calculate new vertices by doing a dotproduct of
            //     $morphTargetInfluences \cdot targetData *1e-3 $
            // with shapes
            //     $(nb_targets) \cdot (nb_target,nb_vertices*3) *1e-3 $
            // where 1e-3 is the scaling factor to convert from Int16
            // The upside is that the amount of data doesn't crash the browser like
            // json, msgpack etc do. It's also relativly fast and bypasses threejs
            // limit on the number of morphtargets you can have.

            console.assert(this.targetData.length === m * n, 'target data should be nb_targets*nb_vertices*3: ' + m * n);
            console.assert(_.sum(this.targetData.slice(3 * m, 4 * m)) === 2952);

            // do the dot product over a flat targetData
            for (var j = 0; j < n; j += 1) {
                for (var i = 0; i < m; i += 1) {
                    if (this.human.morphTargetInfluences[j] !== 0 && this.targetData[i + j * m] !== 0) {
                        dVert[i] += this.targetData[i + j * m] * this.human.morphTargetInfluences[j];
                    }
                }
            }

            // update the vertices
            var vertices = this.referenceVertices.map(function (v) {
                return v.clone();
            });
            for (var _i = 0; _i < vertices.length; _i += 1) {
                vertices[_i].add({ x: dVert[_i * 3] * 1e-3, y: dVert[_i * 3 + 1] * 1e-3, z: dVert[_i * 3 + 2] * 1e-3 });
            }
            this.human.geometry.vertices = vertices;

            // this.human.mesh.geometry.verticesNeedUpdate = true;
            this.human.mesh.geometry.elementsNeedUpdate = true;
            this.lastmorphTargetInfluences = this.human.morphTargetInfluences.slice(0);
            this.lastBake = new Date().getTime();

            return true;
        }
    }]);

    return Targets;
}(TargetMetaData);

var targetMetaData = exports.targetMetaData = new TargetMetaData();
exports.default = Targets;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(105), __esModule: true };

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _iterator = __webpack_require__(89);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(88);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ },
/* 37 */
/***/ function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(20)
  , TAG = __webpack_require__(1)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ },
/* 39 */
/***/ function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15)
  , document = __webpack_require__(2).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ },
/* 41 */
/***/ function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(4)
  , dPs         = __webpack_require__(122)
  , enumBugKeys = __webpack_require__(41)
  , IE_PROTO    = __webpack_require__(46)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(40)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(61).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(29)
  , createDesc     = __webpack_require__(21)
  , toIObject      = __webpack_require__(7)
  , toPrimitive    = __webpack_require__(50)
  , has            = __webpack_require__(9)
  , IE8_DOM_DEFINE = __webpack_require__(62)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(6) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ },
/* 44 */
/***/ function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(3)
  , core    = __webpack_require__(0)
  , fails   = __webpack_require__(14);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

var shared = __webpack_require__(47)('keys')
  , uid    = __webpack_require__(31);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

var global = __webpack_require__(2)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ },
/* 48 */
/***/ function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(48)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(15);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

var global         = __webpack_require__(2)
  , core           = __webpack_require__(0)
  , LIBRARY        = __webpack_require__(28)
  , wksExt         = __webpack_require__(52)
  , defineProperty = __webpack_require__(5).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(1);

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(38)
  , ITERATOR  = __webpack_require__(1)('iterator')
  , Iterators = __webpack_require__(16);
module.exports = __webpack_require__(0).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isFinite = __webpack_require__(59);

var _Number$isFinite = _interopRequireDefault(_isFinite).default;

exports.invertByMany = invertByMany;
exports.invertByUniqueValues = invertByUniqueValues;
exports.remapKeyValues = remapKeyValues;
exports.remapKeyValuesDeep = remapKeyValuesDeep;
exports.deepRoundValues = deepRoundValues;
exports.deepParseFloat = deepParseFloat;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * inverts a object by many values
 * e.g. invertByMany({ 'a': [1,2,3], 'b': [1], c:[2]})
 * // {"1":["a","b"],"2":["a","c"],"3":["a"]}
 **/
function invertByMany(dataObj) {
    return _.transform(dataObj, function (result, values, key) {
        return _.map(values, function (subvalue) {
            return (result[subvalue] || (result[subvalue] = [])).push(key);
        });
    }, {});
}

/**
 * inverts a object by many unique values
 * inveryByUniqueValues({ 'a': [1,2], 'b': [3], c:[4]})
 * // {1: "a", 2: "a", 3: "b", 4:"c"}
 */
/**
 * Helper functions
 * @author          wassname
 */

function invertByUniqueValues(dataObj) {
    return _.transform(dataObj, function (a, v, k) {
        return _.map(v, function (sv) {
            return a[sv] = k;
        });
    }, {});
}

/**
 * remap property name and values using lodash
 * ref: http://stackoverflow.com/a/37389070/221742
 * @param  {Object} object         - e.g. {oldKey:'oldValue''}
 * @param  {Object} keyMapping   - {oldKey:'newKey'}
 * @param  {Object} valueMapping - {oldValue:'newValue'}
 * @return {Object}              - {newKey:'newValue'}
 */
function remapKeyValues(currentObject, keyMapping, valueMapping) {
    return _(currentObject).mapKeys(function (v, k) {
        return keyMapping[k] === undefined ? k : keyMapping[k];
    }).mapValues(function (v) {
        return valueMapping[v] === undefined ? v : valueMapping[v];
    }).value();
}

/**
 * deep remap property name and values using lodash
 * @param  {Object} object         - e.g. {oldKey:{oldKey:'oldValue'}}
 * @param  {Object} keyMapping   - {oldKey:'newKey'}
 * @param  {Object} valueMapping - {oldValue:'newValue'}
 * @return {Object}              - {newKey:{newKey:'newValue'}}
 */
function remapKeyValuesDeep(currentObject, keyMapping, valueMapping) {
    currentObject = remapKeyValues(currentObject, keyMapping, valueMapping);
    if (_.isPlainObject(currentObject)) {
        return _.mapValues(currentObject, function (v) {
            if (_.isPlainObject(v)) {
                return remapKeyValuesDeep(v, keyMapping, valueMapping);
            } else {
                return v;
            }
        });
    } else {
        return currentObject;
    }
}

function deepRoundValues(currentObject) {
    var roundFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (v) {
        return _.round(v, 2);
    };

    return _.mapValues(currentObject, function (v) {
        if (_Number$isFinite(v)) v = roundFunc(v);
        if (_.isPlainObject(v)) v = deepRoundValues(v, roundFunc);
        return v;
    });
}

function deepParseFloat(currentObject) {
    return _.mapValues(currentObject, function (v) {
        var n = Number(v);
        if (_.isPlainObject(v)) return deepParseFloat(v);else if (_.isFinite(n)) return n;else return v;
    });
}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EthnicSkinBlender = undefined;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _three = __webpack_require__(24);

var THREE = _interopRequireWildcard(_three);

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// these are set to look right when added to the caucasian skin
/**
 * @name            MakeHuman
 * @copyright       MakeHuman Team 2001-2016
 * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
 * @description     blends three ethnic skin tones
 */
var asianColor = new THREE.Color().setHSL(0.078, 0.34, 0.576);
var africanColor = new THREE.Color().setHSL(0.09, 0.83, 0.21);
var caucasianColor = new THREE.Color().setHSL(0.062, 0.51, 0.68);

var EthnicSkinBlender = exports.EthnicSkinBlender = function () {
    /**
     * return a blend of the three ethnic skin tones based on the human macro settings.
    **/
    function EthnicSkinBlender(human) {
        _classCallCheck(this, EthnicSkinBlender);

        this.human = human;
    }

    _createClass(EthnicSkinBlender, [{
        key: 'valueOf',
        value: function valueOf() {
            var blends = [this.human.factors.getCaucasian(), this.human.factors.getAfrican(), this.human.factors.getAsian()];

            // Set diffuse color
            var color = new THREE.Color(0, 0, 0).add(caucasianColor.clone().multiplyScalar(blends[0])).add(africanColor.clone().multiplyScalar(blends[1])).add(asianColor.clone().multiplyScalar(blends[2]));
            // clamp to [0,1]
            return color.fromArray(color.toArray().map(function (v) {
                return _.clamp(v, 0, 1);
            }));
        }
    }]);

    return EthnicSkinBlender;
}();

exports.default = EthnicSkinBlender;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Factors = undefined;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This class stores macrovariables. They need transformation and it happens
 * here through getters and setters
 */
var Factors = exports.Factors = function () {
    function Factors(human) {
        _classCallCheck(this, Factors);

        this.human = human;
        this.setDefaultValues();
    }

    _createClass(Factors, [{
        key: 'setDefaultValues',
        value: function setDefaultValues() {
            this.MIN_AGE = 1;
            this.MAX_AGE = 90;
            this.MID_AGE = 25.0;
            // TODO BMI needs adjusting to weightKg comes out Ok and BMI=25 corresponds to weight=0.5
            this.MIN_BMI = 15;
            this.MAX_BMI = 35;

            this._age = 0.5;
            this._gender = 0.5;
            this._weight = 0.5;
            this._muscle = 0.5;
            this._height = 0.5;
            this._breastSize = 0.5;
            this._breastFirmness = 0.5;
            this._bodyProportions = 0.5;

            this._setGenderVals();
            this._setAgeVals();
            this._setWeightVals();
            this._setMuscleVals();
            this._setHeightVals();
            this._setBreastSizeVals();
            this._setBreastFirmnessVals();
            this._setBodyProportionVals();

            this.caucasianVal = 1 / 3;
            this.asianVal = 1 / 3;
            this.africanVal = 1 / 3;
        }

        // //////////////////////////////////
        // Non getter and setter functions //
        // //////////////////////////////////

        /**
        The height approximatly in  cm.
        **/

    }, {
        key: 'getHeightCm',
        value: function getHeightCm() {
            var bBox = this.getBoundingBox();
            return 10 * (bBox.max.y - bBox.min.y);
        }

        /**
        Bounding box of the basemesh without the helper groups
        **/

    }, {
        key: 'getBoundingBox',
        value: function getBoundingBox() {
            if (!this.human.mesh.geometry.boundingBox) {
                this.human.mesh.geometry.computeBoundingBox();
            }
            return this.human.mesh.geometry.boundingBox;
        }

        /**
        Approximate age in years.
        **/

    }, {
        key: 'getAgeYears',
        value: function getAgeYears() {
            if (this.getAge() < 0.5) {
                return this.MIN_AGE + (this.MID_AGE - this.MIN_AGE) * 2 * this.getAge();
            } else {
                return this.MID_AGE + (this.MAX_AGE - this.MID_AGE) * 2 * (this.getAge() - 0.5);
            }
        }

        /**
        Set age in years.
        **/

    }, {
        key: 'setAgeYears',
        value: function setAgeYears(ageYears) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var age = void 0;
            ageYears = parseFloat(ageYears);
            if (ageYears < this.MIN_AGE || ageYears > this.MAX_AGE) {
                throw new Error("RuntimeError Invalid age specified, should be minimum %s && maximum %s. % ", this.MIN_AGE, this.MAX_AGE);
            }
            if (ageYears < this.MID_AGE) {
                age = (ageYears - this.MIN_AGE) / ((this.MID_AGE - this.MIN_AGE) * 2);
            } else {
                age = (ageYears - this.MID_AGE) / ((this.MAX_AGE - this.MID_AGE) * 2) + 0.5;
            }
            this.setAge(age, updateModifier);
        }
    }, {
        key: 'getWeightBMI',
        value: function getWeightBMI() {
            return this.getWeight() * (this.MAX_BMI - this.MIN_BMI) + this.MIN_BMI;
        }
    }, {
        key: 'setWeightBMI',
        value: function setWeightBMI(bmi) {
            var weight = bmi / (this.MAX_BMI - this.MIN_BMI) - this.MIN_BMI;
            this.setWeight(weight);
        }
    }, {
        key: 'getWeightKg',
        value: function getWeightKg() {
            var heightM = this.getHeightCm() / 100;
            return this.getWeightBMI() * heightM * heightM;
        }
    }, {
        key: 'setWeightKg',
        value: function setWeightKg(kgs) {
            var heightM = this.getHeightCm() / 100;
            this.setWeightBMI(kgs / heightM / heightM);
        }

        // //////////////////////
        // Getter and setters //
        // //////////////////////

        // this makes it a little nicer to access
        // TODO hide the getter and setter functions

    }, {
        key: 'setGender',


        /**
         * Set gender
         * @param {Number}  gender  -  0 for female to 1 for male
         */
        value: function setGender(gender) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails/Gender'];
                modifier.setValue(gender);
                // this.human.targets.applyAll()
                return;
            }

            gender = _.clamp(gender, 0, 1);
            if (this._gender === gender) {
                return;
            }
            this._gender = gender;
            this._setGenderVals();
        }

        /**
        Gender from 0 (female) to 1 (male)
        **/

    }, {
        key: 'getGender',
        value: function getGender() {
            return this._gender;
        }

        /**
        Dominant gender of this human or null
        **/

    }, {
        key: 'getDominantGender',
        value: function getDominantGender() {
            if (this.getGender() < 0.5) {
                return 'female';
            } else if (this.getGender() > 0.5) {
                return 'male';
            } else {
                return null;
            }
        }
    }, {
        key: '_setGenderVals',
        value: function _setGenderVals() {
            this.maleVal = this._gender;
            this.femaleVal = 1 - this._gender;
        }

        /**
         * Set age
         * @param {Number}  age                   - 0 for 0 years old to 1 for 70 years old
         */

    }, {
        key: 'setAge',
        value: function setAge(age) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails/Age'];
                modifier.setValue(age);
                // this.human.targets.applyAll()
                return;
            }

            age = _.clamp(age, 0, 1);
            if (this._age === age) {
                return;
            }
            this._age = age;
            this._setAgeVals();
        }

        /**
        Age of this human as a float between 0 && 1.
        **/

    }, {
        key: 'getAge',
        value: function getAge() {
            return this._age;
        }

        /**
         Makehuman a8 age sytem where:
        - 0 is a 1 years old baby
        - 0.1875 is 10 year old child
        - 0.5 is a 25 year old young adult
        - 1 is a 90 year old, old adult
        **/

    }, {
        key: '_setAgeVals',
        value: function _setAgeVals() {
            if (this._age < 0.5) {
                this.oldVal = 0;
                this.babyVal = Math.max(0, 1 - this._age * 5.333); // 1/0.1875 = 5.333
                this.youngVal = Math.max(0, (this.age - 0.1875) * 3.2); // 1/(0.5-0.1875) = 3.2
                this.childVal = Math.max(0, Math.min(1, 5.333 * this._age) - this.youngVal);
            } else {
                this.childVal = 0;
                this.babyVal = 0;
                this.oldVal = Math.max(0, this._age * 2 - 1);
                this.youngVal = 1 - this.oldVal;
            }
        }

        /**
         * set weight
         * @param {Number}  weight                - 0 to 1
         * @param {Boolean} [updateModifier=true] [description]
         */

    }, {
        key: 'setWeight',
        value: function setWeight(weight) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails-universal/Weight'];
                modifier.setValue(weight, false);
                // this.human.targets.applyAll()
                return;
            }

            weight = _.clamp(weight, 0, 1);
            if (this._weight === weight) {
                return;
            }
            this._weight = weight;
            this._setWeightVals();
        }
    }, {
        key: 'getWeight',
        value: function getWeight() {
            return this._weight;
        }
    }, {
        key: '_setWeightVals',
        value: function _setWeightVals() {
            this.maxweightVal = Math.max(0, this._weight * 2 - 1);
            this.minweightVal = Math.max(0, 1 - this._weight * 2);
            this.averageweightVal = 1 - (this.maxweightVal + this.minweightVal);
        }

        /**
         * Muscle from 0 to 1
         * @param {Number}  muscle                - 0 to 1
         */

    }, {
        key: 'setMuscle',
        value: function setMuscle(muscle) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails-universal/Muscle'];
                modifier.setValue(muscle, false);
                // this.human.targets.applyAll()
                return;
            }

            muscle = _.clamp(muscle, 0, 1);
            if (this._muscle === muscle) {
                return;
            }
            this._muscle = muscle;
            this._setMuscleVals();
        }
    }, {
        key: 'getMuscle',
        value: function getMuscle() {
            return this._muscle;
        }
    }, {
        key: '_setMuscleVals',
        value: function _setMuscleVals() {
            this.maxmuscleVal = Math.max(0, this._muscle * 2 - 1);
            this.minmuscleVal = Math.max(0, 1 - this._muscle * 2);
            this.averagemuscleVal = 1 - (this.maxmuscleVal + this.minmuscleVal);
        }
    }, {
        key: 'setHeight',
        value: function setHeight(height) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails-height/Height'];
                modifier.setValue(height, false);
                // this.human.targets.applyAll()
                return;
            }

            height = _.clamp(height, 0, 1);
            if (this._height === height) {
                return;
            }
            this._height = height;
            this._setHeightVals();
        }
    }, {
        key: 'getHeight',
        value: function getHeight() {
            return this._height;
        }
    }, {
        key: '_setHeightVals',
        value: function _setHeightVals() {
            this.maxheightVal = Math.max(0, this._height * 2 - 1);
            this.minheightVal = Math.max(0, 1 - this._height * 2);
            if (this.maxheightVal > this.minheightVal) {
                this.averageheightVal = 1 - this.maxheightVal;
            } else {
                this.averageheightVal = 1 - this.minheightVal;
            }
        }
    }, {
        key: 'setBreastSize',
        value: function setBreastSize(size) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['breast/BreastSize'];
                modifier.setValue(size, false);
                // this.human.targets.applyAll()
                return;
            }

            size = _.clamp(size, 0, 1);
            if (this._breastSize === size) {
                return;
            }
            this._breastSize = size;
            this._setBreastSizeVals();
        }
    }, {
        key: 'getBreastSize',
        value: function getBreastSize() {
            return this._breastSize;
        }
    }, {
        key: '_setBreastSizeVals',
        value: function _setBreastSizeVals() {
            this.maxcupVal = Math.max(0, this._breastSize * 2 - 1);
            this.mincupVal = Math.max(0, 1 - this._breastSize * 2);
            if (this.maxcupVal > this.mincupVal) {
                this.averagecupVal = 1 - this.maxcupVal;
            } else {
                this.averagecupVal = 1 - this.mincupVal;
            }
        }
    }, {
        key: 'setBreastFirmness',
        value: function setBreastFirmness(firmness) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['breast/BreastFirmness'];
                modifier.setValue(firmness, false);
                // this.human.targets.applyAll()
                return;
            }

            firmness = _.clamp(firmness, 0, 1);
            if (this._breastFirmness === firmness) {
                return;
            }
            this._breastFirmness = firmness;
            this._setBreastFirmnessVals();
        }
    }, {
        key: 'getBreastFirmness',
        value: function getBreastFirmness() {
            return this._breastFirmness;
        }
    }, {
        key: '_setBreastFirmnessVals',
        value: function _setBreastFirmnessVals() {
            this.maxfirmnessVal = Math.max(0, this._breastFirmness * 2 - 1);
            this.minfirmnessVal = Math.max(0, 1 - this._breastFirmness * 2);

            if (this.maxfirmnessVal > this.minfirmnessVal) {
                this.averagefirmnessVal = 1 - this.maxfirmnessVal;
            } else {
                this.averagefirmnessVal = 1 - this.minfirmnessVal;
            }
        }
    }, {
        key: 'setBodyProportions',
        value: function setBodyProportions(proportion) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails-proportions/BodyProportions'];
                modifier.setValue(proportion, false);
                // this.human.targets.applyAll()
                return;
            }

            proportion = Math.min(1, Math.max(0, proportion));
            if (this._bodyProportions === proportion) {
                return;
            }
            this._bodyProportions = proportion;
            this._setBodyProportionVals();
        }
    }, {
        key: '_setBodyProportionVals',
        value: function _setBodyProportionVals() {
            this.idealproportionsVal = Math.max(0, this._bodyProportions * 2 - 1);
            this.uncommonproportionsVal = Math.max(0, 1 - this._bodyProportions * 2);

            if (this.idealproportionsVal > this.uncommonproportionsVal) {
                this.regularproportionsVal = 1 - this.idealproportionsVal;
            } else {
                this.regularproportionsVal = 1 - this.uncommonproportionsVal;
            }
        }
    }, {
        key: 'getBodyProportions',
        value: function getBodyProportions() {
            return this._bodyProportions;
        }
    }, {
        key: 'setCaucasian',
        value: function setCaucasian(caucasian) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails/Caucasian'];
                modifier.setValue(caucasian, false);
                // this.human.targets.applyAll()
                return;
            }

            caucasian = _.clamp(caucasian, 0, 1);
            this.caucasianVal = caucasian;

            if (sync && !this.blockEthnicUpdates) {
                this._setEthnicVals('caucasian');
            }
        }
    }, {
        key: 'getCaucasian',
        value: function getCaucasian() {
            return this.caucasianVal;
        }
    }, {
        key: 'setAfrican',
        value: function setAfrican(african) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails/African'];
                modifier.setValue(african, false);
                // this.human.targets.applyAll()
                return;
            }

            african = _.clamp(african, 0, 1);
            this.africanVal = african;

            if (sync && !this.blockEthnicUpdates) {
                this._setEthnicVals('african');
            }
        }
    }, {
        key: 'getAfrican',
        value: function getAfrican() {
            return this.africanVal;
        }
    }, {
        key: 'setAsian',
        value: function setAsian(asian) {
            var updateModifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var sync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (updateModifier) {
                var modifier = this.human.modifiers.children['macrodetails/Asian'];
                modifier.setValue(asian, false);
                // this.human.targets.applyAll()
                return null;
            }

            this.asianVal = _.clamp(asian, 0, 1);

            if (sync && !this.blockEthnicUpdates) {
                this._setEthnicVals('asian');
            }
            return asian;
        }
    }, {
        key: 'getAsian',
        value: function getAsian() {
            return this.asianVal;
        }

        /**
        Normalize ethnic values so that they sum to 1.
        **/

    }, {
        key: '_setEthnicVals',
        value: function _setEthnicVals(exclude) {
            var _this = this;

            var _getVal = function _getVal(ethnic) {
                return _this[ethnic + 'Val'];
            };

            var _setVal = function _setVal(ethnic, value) {
                return _this[ethnic + 'Val'] = value;
            };

            function _closeTo(value, limit) {
                var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;

                return Math.abs(value - limit) <= epsilon;
            }

            var ethnics = ['african', 'asian', 'caucasian'];
            var remaining = 1;
            if (exclude) {
                _.pull(ethnics, exclude);
            }
            remaining = 1 - _getVal(exclude);

            var otherTotal = _.sum(ethnics.map(function (e) {
                return _getVal(e);
            }));
            if (otherTotal === 0) {
                // Prevent division by zero
                if (ethnics.length === 3 || _getVal(exclude) === 0) {
                    // All values 0, this cannot be. Reset to default values.
                    ethnics.forEach(function (e) {
                        _setVal(e, 1 / 3);
                    });
                    if (exclude) {
                        _setVal(exclude, 1 / 3);
                    }
                } else if (exclude && _closeTo(_getVal(exclude), 1)) {
                    // One ethnicity is 1, the rest is 0
                    ethnics.forEach(function (e) {
                        return _setVal(e, 0);
                    });
                    _setVal(exclude, 1);
                } else {
                    // Increase values of other races (that were 0) to hit total sum of 1
                    ethnics.forEach(function (e) {
                        return _setVal(e, 0.01);
                    });
                    this._setEthnicVals(exclude); // Re-normalize
                }
            } else {
                ethnics.map(function (e) {
                    return _setVal(e, remaining * (_getVal(e) / otherTotal));
                });
            }
        }

        /**
        Most dominant ethnicity (african, caucasian, asian) or null
        **/

    }, {
        key: 'getEthnicity',
        value: function getEthnicity() {
            if (this.getAsian() > this.getAfrican() && this.getAsian() > this.getCaucasian()) {
                return 'asian';
            } else if (this.getAfrican() > this.getAsian() && this.getAfrican() > this.getCaucasian()) {
                return 'african';
            } else if (this.getCaucasian() > this.getAsian() && this.getCaucasian() > this.getAfrican()) {
                return 'caucasian';
            } else {
                return null;
            }
        }
    }, {
        key: 'age',
        get: function get() {
            return this.getAge();
        },
        set: function set(v) {
            return this.setAge(v);
        }
    }, {
        key: 'gender',
        get: function get() {
            return this.getGender();
        },
        set: function set(v) {
            return this.setGender(v);
        }
    }, {
        key: 'weight',
        get: function get() {
            return this.getWeight();
        },
        set: function set(v) {
            return this.setWeight(v);
        }
    }, {
        key: 'muscle',
        get: function get() {
            return this.getMuscle();
        },
        set: function set(v) {
            return this.setMuscle(v);
        }
    }, {
        key: 'height',
        get: function get() {
            return this.getHeight();
        },
        set: function set(v) {
            return this.setHeight(v);
        }
    }, {
        key: 'breastSize',
        get: function get() {
            return this.getBreastSize();
        },
        set: function set(v) {
            return this.setBreastSize(v);
        }
    }, {
        key: 'breastFirmness',
        get: function get() {
            return this.getBreastFirmness();
        },
        set: function set(v) {
            return this.setBreastFirmness(v);
        }
    }, {
        key: 'bodyProportions',
        get: function get() {
            return this.getBodyProportions();
        },
        set: function set(v) {
            return this.setBodyProportions(v);
        }
    }, {
        key: 'caucasian',
        get: function get() {
            return this.getCaucasian();
        },
        set: function set(v) {
            return this.setCaucasian(v);
        }
    }, {
        key: 'african',
        get: function get() {
            return this.getAfrican();
        },
        set: function set(v) {
            return this.setAfrican(v);
        }
    }, {
        key: 'asian',
        get: function get() {
            return this.getAsian();
        },
        set: function set(v) {
            return this.setAsian(v);
        }
    }]);

    return Factors;
}(); /**
      * @name            MakeHuman
      * @copyright       MakeHuman Team 2001-2016
      * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
      * @author          wassname
      * @description
      * Describes human class which holds the 3d mesh, modifiers, human factors,
      * and morphTargets.
      */

exports.default = Factors;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Modifiers = exports.EthnicModifier = exports.MacroModifier = exports.UniversalModifier = exports.ManagedTargetModifier = exports.Modifier = undefined;

var _concat = __webpack_require__(79);

var _Array$concat = _interopRequireDefault(_concat).default;

var _keys = __webpack_require__(18);

var _Object$keys = _interopRequireDefault(_keys).default;

var _isFinite = __webpack_require__(59);

var _Number$isFinite = _interopRequireDefault(_isFinite).default;

var _toConsumableArray2 = __webpack_require__(27);

var _toConsumableArray = _interopRequireDefault(_toConsumableArray2).default;

var _getPrototypeOf = __webpack_require__(19);

var _Object$getPrototypeOf = _interopRequireDefault(_getPrototypeOf).default;

var _possibleConstructorReturn2 = __webpack_require__(26);

var _possibleConstructorReturn = _interopRequireDefault(_possibleConstructorReturn2).default;

var _get2 = __webpack_require__(60);

var _get = _interopRequireDefault(_get2).default;

var _inherits2 = __webpack_require__(25);

var _inherits = _interopRequireDefault(_inherits2).default;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

var _d3Random = __webpack_require__(146);

var d3Random = _interopRequireDefault(_d3Random).default;

var _targets = __webpack_require__(34);

var targetMetaData = _targets.targetMetaData;

var _modeling_modifiers = __webpack_require__(148);

var modelingModifiers = _interopRequireDefault(_modeling_modifiers).default;

var _measurement_modifiers = __webpack_require__(147);

var measurementModifiers = _interopRequireDefault(_measurement_modifiers).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The most basic modifier. All modifiers should inherit from this, directly or
 * indirectly
 *
 * A modifier manages a set of targets applied with a certain weight that
 * influence the human model.
 */
var Modifier = exports.Modifier = function () {
    function Modifier(groupName, name) {
        _classCallCheck(this, Modifier);

        this.groupName = groupName;
        this.name = name;
        this.fullName = this.groupName + '/' + this.name;

        this.targets = [];
        this.description = "";
        this.human = null;
        this.defaultValue = 0;
        this.min = 0;
        this.max = 1;

        this.showMacroStats = false;

        // Macro variable controlled by this modifier
        this.macroVariable = null;
        // Macro variables on which the targets controlled by this modifier depend
        this.macroDependencies = [];

        this._symmModifier = null;
        this._symmSide = 0;

        this.targetMetaData = targetMetaData;
    }

    _createClass(Modifier, [{
        key: 'resetValue',
        value: function resetValue() {
            var oldVal = this.getValue();
            this.setValue(this.defaultValue);
            return oldVal;
        }

        /** Propagate modifier update to dependent modifiers**/

    }, {
        key: 'propagateUpdate',
        value: function propagateUpdate() {
            var _this = this;

            var realtime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var f = void 0;
            if (realtime) {
                f = ['macrodetails', 'macrodetails-universal'];
            } else {
                f = null;
            }

            var modifiersAffectedBy = this.parent.getModifiersAffectedBy(this, f).map(function (dependentModifierGroup) {
                // Only updating one modifier in a group should suffice to update the
                // targets affected by the entire group.
                var m = _this.parent.getModifiersByGroup(dependentModifierGroup)[0];
                if (realtime) {
                    return m.updateValue(m.getValue(), true);
                } else {
                    return m.setValue(m.getValue(), true);
                }
            });

            return modifiersAffectedBy;
        }
    }, {
        key: 'clampValue',
        value: function clampValue(value) {
            return _.clamp(value, this.min, this.max);
        }

        /** Subclasses must override this **/

    }, {
        key: 'getFactors',
        value: function getFactors(value) {
            throw new Error("NotImplemented");
        }

        /**
         * Gets modifier value from sum of own or given targets
         * @param  {Array} targets=this.targets - The targets to get values from
         * @return {Number}                     - sum of values from targets
         */

    }, {
        key: 'getValue',
        value: function getValue() {
            var targets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.targets;

            var sum = 0;
            for (var i = 0; i < targets.length; i++) {
                var path = targets[i][0];
                var target = this.parent.human.targets.children[path];
                if (!target) {
                    // console.error('Target not found for modifier', path, this.name)
                    throw new Error('Target not found for modifier ' + path + ' ' + this.name);
                } else {
                    sum += target.value;
                }
            }

            // var targets = _.map(this.targets, target => this.parent.human.targets.children[target[0]])
            // return _.sum(_.map(targets,target=>target.value));
            return sum;
        }

        /**
         * Update the values of this modifers targets
         * @param  {Number} value            new value
         * @param  {Boolean} skipUpdate=false Flag to prevent infinite recursion
         */

    }, {
        key: 'updateValue',
        value: function updateValue(value) {
            var skipUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            // Update detail state
            if (value !== undefined) {
                this.setValue(value, true);
            }

            // values are directly put into influences matrix now
            // Apply changes
            // for (var i = 0; i < this.targets.length; i++) {
            //     // find the actual target attached to human
            //     let targetName = this.targets[i][0]
            //     let target = this.parent.human.targets.children[targetName]
            //     if (!target) console.warn('Tried to apply modifier but target is not loaded', this.name, targetName)
            //         // have target apply itself to human.mesh
            //     target.value=value
            // }


            if (skipUpdate) {
                // Used for dependency updates (avoid dependency loops && double updates to human)
                return value;
            }

            // Update dependent modifiers
            return this.propagateUpdate(true); // realtime=true
        }

        /**
         * The side this modifier takes in a symmetric pair of two modifiers.
         * Returns 'l' for left, 'r' for right.
         * Returns null if symmetry does not apply to this modifier.
         **/

    }, {
        key: 'getSymmetrySide',
        value: function getSymmetrySide() {
            var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name.split('-');

            if ('l' in path) {
                return 'l';
            } else if ('r' in path) {
                return 'r';
            } else {
                return null;
            }
        }
    }, {
        key: 'getSymmModifier',
        value: function getSymmModifier() {
            var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name.split('-');

            return _.map(path, function (p) {
                if (p === 'r') return 'l';else if (p === 'l') return 'r';else return p;
            }).join('-');
        }

        /**
        Get name of the modifier which is symmetric to this one or null if there is none
        **/

    }, {
        key: 'getSymmetricOpposite',
        value: function getSymmetricOpposite() {
            if (this._symmModifier) {
                return this.groupName + '/' + this._symmModifier;
            } else {
                return null;
            }
        }

        /**
         * Retrieve the other modifiers of the same type on the human.
         * @return {Array} Array of modifiers with the same class
         */

    }, {
        key: 'getSimilar',
        value: function getSimilar() {
            var _this2 = this;

            // return [m for m in this.parent.getModifiersByType(this.type) if m != self]
            return this.parent.getModifiersByType(this.constructor).filter(function (m) {
                return m !== _this2;
            });
        }
    }, {
        key: 'isMacro',
        value: function isMacro() {
            return this.macroVariable !== null;
        }
    }, {
        key: 'leftLabel',
        get: function get() {
            return this.left ? this.left.split('-').slice(-1)[0] : '';
        }
    }, {
        key: 'rightLabel',
        get: function get() {
            return this.right ? this.right.split('-').slice(-1)[0] : '';
        }
    }, {
        key: 'midLabel',
        get: function get() {
            return this.mid ? this.mid.split('-').slice(-1)[0] : '';
        }
    }, {
        key: 'image',
        get: function get() {
            return 'data/targets/' + this.fullName.replace('/', '/images/').replace('|', '-').toLowerCase() + '.png';
        }
    }]);

    return Modifier;
}();

// class SimpleModifier // Simple modifier constructed from a path to a target file.


/**
 * Modifier that uses the targets module for managing its targets.
 * Abstract baseclass
 */
/**
 * @name            MakeHuman
 * @copyright       MakeHuman Team 2001-2016
 * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
 * @author          wassname
 * @description
 *
 * Provides classes for modifiers read from makehuman
 *
 * These modifiers are the parameters you slide, and they interact to product
 * a matrix of changes to the targets.
 */

var ManagedTargetModifier = exports.ManagedTargetModifier = function (_Modifier) {
    _inherits(ManagedTargetModifier, _Modifier);

    function ManagedTargetModifier() {
        _classCallCheck(this, ManagedTargetModifier);

        return _possibleConstructorReturn(this, (ManagedTargetModifier.__proto__ || _Object$getPrototypeOf(ManagedTargetModifier)).apply(this, arguments));
    }

    _createClass(ManagedTargetModifier, [{
        key: 'getTargetWeights',


        /**
         * Gets weight for this modifiers targets.
         * @param  {Number} value=1                  The weights sum to this tptal
         * @param  {Array} targets=this.targets      Targets to get weights for
         * @param  {Object} factors=this.getFactors() Name,values for factors and weights
         * @param  {Number} total=1                  The weights sum to this total
         * @return {Object}                          Target paths along with their weights
         *                                              e.g. {data/targets/head/head-age-less.target: -0}
         */
        value: function getTargetWeights() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var targets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.targets;
            var factors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getFactors(value);
            var total = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

            var facVals = void 0;
            var result = {};

            for (var i = 0; i < targets.length; i++) {
                var tpath = targets[i][0];
                var tfactors = targets[i][1];

                // look up target factors in our factor values
                facVals = _.map(tfactors, function (factor) {
                    return factors[factor] !== undefined ? factors[factor] : 1.0;
                });

                // debug check for unfound factors
                var notFound = _.map(tfactors, function (factor) {
                    return factors[factor] === undefined ? factor : null;
                }).filter(_.isString);
                if (notFound.length > 0) {
                    console.warn('Names not found in factors', {
                        notFound: notFound,
                        modifiersName: this.name,
                        factors: factors
                    });
                }

                // debug check for NaN, undefined, null
                if (_.filter(facVals, function (n) {
                    return !_.isFinite(n);
                }).length) {
                    console.debug('Some factor values are not finite numbers', facVals, this.name);
                }
                // console.debug('factor values',facVals,this.name)

                // so now we multiply the target weight by all modifying factors
                // armlength-old-tall = 1 * 0.10 old * 0.60 tall = 0.6
                result[tpath] = total * _.reduce(facVals, function (accum, val) {
                    return accum * val;
                }, 1);
            }
            return result;
        }

        /**
         * Find the groups each child target belongs to
         * @param  {String} path e.g. "data/targets/macrodetails/universal-female-young-maxmuscle-averageweight.target"
         * @return {Array}      e.g. ["age", "gender", "muscle", "weight"]
         */

    }, {
        key: 'findMacroDependencies',
        value: function findMacroDependencies(path) {
            var result = [];
            // get child targets
            var targetPaths = targetMetaData.getTargetsByGroup(path) || [];
            for (var i = 0; i < targetPaths.length; i++) {
                var cats = targetPaths[i].macroVariables;
                if (cats) result.push.apply(result, _toConsumableArray(cats));
            }
            return _.uniq(result);
        }

        /**
         * Set value of this modifier
         * @param {Number} value
         * @param {Boolean} skipDependencies - A flag to avoid infinite recursion
         */

    }, {
        key: 'setValue',
        value: function setValue(value) {
            var skipDependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!_Number$isFinite(value)) throw new Error('value is not finite ' + value);
            value = this.clampValue(value);
            // const factors = this.getFactors(value)
            var tWeights = this.getTargetWeights(value);
            for (var tpath in tWeights) {
                if (tWeights.hasOwnProperty(tpath)) {
                    var tWeight = tWeights[tpath];
                    var target = this.parent.human.targets.children[tpath];
                    if (target === undefined) {
                        if (!this.parent.human.targets.loading) {
                            console.warn('Target not found in', _.keys(this.parent.human.targets.children).length, ' loaded targets. Target=', tpath, '. Modifier=', this.name);
                        }
                    } else {
                        target.value = tWeight;
                    }
                }
            }
            // console.debug('Set target values',this.name,_.keys(tWeights).length,tWeights)

            if (skipDependencies) {
                return;
            }

            // Update dependent modifiers
            this.propagateUpdate(false);
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            // here the right overrides the left
            var right = _get(ManagedTargetModifier.prototype.__proto__ || _Object$getPrototypeOf(ManagedTargetModifier.prototype), 'getValue', this).call(this, this.r_targets);
            if (right) {
                return right;
            } else {
                return -1 * _get(ManagedTargetModifier.prototype.__proto__ || _Object$getPrototypeOf(ManagedTargetModifier.prototype), 'getValue', this).call(this, this.l_targets);
            }
        }

        /**
         * Returns weights for each factor e.g {'old':0.8,'young':0.2,child:0}
         */

    }, {
        key: 'getFactors',
        value: function getFactors(value) {
            var _this4 = this;

            var categoryNames = _Object$keys(targetMetaData.targetCategories);
            // return _.map(categoryNames, name => [name, this.parent.human.factors[name + 'Val']]); // returns nested arrays
            return _.transform(categoryNames, function (res, name) {
                return res[name] = _this4.parent.human.factors[name + 'Val'];
            }, {});
        }
    }]);

    return ManagedTargetModifier;
}(Modifier);

var UniversalModifier = exports.UniversalModifier = function (_ManagedTargetModifie) {
    _inherits(UniversalModifier, _ManagedTargetModifie);

    /**
     * Simple target-based modifier that controls 1, 2 or 3 targets, managed by
     * the targets module.
     * @param  {String} groupName  e.g. head
     * @param  {String} targetName e.g. head-age
     * @param  {String} leftExt    Howtarget relates to modifier
     *                             e.g. less|shorter|narrower|skinnier
     * @param  {String} rightExt   e.g. more|taller|wider|fatter
     * @param  {String} centerExt  e.g. normal
     * @return {undefined}
     */
    function UniversalModifier(groupName, target, leftExt, rightExt, centerExt) {
        _classCallCheck(this, UniversalModifier);

        var name = void 0,
            targetName = void 0;
        targetName = groupName + '-' + target;

        var left = leftExt ? targetName + '-' + leftExt : null;
        var right = rightExt ? targetName + '-' + rightExt : null;
        var center = centerExt ? targetName + '-' + centerExt : null;

        // it either has 3, 2, or 1 targets. Include each target in the name
        if (left && right && center) {
            targetName = targetName + '-' + leftExt + '|' + centerExt + '|' + rightExt;
            name = target + '-' + leftExt + '|' + centerExt + '|' + rightExt;
        } else if (leftExt && rightExt) {
            targetName = targetName + '-' + leftExt + '|' + rightExt;
            name = target + '-' + leftExt + '|' + rightExt;
        } else {
            right = targetName;
            name = target;
        }

        // can't use this before super so we assign to this after
        var _this5 = _possibleConstructorReturn(this, (UniversalModifier.__proto__ || _Object$getPrototypeOf(UniversalModifier)).call(this, groupName, name));

        _this5.left = left;
        _this5.right = right;
        _this5.center = center;
        _this5.targetName = targetName;

        // console.debug("UniversalModifier(%s, %s, %s, %s)  :  %s", this.groupName, targetName, leftExt, rightExt, this.fullName)
        _this5.l_targets = _this5.targetMetaData.findTargets(_this5.left);
        _this5.r_targets = _this5.targetMetaData.findTargets(_this5.right);
        _this5.c_targets = _this5.targetMetaData.findTargets(_this5.center);

        _this5.macroDependencies = _.concat(_this5.findMacroDependencies(_this5.left), _this5.findMacroDependencies(_this5.right), _this5.findMacroDependencies(_this5.center));

        _this5.targets = _.concat(_this5.l_targets, _this5.r_targets, _this5.c_targets);

        _this5.min = _this5.left ? -1 : 0;
        return _this5;
    }

    /**
     * For a managedTargetModifier we assign the value to the left or right target
     * @param  {Number} value =1 - Number to set modifiers to
     * @return {Object}          - Value for each target and human factor
     *                             e.g. {'african': 0.33333333333333326, // factor
                                        'armslegs-r-lowerarm-fat': 1, // target
                                        'armslegs-r-lowerarm-skinny': -0.0,...}
     */


    _createClass(UniversalModifier, [{
        key: 'getFactors',
        value: function getFactors() {
            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            var factors = _get(UniversalModifier.prototype.__proto__ || _Object$getPrototypeOf(UniversalModifier.prototype), 'getFactors', this).call(this, value);

            if (this.left !== null) {
                factors[this.left] = -Math.min(value, 0);
            }
            if (this.center !== null) {
                factors[this.center] = 1.0 - Math.abs(value);
            }
            factors[this.right] = Math.max(0, value);

            return factors;
        }
    }]);

    return UniversalModifier;
}(ManagedTargetModifier);

/**
 * Modifiers that control many other modifiers instead of controlling target weights directly
 */


var MacroModifier = exports.MacroModifier = function (_ManagedTargetModifie2) {
    _inherits(MacroModifier, _ManagedTargetModifie2);

    function MacroModifier(groupName, name) {
        _classCallCheck(this, MacroModifier);

        var _this6 = _possibleConstructorReturn(this, (MacroModifier.__proto__ || _Object$getPrototypeOf(MacroModifier)).call(this, groupName, name));

        _this6.defaultValue = 0.5;

        // console.debug("MacroModifier(%s, %s)  :  %s", this.groupName, this.name, this.fullName)

        _this6.setter = 'set' + _this6.name;
        _this6.getter = 'get' + _this6.name;

        _this6.targets = _this6.targetMetaData.findTargets(_this6.groupName);

        // console.debug('macro modifier %s.%s(%s): %s', base, name, variable, this.targets)

        _this6.macroDependencies = _this6.findMacroDependencies(_this6.groupName);

        _this6.macroVariable = _this6._getMacroVariable(_this6.name);

        // Macro modifier is not dependent on variable it controls itself
        if (_this6.macroVariable) {
            _.pull(_this6.macroDependencies, _this6.macroVariable);
        }
        return _this6;
    }

    /** The macro variable modified by this modifier. **/


    _createClass(MacroModifier, [{
        key: '_getMacroVariable',
        value: function _getMacroVariable() {
            var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.name;

            if (name) {
                var variable = name.toLowerCase();
                if (this.targetMetaData.categoryTargets[variable]) {
                    return variable;
                } else if (this.targetMetaData.targetCategories[variable]) {
                    // necessary for caucasian, asian, african
                    return this.targetMetaData.targetCategories[variable];
                }
            } else {
                return null;
            }
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this.parent.human.factors[this.getter]();
        }
    }, {
        key: 'setValue',
        value: function setValue(value) {
            var skipDependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            value = this.clampValue(value);
            this.parent.human.factors[this.setter](value, false);
            _get(MacroModifier.prototype.__proto__ || _Object$getPrototypeOf(MacroModifier.prototype), 'setValue', this).call(this, value, skipDependencies);
        }
    }, {
        key: 'getFactors',
        value: function getFactors(value) {
            var factors = _get(MacroModifier.prototype.__proto__ || _Object$getPrototypeOf(MacroModifier.prototype), 'getFactors', this).call(this, value);
            factors[this.groupName] = 1.0;
            return factors;
        }

        // buildLists() {
        //     return;
        // }

    }]);

    return MacroModifier;
}(ManagedTargetModifier);

/**
 * Specialisation of macro modifier to manage three closely connected modifiers
 * whose total sum of values has to sum to 1.
 */


var EthnicModifier = exports.EthnicModifier = function (_MacroModifier) {
    _inherits(EthnicModifier, _MacroModifier);

    function EthnicModifier(groupName, variable) {
        _classCallCheck(this, EthnicModifier);

        var _this7 = _possibleConstructorReturn(this, (EthnicModifier.__proto__ || _Object$getPrototypeOf(EthnicModifier)).call(this, groupName, variable));

        _this7.defaultValue = 1.0 / 3;
        return _this7;
    }

    /**
     * Resetting one ethnic modifier restores all ethnic modifiers to their
     * default position.
     */


    _createClass(EthnicModifier, [{
        key: 'resetValue',
        value: function resetValue() {
            var _tmp = this.parent.blockEthnicUpdates;
            this.parent.blockEthnicUpdates = true;

            var oldVals = {};
            oldVals[this.fullName] = this.getValue();
            this.setValue(this.defaultValue);
            this.getSimilar().forEach(function (modifier) {
                oldVals[modifier.fullName] = modifier.getValue();
                modifier.setValue(modifier.defaultValue);
            });

            this.parent.blockEthnicUpdates = _tmp;
            return this.getValue();
        }
    }]);

    return EthnicModifier;
}(MacroModifier);

/**
 * Container class for modifiers
 */


var Modifiers = exports.Modifiers = function () {
    function Modifiers(human) {
        var _this8 = this;

        _classCallCheck(this, Modifiers);

        this.human = human;

        // container
        this.children = {};

        // flags
        this.blockEthnicUpdates = false; // When set to True, changes to race are not normalized automatically
        // this.symmetryModeEnabled = false;


        // data
        this.modelingModifiers = _Array$concat([], measurementModifiers, modelingModifiers);

        // metadata
        this.modifier_varMapping = {}; // Maps macro variable to the modifier group that modifies it
        this.dependencyMapping = {}; // Maps a macro variable to all the modifiers that depend on it

        // init
        this.loadModifiers().map(function (m) {
            return _this8.addModifier(m);
        });
    }

    /**
     * Load modifiers from a modifier definition file.
     */


    _createClass(Modifiers, [{
        key: 'loadModifiers',
        value: function loadModifiers(modelingModifiersData) {
            modelingModifiersData = this.modelingModifiers || modelingModifiers;
            // console.debug("Loading modifiers from json")
            var modifiers = [];
            var lookup = {};
            var modifier = void 0;
            var ModifierClass = void 0;
            modelingModifiersData.forEach(function (modifierGroup) {
                var groupName = modifierGroup.group;
                modifierGroup.modifiers.forEach(function (mDef) {
                    // Construct modifier
                    if ("modifierType" in mDef) {
                        if (mDef.modifierType === "EthnicModifier") {
                            ModifierClass = EthnicModifier;
                        } else {
                            throw new Error('Uknown modifier type ' + mDef.modifierType);
                        }
                    } else if ('macrovar' in mDef) {
                        ModifierClass = MacroModifier;
                    } else {
                        ModifierClass = UniversalModifier;
                    }

                    if ('macrovar' in mDef) {
                        modifier = new ModifierClass(groupName, mDef.macrovar);
                    } else {
                        modifier = new ModifierClass(groupName, mDef.target, mDef.min, mDef.max, mDef.mid);
                    }

                    if ("defaultValue" in mDef) {
                        modifier.defaultValue = mDef.defaultValue;
                    }

                    modifiers.push(modifier);
                    lookup[modifier.fullName] = modifier;
                });
            });

            // console.debug('Loaded %s modifiers', modifiers.length)
            return modifiers;
        }

        /**
        Modifiers of a class type.
        **/

    }, {
        key: 'getModifiersByType',
        value: function getModifiersByType(classType) {
            // TODO just build this once on init. Perhaps move to modifiers class
            return _.filter(this.children, function (m) {
                return m instanceof classType;
            });
        }

        /** Get all modifiers for this human belonging to the same modifier group **/

    }, {
        key: 'getModifiersByGroup',
        value: function getModifiersByGroup(groupName) {
            // TODO just build this once on init. Perhaps move to modifiers class
            return _(this.children).values().filter(function (m) {
                return m.groupName === groupName;
            }).value();
        }

        /**
         * Update the targets for this human
         *  determined by the macromodifier target combinations
         */

    }, {
        key: 'updateMacroModifiers',
        value: function updateMacroModifiers() {
            for (var i = 0; i < this.children.length; i++) {
                var modifier = this.children[i];
                if (modifier.isMacro()) {
                    modifier.setValue(modifier.getValue());
                }
            }
        }

        /** Attach a new modifier to this human. **/

    }, {
        key: 'addModifier',
        value: function addModifier(modifier) {
            var _this9 = this;

            if (this.children[modifier.fullName] !== undefined) {
                console.error("Modifier with name %s is already attached to human.", modifier.fullName);
                return;
            }

            // this._modifier_type_cache = {};
            this.children[modifier.fullName] = modifier;

            // add to group
            // if (!this.modifier_groups[modifier.groupName])
            //     this.modifier_groups[modifier.groupName] = [];
            //
            // this.modifier_groups[modifier.groupName].push(modifier)

            // Update dependency mapping
            if (modifier.macroVariable && modifier.macroVariable !== 'None') {
                if (modifier.macroVariable in this.modifier_varMapping && this.modifier_varMapping[modifier.macroVariable] !== modifier.groupName) {
                    console.error("Error, multiple modifier groups setting var %s (%s && %s)", modifier.macroVariable, modifier.groupName, this.modifier_varMapping[modifier.macroVariable]);
                } else {
                    (function () {
                        _this9.modifier_varMapping[modifier.macroVariable] = modifier.groupName;

                        // Update any new backwards references that might be influenced by this change (to make it independent of order of adding modifiers)
                        var toRemove = []; // Modifiers to remove again from backwards map because they belong to the same group as the modifier controlling the var
                        var dep = modifier.macroVariable;
                        var affectedModifierGroups = _this9.dependencyMapping[dep] || [];
                        for (var i = 0; i < affectedModifierGroups.length; i++) {
                            var affectedModifierGroup = affectedModifierGroups[i];
                            if (affectedModifierGroup === modifier.groupName) {
                                toRemove.push(affectedModifierGroup);
                                // console.debug('REMOVED from backwards map again %s', affectedModifierGroup)
                            }
                        }

                        if (toRemove.length > 0) {
                            if (toRemove.length === _this9.dependencyMapping[dep].length) {
                                delete _this9.dependencyMapping[dep];
                            } else {
                                _this9.dependencyMapping[dep] = _this9.dependencyMapping[dep].filter(function (groupName) {
                                    return !toRemove.includes(groupName);
                                });
                            }
                        }

                        for (var k = 0; k < modifier.macroDependencies.length; k++) {
                            dep = modifier.macroDependencies[k];
                            var groupName = _this9.modifier_varMapping[dep];
                            if (groupName && groupName === modifier.groupName) {
                                // Do not include dependencies within the same modifier group
                                // (this step might be omitted if the mapping is still incomplete (dependency is not yet mapped to a group), && can later be fixed by removing the entry again from the reverse mapping)
                                continue;
                            }

                            if (!_this9.dependencyMapping[dep]) {
                                _this9.dependencyMapping[dep] = [];
                            }
                            if (!_this9.dependencyMapping[dep].includes(modifier.groupName)) {
                                _this9.dependencyMapping[dep].push(modifier.groupName);
                            }
                            if (modifier.isMacro()) {
                                _this9.updateMacroModifiers();
                            }
                        }
                    })();
                }
            }

            this.children[modifier.fullName] = modifier;
            // modifier.human = this.human;
            modifier.parent = this;
            // return this.children
        }

        /**
         *  Retrieve all modifiers that should be updated if the specified modifier
         *  is updated. (forward dependency mapping)
         */

    }, {
        key: 'getModifierDependencies',
        value: function getModifierDependencies(modifier, filter) {
            var result = [];

            if (modifier.macroDependencies.length > 0) {
                for (var l = 0; l < modifier.macroDependencies.length; l++) {
                    var variable = modifier.macroDependencies[l];
                    if (!this.modifier_varMapping[variable]) {
                        console.error("Modifier dependency map: Error variable %s not mapped", variable);
                        continue;
                    }

                    var depMGroup = this.modifier_varMapping[variable];
                    if (depMGroup !== modifier.groupName) {
                        if (filter && filter.length) {
                            if (filter.includes(depMGroup)) {
                                result.push(depMGroup);
                            } else {
                                continue;
                            }
                        } else {
                            result.push(depMGroup);
                        }
                    }
                }
            }
            return _.uniq(result);
        }

        /**
         *    Reverse dependency search. Returns all modifier groups to update that
         *    are affected by the change in the specified modifier. (reverse
         *    dependency mapping)
         */

    }, {
        key: 'getModifiersAffectedBy',
        value: function getModifiersAffectedBy(modifier, filter) {
            var result = this.dependencyMapping[modifier.macroVariable] || [];
            if (filter === undefined || filter === null) {
                return result;
            } else {
                return _.filter(result, function (e) {
                    return filter.includes(e);
                });
            }
        }

        /**
         *  A random value bounded between max and min by reflecting out of bounds
         *  values. This means that a normal dist around 0, with a min of zero gives
         *  half a normal dist
         * @param  {Number} minValue
         * @param  {Number} maxValue
         * @param  {Number} middleValue
         * @param  {Number} sigmaFactor = 0.2 - std deviation as a fraction of max and min
         * @param  {Number} rounding    - Decmals to keeps
         * @return {Number}             - random number
         */

    }, {
        key: '_getRandomValue',
        value: function _getRandomValue(minValue, maxValue, middleValue) {
            var sigmaFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.2;
            var rounding = arguments[4];

            // TODO this may be better if we used d3Random.exponential for modifiers that go from 0 to 1 with a default at 0
            //
            var rangeWidth = Math.abs(maxValue - minValue);
            var sigma = sigmaFactor * rangeWidth;
            var randomVal = d3Random.randomNormal(middleValue, sigma)();

            // below we enforce max and min by reflecting back values that are outside
            // in some cases this is used to get half a normal dist
            // e.g. for distributions from 0 to 1 centered around 0, this results half a normal dist
            if (randomVal < minValue) {
                randomVal = minValue + Math.abs(randomVal - minValue);
            } else if (randomVal > maxValue) {
                randomVal = maxValue - Math.abs(randomVal - maxValue);
            }
            randomVal = _.clamp(randomVal, minValue, maxValue);
            if (rounding) randomVal = _.round(randomVal, rounding);
            return randomVal;
        }

        /**
         *  generate random modifiers values using appropriate distributions for each modifier
         * @param  {Number} symmetry  = 1     - Amount of symmetry preserved
         * @param  {Boolean} macro    = true  - Randomise macro modifiers
         * @param  {Boolean} height   = false
         * @param  {Boolean} face     = true
         * @param  {Boolean} body     = true
         * @param  {Number} rounding  = round to N decimal places
         * @return {Object}                   - modifier:value properties
         *                                      e.g. {'l-arm-length': 0.143145}
         */

    }, {
        key: 'randomValues',
        value: function randomValues() {
            var symmetry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var macro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var face = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var body = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var measure = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

            var _this10 = this;

            var rounding = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2;
            var sigmaMultiple = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;

            // should have dist:
            // bimodal with peaks at 0 and 1 - gender
            // uniform - "macrodetails/Age", "macrodetails/African", "macrodetails/Asian", "macrodetails/Caucasian"
            // normal - all modifiers with left and right
            // exponentials - all targets with only right target
            //
            var modifierGroups = [];

            if (macro) {
                modifierGroups.push.apply(modifierGroups, ['macrodetails', 'macrodetails-universal', 'macrodetails-proportions']);
            }
            if (measure) {
                modifierGroups.push.apply(modifierGroups, ['measure']);
            }
            if (height) {
                modifierGroups.push.apply(modifierGroups, ['macrodetails-height']);
            }
            if (face) {
                modifierGroups.push.apply(modifierGroups, ['eyebrows', 'eyes', 'chin', 'forehead', 'head', 'mouth', 'nose', 'neck', 'ears', 'cheek']);
            }
            if (body) {
                modifierGroups.push.apply(modifierGroups, ['pelvis', 'hip', 'armslegs', 'stomach', 'breast', 'buttocks', 'torso', 'legs', 'genitals']);
            }

            var modifiers = _.flatten(modifierGroups.map(function (mGroup) {
                return _this10.getModifiersByGroup(mGroup);
            }));

            // Make sure not all modifiers are always set in the same order
            // (makes it easy to vary dependent modifiers like ethnics)
            modifiers = _.shuffle(modifiers);

            var randomValues = {};

            for (var j = 0; j < modifiers.length; j++) {
                var sigma = null,
                    mMin = null,
                    mMax = null,
                    w = null,
                    m2 = null,
                    symMax = null,
                    symMin = null,
                    symmDeviation = null,
                    symm = null,
                    randomValue = null;
                var m = modifiers[j];

                if (!(m.fullName in randomValues)) {
                    if (m.groupName === 'head') {
                        // narow distribution
                        sigma = 0.1 * sigmaMultiple;
                    } else if (["forehead/forehead-nubian-less|more", "forehead/forehead-scale-vert-less|more"].indexOf(m.fullName) > -1) {
                        // very narrow distribution
                        sigma = 0.02 * sigmaMultiple;
                    } else if (m.fullName.search("trans-horiz") > -1 || m.fullName === "hip/hip-trans-in|out") {
                        if (symmetry === 1) {
                            randomValue = m.defaultValue;
                        } else {
                            mMin = m.min;
                            mMax = m.max;
                            w = Math.abs(mMax - mMin) * (1 - symmetry);
                            mMin = Math.max(mMin, m.defaultValue - w / 2);
                            mMax = Math.min(mMax, m.defaultValue + w / 2);
                            randomValue = this._getRandomValue(mMin, mMax, m.defaultValue, 0.1, rounding);
                        }
                    } else if (["forehead", "eyebrows", "neck", "eyes", "nose", "ears", "chin", "cheek", "mouth"].indexOf(m.groupName) > -1) {
                        sigma = 0.1 * sigmaMultiple;
                    } else if (m.groupName === 'macrodetails') {
                        if (["macrodetails/Age", "macrodetails/African", "macrodetails/Asian", "macrodetails/Caucasian"].indexOf(m.fullName) > -1) {
                            // people could be any age/race so a uniform distribution here
                            randomValue = Math.random();
                        } else if (["macrodetails/Gender"].indexOf(m.fullName) > -1) {
                            // most people are mostly male or mostly female
                            // a bimodal distribution here. we will do this by giving it a 50% change of default of 0 otherwise 1
                            var defaultValue = 1 * Math.random() > 0.5;
                            randomValue = this._getRandomValue(m.min, m.max, defaultValue, 0.1, rounding);
                        } else {
                            sigma = 0.3 * sigmaMultiple;
                        }
                    } else {
                        sigma = 0.1 * sigmaMultiple;
                    }

                    if (randomValue === null)
                        // TODO also allow it to continue from current value? Probobly do that by setting the default to _.mean(m.defaultValue,m.value)
                        {
                            randomValue = this._getRandomValue(m.min, m.max, m.defaultValue, sigma, rounding);
                        }

                    randomValues[m.fullName] = randomValue;

                    symm = m.getSymmetricOpposite();
                    if (symm && !(symm in randomValues)) {
                        if (symmetry === 1) {
                            randomValues[symm] = randomValue;
                        } else {
                            m2 = this.human.getModifier(symm);
                        }
                        symmDeviation = (1 - symmetry) * Math.abs(m2.max - m2.min) / 2;
                        symMin = Math.max(m2.min, Math.min(randomValue - symmDeviation, m2.max));
                        symMax = Math.max(m2.min, Math.min(randomValue + symmDeviation, m2.max));
                        randomValues[symm] = this._getRandomValue(symMin, symMax, randomValue, sigma, rounding);
                    }
                }
            }

            // No pregnancy for male, too young || too old subjects
            // TODO add further restrictions on gender-dependent targets like pregnant && breast
            if ((randomValues["macrodetails/Gender"] || 0) > 0.5 || (randomValues["macrodetails/Age"] || 0.5) < 0.2 || (randomValues["macrodetails/Age"] || 0.7) < 0.75) {
                if ("stomach/stomach-pregnant-decr|incr" in randomValues) {
                    randomValues["stomach/stomach-pregnant-decr|incr"] = 0;
                }
            }

            return randomValues;
        }

        /** randomize the modifier value along a normal distribution **/

    }, {
        key: 'randomize',
        value: function randomize() {
            var symmetry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var macro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var face = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var body = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
            var measure = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
            var rounding = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 2;
            var sigmaMultiple = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;

            // var oldValues = _.transform(modifiers, (a, m) => a[m.fullName] = m.getValue(), {})
            var randomVals = this.randomValues(symmetry, macro, height, face, body, measure, rounding, sigmaMultiple);

            for (var name in randomVals) {
                if (randomVals.hasOwnProperty(name)) {
                    var value = randomVals[name];
                    this.children[name].setValue(value, true);
                }
            }
            return randomVals;
        }
    }, {
        key: 'reset',
        value: function reset() {
            for (var name in this.children) {
                if (this.children.hasOwnProperty(name)) {
                    this.children[name].resetValue();
                }
            }
        }
    }, {
        key: 'exportConfig',
        value: function exportConfig() {
            return _.values(this.children).reduce(function (o, m) {
                o[m.fullName] = m.getValue();
                return o;
            }, {});
        }
    }, {
        key: 'importConfig',
        value: function importConfig(json) {
            var _this11 = this;

            this.reset();
            return _.map(json, function (value, modifierName) {
                return _this11.children[modifierName].setValue(value);
            });
        }
    }]);

    return Modifiers;
}();

exports.default = Modifiers;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Proxies = exports.Proxy = exports.parseProxyUrl = undefined;

var _toConsumableArray2 = __webpack_require__(27);

var _toConsumableArray = _interopRequireDefault(_toConsumableArray2).default;

var _promise = __webpack_require__(35);

var _Promise = _interopRequireDefault(_promise).default;

var _getPrototypeOf = __webpack_require__(19);

var _Object$getPrototypeOf = _interopRequireDefault(_getPrototypeOf).default;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _possibleConstructorReturn2 = __webpack_require__(26);

var _possibleConstructorReturn = _interopRequireDefault(_possibleConstructorReturn2).default;

var _inherits2 = __webpack_require__(25);

var _inherits = _interopRequireDefault(_inherits2).default;

var _slicedToArray2 = __webpack_require__(91);

var _slicedToArray = _interopRequireDefault(_slicedToArray2).default;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

var _three = __webpack_require__(24);

var THREE = _interopRequireWildcard(_three);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * parseProxyUrl
 * @param  {String} url - e.g. "data/proxies/clothes/Bikini/Bikini.json#blue"
 * @return {Object}     - e.g. {group:"clothes",name:"Bikini",file:"bikini.json", materialName:"blue"}
 */
/**
 * @name            MakeHuman
 * @copyright       MakeHuman Team 2001-2016
 * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
 * @description     Manages meshes such as clothes which attatch to the human
 * and it's skeleton
 */

var parseProxyUrl = exports.parseProxyUrl = function parseProxyUrl(address) {
    // if (!address.includes('#')) address += '#'
    var _address$split = address.split('#'),
        _address$split2 = _slicedToArray(_address$split, 2),
        fullUrl = _address$split2[0],
        materialName = _address$split2[1];

    var _fullUrl$match = fullUrl.match(/(.+\/)*(.+)\/(.+)\/(.+)\.json/),
        _fullUrl$match2 = _slicedToArray(_fullUrl$match, 5),
        group = _fullUrl$match2[2],
        name = _fullUrl$match2[3],
        file = _fullUrl$match2[4];

    var key = group + '/' + name + '/' + file + '.json' + (materialName ? '#' + materialName : '');
    var thumbnail = group + '/' + name + '/' + (materialName || file) + '.thumb.png';
    return { group: group, name: name, key: key, materialName: materialName || '', thumbnail: thumbnail };
};

var Proxy = exports.Proxy = function (_THREE$Object3D) {
    _inherits(Proxy, _THREE$Object3D);

    function Proxy(url, human) {
        var manager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.LoadingManager();

        _classCallCheck(this, Proxy);

        var _this = _possibleConstructorReturn(this, (Proxy.__proto__ || _Object$getPrototypeOf(Proxy)).call(this));

        _this.manager = manager;
        _this.human = human;

        // after fitting we expand the size by this fraction
        _this.extraGeometryScaling = [1.0, 1.0, 1.0];

        _this.loader = new THREE.XHRLoader(_this.manager);

        var _parseProxyUrl = parseProxyUrl(url),
            name = _parseProxyUrl.name,
            group = _parseProxyUrl.group,
            materialName = _parseProxyUrl.materialName,
            key = _parseProxyUrl.key,
            thumbnail = _parseProxyUrl.thumbnail;

        _this.key = key;
        _this.name = name;
        _this.group = group;
        _this.thumbnail = thumbnail;
        _this.materialName = materialName;
        _this.url = _this.human.config.baseUrl + 'proxies/' + _this.key;

        _this.mesh = null;
        _this.visible = false;
        _this.metadata = {};
        return _this;
    }

    /** load a proxy from threejs json file, making it a child object and giving it the same skeleton **/


    _createClass(Proxy, [{
        key: 'load',
        value: function load() {
            var self = this;
            if (this.mesh) return _Promise.resolve(this.mesh);
            return new _Promise(function (resolve, reject) {
                try {
                    self.loader.load(self.url, resolve, undefined, reject);
                } catch (e) {
                    reject(e);
                }
            }).catch(function (err) {
                console.error('Failed to load proxy data', self.url, err);
            }).then(function (text) {
                return JSON.parse(text);
            }).then(function (json) {
                self.metadata = json.metadata;
                var texturePath = self.texturePath && typeof self.texturePath === 'string' ? self.texturePath : THREE.Loader.prototype.extractUrlBase(self.url);
                return new THREE.JSONLoader().parse(json, texturePath);
            })
            // use unpacking here to turn one args into two, as promises only return one
            .then(function (_ref) {
                var geometry = _ref.geometry,
                    materials = _ref.materials;

                geometry.name = self.url;
                materials.map(function (m) {
                    return m.skinning = true;
                });

                var mesh = new THREE.SkinnedMesh(geometry, new THREE.MultiMaterial(materials));

                // TODO check they are the same skeletons
                mesh.children.pop(); // pop existing skeleton
                mesh.skeleton = self.human.skeleton;

                mesh.castShadow = true;
                mesh.receiveShadow = true;

                self.mesh = mesh;
                self.mesh.geometry.computeVertexNormals();
                self.add(mesh);

                // when it overlaps with body, show proxy (body has 0, we want higher ints)
                mesh.renderOrder = self.metadata.z_depth;

                self.updatePositions();

                // change it to use the material specified in the url hash
                if (self.materialName) {
                    var materialIndex = _.findIndex(materials, function (material) {
                        return material.name === self.materialName;
                    });
                    self.changeMaterial(materialIndex);
                }

                return mesh;
            });
        }

        /** Turn mesh on or off, loading if needed **/

    }, {
        key: 'toggle',
        value: function toggle(state) {
            var _this2 = this;

            if (state === undefined) state = !this.visible;
            if (this.visible === state) return _Promise.resolve(this);
            this.visible = state;
            var promisedMesh = void 0;
            if (state === false) promisedMesh = _Promise.resolve();else promisedMesh = this.load().then(function () {
                return _this2.updatePositions();
            });
            return promisedMesh.then(function () {
                return _this2.human.proxies.updateFaceMask();
            });
        }

        /**
         * This recalculates the coords of the proxy using the vertice inds, weights, and offsets
         * like in makehumans's proxy.py:Proxy.getCoords()
         */

    }, {
        key: 'updatePositions',
        value: function updatePositions() {
            var _this3 = this,
                _mesh$geometry;

            // TODO faster to do this in the gpu
            // equation = vertice = w0 * v0 + w1 * v1 + w2*v2 + offset, where w0 = weights[i][0], v0 = ref_verts_i[0]
            if (!this.visible || !this.mesh) return null;
            var o = this.metadata.offsets;
            var w = this.metadata.weights;
            var v = this.metadata.ref_vIdxs.map(function (row) {
                return row.map(function (vIndx) {
                    return _this3.human.mesh.geometry.vertices[vIndx];
                });
            });

            // convert this.matrix to Matrix3
            var mw = this.matrix.elements;
            var matrix = new THREE.Matrix3();
            matrix.set(mw[0], mw[1], mw[2], mw[4], mw[5], mw[6], mw[8], mw[9], mw[10]).transpose();
            var m = matrix.elements;

            for (var i = 0; i < this.mesh.geometry.vertices.length; i++) {
                // xyz offsets calculated as dot(matrix, offsets)
                var vertice = new THREE.Vector3(o[i][0] * m[0] + o[i][1] * m[1] + o[i][2] * m[2], o[i][0] * m[3] + o[i][1] * m[4] + o[i][2] * m[5], o[i][0] * m[6] + o[i][1] * m[7] + o[i][2] * m[8]);

                // Three weights to three vectors
                for (var j = 0; j < 3; j++) {
                    vertice.x += w[i][j] * v[i][j].x;
                    vertice.y += w[i][j] * v[i][j].y;
                    vertice.z += w[i][j] * v[i][j].z;
                }
                this.mesh.geometry.vertices[i] = vertice;
            }
            (_mesh$geometry = this.mesh.geometry).scale.apply(_mesh$geometry, _toConsumableArray(this.extraGeometryScaling));
            this.mesh.geometry.verticesNeedUpdate = true;
            this.mesh.geometry.elementsNeedUpdate = true;
            return this.mesh.geometry.vertices;
        }
    }, {
        key: 'changeMaterial',
        value: function changeMaterial(i) {
            if (i > this.mesh.material.materials.length) return this.mesh.material.materials.length;
            this.mesh.geometry.faces.map(function (face) {
                return face.materialIndex = i;
            });
            this.mesh.geometry.groupsNeedUpdate = true;
            return true;
        }
    }, {
        key: 'preRender',
        value: function preRender() {}
    }, {
        key: 'onAfterRender',
        value: function onAfterRender() {}
    }]);

    return Proxy;
}(THREE.Object3D);

/**
 * Container for proxies
 */


var Proxies = exports.Proxies = function (_THREE$Object3D2) {
    _inherits(Proxies, _THREE$Object3D2);

    function Proxies(human) {
        _classCallCheck(this, Proxies);

        var _this4 = _possibleConstructorReturn(this, (Proxies.__proto__ || _Object$getPrototypeOf(Proxies)).call(this));

        _this4.human = human;
        // Proxies
        // TODO replace with a better system
        // this._hairProxy = undefined
        // this._eyesProxy = undefined
        // this._eyebrowsProxy = undefined
        // this._eyelashesProxy = undefined
        // this._teethProxy = undefined
        // this._tongueProxy = undefined
        // this._clothesProxies = {}

        _this4._cache = {};

        // init an object for each proxy but don't load untill needed
        _this4.human.config.proxies.map(function (url) {
            return new Proxy(_this4.human.config.baseUrl + 'proxies/' + url, _this4.human);
        }).map(function (proxy) {
            return _this4.add(proxy);
        });
        return _this4;
    }

    /**
     * Toggles or sets a proxy
     * params:
     *   key {String} the url for the proxy  (relative to baseUrl) e.g. eyes/Low-Poly/Low-Poly.json#brown
     *   state {Boolean|undefined} set the proxy on or off or if undefined toggle it
     * returns a promise to load the mesh
     */


    _createClass(Proxies, [{
        key: 'toggleProxy',
        value: function toggleProxy(key, state) {
            // try to find an existing proxy with this key
            var proxy = _.find(this.human.proxies.children, function (p) {
                return p.url === key;
            }) || _.find(this.human.proxies.children, function (p) {
                return p.key === key;
            }) || _.find(this.human.proxies.children, function (p) {
                return p.name === key;
            });
            // or init a new one
            if (!proxy) {
                console.warn('Could not find proxy with key ' + key);
                // throw new Error(`Could not find loaded proxy to toggle with key: ${key}`)
                proxy = new Proxy(this.human.config.baseUrl + 'proxies/' + key, this.human);
                this.add(proxy);
            } else {
                console.log('toggleProxy', proxy.url, state);
            }
            return proxy.toggle(state);
        }
    }, {
        key: 'updatePositions',
        value: function updatePositions() {
            this.children.forEach(function (child) {
                return child.updatePositions();
            });
        }

        /** Make faces to hide parts under clothes, see makehuman/plugins/3_libraries_clothes_choose.py:updateFaceMasks **/

    }, {
        key: 'updateFaceMask',
        value: function updateFaceMask() {
            var minMaskedVertsPerFace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

            // get deleted vertices from all active proxies
            var deleteVerts = this.children.filter(function (proxy) {
                return proxy.visible && proxy.mesh && proxy.metadata.deleteVerts && proxy.metadata.deleteVerts.length;
            }).map(function (proxy) {
                return proxy.metadata.deleteVerts;
            });
            var nbVertices = this.human.mesh.geometry.vertices.length;
            var nullMaterial = this.human.mesh.material.materials.findIndex(function (m) {
                return m.name === 'maskedFaces';
            });

            // for each vertice, see if any proxy wants to delete it
            var dv = Array(nbVertices);

            var _loop = function _loop(i) {
                dv[i] = _.sum(deleteVerts.map(function (vs) {
                    return vs[i];
                })) > 0;
            };

            for (var i = 0; i < dv.length; i++) {
                _loop(i);
            }

            // if more than n vertices of a face are masked, mask the face else unmask
            this.human.mesh.geometry.faces.map(function (face) {
                if (dv[face.a] + dv[face.b] + dv[face.c] >= minMaskedVertsPerFace) {
                    face.materialIndex = nullMaterial;
                } else {
                    face.materialIndex = face.oldMaterialIndex;
                }
                return face.materialIndex;
            });
            this.human.mesh.geometry.groupsNeedUpdate = true;

            var facesMasked = this.human.mesh.geometry.faces.filter(function (face) {
                return face.materialIndex === nullMaterial;
            }).length;
            console.debug('vertices masked ', _.sum(dv), 'faces masked', facesMasked);
        }
    }, {
        key: 'onElementsNeedUpdate',
        value: function onElementsNeedUpdate() {
            this.updatePositions();
            this.children.filter(function (proxy) {
                return proxy.visible && proxy.mesh;
            }).map(function (proxy) {
                return proxy.mesh.geometry.computeVertexNormals();
            });
        }
    }, {
        key: 'exportConfig',
        value: function exportConfig() {
            return this.children.filter(function (p) {
                return p.visible;
            }).map(function (p) {
                return p.url;
            });
        }
    }, {
        key: 'importConfig',
        value: function importConfig(config) {
            var _this5 = this;

            this.children.map(function (p) {
                return p.visible = false;
            });
            this.updateFaceMask();
            return config.map(function (url) {
                return _this5.toggleProxy(url, true);
            });
        }
    }]);

    return Proxies;
}(THREE.Object3D);

exports.default = Proxy;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(97), __esModule: true };

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _getPrototypeOf = __webpack_require__(19);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = __webpack_require__(86);

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2).document && document.documentElement;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(6) && !__webpack_require__(14)(function(){
  return Object.defineProperty(__webpack_require__(40)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(20);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(16)
  , ITERATOR   = __webpack_require__(1)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(4);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var LIBRARY        = __webpack_require__(28)
  , $export        = __webpack_require__(3)
  , redefine       = __webpack_require__(71)
  , hide           = __webpack_require__(10)
  , has            = __webpack_require__(9)
  , Iterators      = __webpack_require__(16)
  , $iterCreate    = __webpack_require__(116)
  , setToStringTag = __webpack_require__(30)
  , getPrototypeOf = __webpack_require__(69)
  , ITERATOR       = __webpack_require__(1)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(1)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(70)
  , hiddenKeys = __webpack_require__(41).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(9)
  , toObject    = __webpack_require__(22)
  , IE_PROTO    = __webpack_require__(46)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

var has          = __webpack_require__(9)
  , toIObject    = __webpack_require__(7)
  , arrayIndexOf = __webpack_require__(110)(false)
  , IE_PROTO     = __webpack_require__(46)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10);

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(13)
  , invoke             = __webpack_require__(114)
  , html               = __webpack_require__(61)
  , cel                = __webpack_require__(40)
  , global             = __webpack_require__(2)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(20)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ },
/* 73 */
/***/ function(module, exports) {



/***/ },
/* 74 */
/***/ function(module, exports) {

"use strict";
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};


/***/ },
/* 75 */
/***/ function(module, exports) {

"use strict";
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

exports.arrayToObject = function (source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function (target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            target[source] = true;
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (Object.prototype.hasOwnProperty.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function (str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D || // -
            c === 0x2E || // .
            c === 0x5F || // _
            c === 0x7E || // ~
            (c >= 0x30 && c <= 0x39) || // 0-9
            (c >= 0x41 && c <= 0x5A) || // a-z
            (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function (obj, references) {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    var refs = references || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0; i < obj.length; ++i) {
            if (obj[i] && typeof obj[i] === 'object') {
                compacted.push(exports.compact(obj[i], refs));
            } else if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    keys.forEach(function (key) {
        obj[key] = exports.compact(obj[key], refs);
    });

    return obj;
};

exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function (obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);
'use strict';



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _human = __webpack_require__(78);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_human).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _human[key];
    }
  });
});

var _proxy = __webpack_require__(58);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_proxy).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _proxy[key];
    }
  });
});

var _targets = __webpack_require__(34);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_targets).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _targets[key];
    }
  });
});

var _humanModifier = __webpack_require__(57);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_humanModifier).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _humanModifier[key];
    }
  });
});

var _ethnicSkinBlender = __webpack_require__(55);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_ethnicSkinBlender).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _ethnicSkinBlender[key];
    }
  });
});

var _factors = __webpack_require__(56);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_factors).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _factors[key];
    }
  });
});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OBJExporter = undefined;

var _three = __webpack_require__(24);

var THREE = _interopRequireWildcard(_three);

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * from three.js
 */
var OBJExporter = exports.OBJExporter = function OBJExporter() {};
// TODO add metadata
// TODO add groups
OBJExporter.prototype = {

    constructor: OBJExporter,

    parse: function parse(object) {
        var output = '';
        var precision = 6;

        var indexVertex = 0;
        var indexVertexUvs = 0;
        var indexNormals = 0;

        var i = void 0,
            j = void 0,
            k = void 0,
            l = void 0,
            m = void 0,
            group = void 0,
            face = [];

        var parseMesh = function parseMesh(mesh) {
            var nbVertex = 0;
            var nbNormals = 0;
            var nbVertexUvs = 0;

            var geometry = mesh.geometry;
            var faceGroups = void 0,
                groupNames = void 0;

            if (geometry instanceof THREE.Geometry) {
                faceGroups = geometry.faces.map(function (f) {
                    return f.materialIndex;
                });
                groupNames = mesh.material.materials.map(function (m) {
                    return m.name;
                });

                // shortcuts
                var vertices = mesh.geometry.vertices;
                // const normals = geometry.getAttribute('normal')
                var uvs = mesh.geometry.faceVertexUvs[0];
                var faces = mesh.geometry.faces;

                // name of the mesh object
                output += 'o ' + mesh.name + '\n';

                // name of the mesh material
                if (mesh.material && mesh.material.name) {
                    output += 'usemtl ' + mesh.material.name + '\n';
                }

                // vertices

                if (vertices !== undefined) {
                    for (var ii = 0; ii < vertices.length; ii++) {
                        var _vertex = vertices[ii];

                        // transfrom the vertex to world space
                        _vertex.applyMatrix4(mesh.matrixWorld);

                        // transform the vertex to export format
                        output += 'v ' + _.round(_vertex.x, precision) + ' ' + _.round(_vertex.y, precision) + ' ' + _.round(_vertex.z, precision) + '\n';
                    }
                }

                // uvs

                if (uvs !== undefined) {
                    for (var _ii = 0; _ii < uvs.length; _ii++) {
                        for (var jj = 0; jj < uvs[_ii].length; jj++) {
                            var uv = uvs[_ii][jj];
                            // transform the uv to export format
                            output += 'vt ' + _.round(uv.x, precision) + ' ' + _.round(uv.y, precision) + '\n';
                        }
                    }
                }

                // normals

                // if (normals !== undefined) {
                //
                //     normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);
                //
                //     for (i = 0, l = normals.count; i < l; i++, nbNormals++) {
                //
                //         normal.x = normals.getX(i);
                //         normal.y = normals.getY(i);
                //         normal.z = normals.getZ(i);
                //
                //         // transfrom the normal to world space
                //         normal.applyMatrix3(normalMatrixWorld);
                //
                //         // transform the normal to export format
                //         output += 'vn ' + _.round(normal.x, precision) + ' ' + _.round(normal.y, precision) + ' ' + _.round(normal.z, precision) + '\n';
                //
                //     }
                //
                // }

                for (var _ii2 = 0; _ii2 < faces.length; _ii2++) {
                    face = faces[_ii2];

                    // convert from materialIndex to facegroup
                    if (faceGroups && faceGroups[_ii2] !== group) {
                        group = faceGroups[_ii2];
                        output += 'g ' + groupNames[group] + '\n';
                    }

                    // transform the face to export format
                    output += 'f ' + (face.a + 1) + '/' + (_ii2 * 3 + 1) + ' ' + (face.b + 1) + '/' + (_ii2 * 3 + 2) + ' ' + (face.c + 1) + '/' + (_ii2 * 3 + 3) + '\n';
                }
            } else {
                console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry);
            }

            // update index
            indexVertex += nbVertex;
            indexVertexUvs += nbVertexUvs;
            indexNormals += nbNormals;
        };

        var parseLine = function parseLine(line) {
            var nbVertex = 0;

            var geometry = line.geometry;
            var type = line.type;

            if (geometry instanceof THREE.Geometry) {
                geometry = new THREE.BufferGeometry().setFromObject(line);
            }

            if (geometry instanceof THREE.BufferGeometry) {
                // shortcuts
                var vertices = geometry.getAttribute('position');
                var indices = geometry.getIndex();

                // name of the line object
                output += 'o ' + line.name + '\n';

                if (vertices !== undefined) {
                    for (i = 0, l = vertices.count; i < l; i++, nbVertex++) {
                        vertex.x = vertices.getX(i);
                        vertex.y = vertices.getY(i);
                        vertex.z = vertices.getZ(i);

                        // transfrom the vertex to world space
                        vertex.applyMatrix4(line.matrixWorld);

                        // transform the vertex to export format
                        output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\n';
                    }
                }

                if (type === 'Line') {
                    output += 'l ';

                    for (j = 1, l = vertices.count; j <= l; j++) {
                        output += indexVertex + j + ' ';
                    }

                    output += '\n';
                }

                if (type === 'LineSegments') {
                    for (j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {
                        output += 'l ' + (indexVertex + j) + ' ' + (indexVertex + k) + '\n';
                    }
                }
            } else {
                console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry);
            }

            // update index
            indexVertex += nbVertex;
        };

        object.traverse(function (child) {
            if (child instanceof THREE.Mesh) {
                parseMesh(child);
            }

            if (child instanceof THREE.Line) {
                parseLine(child);
            }
        });

        return output;
    }
};
exports.default = OBJExporter;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Human = exports.BaseHuman = exports.HumanIO = undefined;

var _get2 = __webpack_require__(60);

var _get = _interopRequireDefault(_get2).default;

var _typeof2 = __webpack_require__(36);

var _typeof = _interopRequireDefault(_typeof2).default;

var _promise = __webpack_require__(35);

var _Promise = _interopRequireDefault(_promise).default;

var _getPrototypeOf = __webpack_require__(19);

var _Object$getPrototypeOf = _interopRequireDefault(_getPrototypeOf).default;

var _possibleConstructorReturn2 = __webpack_require__(26);

var _possibleConstructorReturn = _interopRequireDefault(_possibleConstructorReturn2).default;

var _inherits2 = __webpack_require__(25);

var _inherits = _interopRequireDefault(_inherits2).default;

var _stringify = __webpack_require__(83);

var _JSON$stringify = _interopRequireDefault(_stringify).default;

var _toConsumableArray2 = __webpack_require__(27);

var _toConsumableArray = _interopRequireDefault(_toConsumableArray2).default;

var _extends2 = __webpack_require__(90);

var _extends = _interopRequireDefault(_extends2).default;

var _keys = __webpack_require__(18);

var _Object$keys = _interopRequireDefault(_keys).default;

var _classCallCheck2 = __webpack_require__(11);

var _classCallCheck = _interopRequireDefault(_classCallCheck2).default;

var _createClass2 = __webpack_require__(12);

var _createClass = _interopRequireDefault(_createClass2).default;

var _lodash = __webpack_require__(8);

var _ = _interopRequireDefault(_lodash).default;

var _three = __webpack_require__(24);

var THREE = _interopRequireWildcard(_three);

var _tween = __webpack_require__(155);

var TWEEN = _interopRequireDefault(_tween).default;

var _qs = __webpack_require__(152);

var qs = _interopRequireWildcard(_qs);

var _targets = __webpack_require__(34);

var Targets = _interopRequireDefault(_targets).default;

var _humanModifier = __webpack_require__(57);

var Modifiers = _interopRequireDefault(_humanModifier).default;

var _poses = __webpack_require__(149);

var poses = _interopRequireDefault(_poses).default;

var _proxy = __webpack_require__(58);

var Proxies = _proxy.Proxies;

var _ethnicSkinBlender = __webpack_require__(55);

var EthnicSkinBlender = _ethnicSkinBlender.EthnicSkinBlender;

var _factors = __webpack_require__(56);

var Factors = _interopRequireDefault(_factors).default;

var _helpers = __webpack_require__(54);

var deepParseFloat = _helpers.deepParseFloat;
var remapKeyValuesDeep = _helpers.remapKeyValuesDeep;
var deepRoundValues = _helpers.deepRoundValues;

var _OBJExporter = __webpack_require__(77);

var OBJExporter = _interopRequireDefault(_OBJExporter).default;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HumanIO = exports.HumanIO = function () {
    function HumanIO(human) {
        _classCallCheck(this, HumanIO);

        this.human = human;

        this.rounding = 3;

        var modifierFullNames = _Object$keys(this.human.modifiers.children).sort();
        var modifierFullNameMapping = _.fromPairs(_.map(modifierFullNames, function (k, v) {
            return [k, v];
        }));
        this.shortenMapping = _extends({ poseName: 'pn', skin: 's', modifiers: 'm', proxies: 'p' }, modifierFullNameMapping);
    }

    _createClass(HumanIO, [{
        key: 'toConfig',
        value: function toConfig() {
            return this.human.exportConfig();
        }
    }, {
        key: 'fromConfig',
        value: function fromConfig(config) {
            this.human.importConfig(config);
        }
    }, {
        key: 'toShortConfig',
        value: function toShortConfig() {
            var _this = this;

            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.human.exportConfig();

            config = remapKeyValuesDeep(config, this.shortenMapping, {});
            config = deepRoundValues(config, function (v) {
                return _.round(v, _this.rounding);
            });
            return config;
        }
    }, {
        key: 'fromShortConfig',
        value: function fromShortConfig(sortConfig) {
            return remapKeyValuesDeep(sortConfig, _.invert(this.shortenMapping), {});
        }
    }, {
        key: 'fromUrlQuery',
        value: function fromUrlQuery(queryConfig) {
            var config = qs.parse(queryConfig);
            return deepParseFloat(remapKeyValuesDeep(config, _.invert(this.shortenMapping), {}));
        }

        /* transforms the config to a smaller url query **/

    }, {
        key: 'toUrlQuery',
        value: function toUrlQuery() {
            var _this2 = this;

            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.human.exportConfig();
            var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            config = remapKeyValuesDeep(config, this.shortenMapping, {});
            config = deepRoundValues(config, function (v) {
                return _.round(v, _this2.rounding);
            });
            var queryConfig = qs.stringify(config, { encode: encode });
            if (queryConfig.length < 2048) throw new Error('url config should be shorter than 2048 chars');
            return queryConfig;
        }
    }, {
        key: 'toUrl',
        value: function toUrl() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.human.exportConfig();
            var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            return window.location.origin + '?' + this.toUrlQuery(config, encode);
        }
    }, {
        key: 'fromUrl',
        value: function fromUrl() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.toString();

            var parser = document.createElement('a');
            parser.href = url;
            var config = this.fromUrlQuery(parser.search.slice(1));
            this.human.importConfig(config);
            return config;
        }
    }, {
        key: 'toObj',
        value: function toObj() {
            var _this3 = this;

            var helpers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            // const self = this
            var objExporter = new OBJExporter();

            var mesh = this.human.mesh.clone();
            mesh.geometry = mesh.geometry.clone();

            mesh.name = 'makehuman_1.1-' + new Date().toJSON();

            // unmask vertices under clothes
            var nullMaterial = mesh.material.materials.findIndex(function (m) {
                return m.name == "maskedFaces";
            });
            mesh.geometry.faces.forEach(function (f, i) {
                if (f.materialIndex === nullMaterial) {
                    f.materialIndex = _this3.human.mesh.geometry.faces[i].oldMaterialIndex;
                }
            });

            if (!helpers) {
                (function () {
                    var geom = mesh.geometry;

                    // delete unused, uvs, faces, and vertices
                    geom.faceVertexUvs = geom.faceVertexUvs.filter(function (uv, i) {
                        return geom.faces[i].materialIndex === 0;
                    });
                    geom.faces = geom.faces.filter(function (f) {
                        return f.materialIndex === 0;
                    });

                    // remove unused vertices without breaking the obj
                    var verticesToKeep = _.sortBy(_.uniq(_.concat.apply(_, _toConsumableArray(geom.faces.filter(function (f) {
                        return f.materialIndex === 0;
                    }).map(function (f) {
                        return [f.a, f.b, f.c];
                    })))));
                    geom.vertices = geom.vertices.filter(function (v, i) {
                        return verticesToKeep.includes(i);
                    });
                    geom.faces.forEach(function (f) {
                        f.a = verticesToKeep.indexOf(f.a);
                        f.b = verticesToKeep.indexOf(f.b);
                        f.c = verticesToKeep.indexOf(f.c);
                    });
                })();
            }

            var obj = objExporter.parse(mesh);
            // don't export vertex normals
            obj = obj.split('\n').filter(function (line) {
                return !line.startsWith('vn ');
            }).join('\n');

            // header data
            var jsonMetadata = _JSON$stringify(this.human.metadata, null, 4).replace(/\n/g, '\n#');
            var header = '# Exported from makehuman js on ' + new Date().toJSON() + '\n#Source metadata:\n#' + jsonMetadata + '\n';

            return header + obj;
        }
    }]);

    return HumanIO;
}();

/**
 * Basic human with method to load base mash, skins, and config
 * @type {Class}
 */

// import SubdivisionModifier from "imports?THREE=three!exports?THREE.SubdivisionModifier!three/examples/js/modifiers/SubdivisionModifier";
// import BufferSubdivisionModifier from "imports?THREE=three!exports?THREE.SubdivisionModifier!three/examples/js/modifiers/BufferSubdivisionModifier";
/**
 * @name            MakeHuman
 * @copyright       MakeHuman Team 2001-2016
 * @license         [AGPL3]{@link http://www.makehuman.org/license.php}
 * @author          wassname
 * @description
 * Describes human class which holds the 3d mesh, modifiers, human factors,
 * and morphTargets.
 */

var BaseHuman = exports.BaseHuman = function (_THREE$Object3D) {
    _inherits(BaseHuman, _THREE$Object3D);

    /**
      * @param  {Object[]} config [description]
      * @param  {String} config[].x - X position
      * @param  {String} config[].y - Y position
      * @param  {String} config[].y - Z position
      * @param  {String} config[].skins - Url to skins
      * @param  {String} config[].character - Url to body json suitable for json
      *                                     loader
      * @param  {String} config[].baseUrl - Baseurl
     */
    function BaseHuman(config) {
        _classCallCheck(this, BaseHuman);

        var _this4 = _possibleConstructorReturn(this, (BaseHuman.__proto__ || _Object$getPrototypeOf(BaseHuman)).call(this));

        _this4.config = config = _.defaults(config, {
            skins: [],
            proxies: [],
            poses: [],
            targets: 'targets.bin',
            model: 'base.json',
            baseUrl: "data/",
            x: 0,
            y: 0,
            z: 0,
            s: 1
        });

        _this4.mesh = null;
        _this4.skins = [];

        _this4.poses = poses;

        // TODO put in config
        _this4.minUpdateInterval = 1000; // minimum interval to recalc vertices in ms

        // TODO undo this hardcoding
        // this.skeleton_metadata = skeleton_metadata

        _this4._poseTweens = [];
        _this4._skinCache = {};

        // this.mixer = new THREE.AnimationMixer(this);

        _this4.manager = new THREE.LoadingManager();
        _this4.manager.onLoad = _this4.onLoadComplete.bind(_this4);
        _this4.materialLoader = new THREE.MaterialLoader(_this4.manager);

        _this4.onBeforeRender = BaseHuman.prototype.onBeforeRender;
        _this4.onAfterRender = BaseHuman.prototype.onAfterRender;
        return _this4;
    }

    /**
     * Loads body from config
     * @return {Promise}                - promise of loaded human
     */


    _createClass(BaseHuman, [{
        key: 'loadModel',
        value: function loadModel() {
            var _this5 = this;

            var self = this;
            var config = this.config;

            // HUMAN
            // Load the geometry data from a url
            this.loader = new THREE.XHRLoader(this.manager);
            var modelUrl = config.baseUrl + 'models/' + config.model;
            return new _Promise(function (resolve, reject) {
                try {
                    self.loader.load(modelUrl, resolve, undefined, reject);
                } catch (e) {
                    reject(e);
                }
            }).catch(function (err) {
                console.error('Failed to load model data', modelUrl, err);
                throw err;
            }).then(function (text) {
                return JSON.parse(text);
            }).then(function (json) {
                self.metadata = json.metadata;
                var texturePath = self.texturePath && typeof self.texturePath === "string" ? self.texturePath : THREE.Loader.prototype.extractUrlBase(modelUrl);

                return new THREE.JSONLoader().parse(json, texturePath);
            })
            // use unpacking here to turn one args into two, as promises only return one
            .then(function (_ref) {
                var geometry = _ref.geometry,
                    materials = _ref.materials;

                self.geometry = geometry;

                geometry.computeBoundingBox();
                // geometry.computeVertexNormals()
                geometry.name = config.character;

                materials.map(function (m) {
                    return m.morphTargets = true;
                });
                materials.map(function (m) {
                    return m.skinning = true;
                });

                // add a null material, and backup face materialIndexes
                geometry.faces.map(function (face) {
                    return face.oldMaterialIndex = face.materialIndex;
                });
                materials.push(new THREE.MeshBasicMaterial({ visible: false, name: 'maskedFaces' }));

                // load multiple materials, to group helper faces using materials http://stackoverflow.com/questions/11025307/can-i-hide-faces-of-a-mesh-in-three-js
                self.mesh = new THREE.SkinnedMesh(geometry, new THREE.MultiMaterial(materials));
                self.mesh.name = config.character;
                self.add(self.mesh);

                _this5.skeleton = _this5.mesh.skeleton;

                self.scale.set(config.s, config.s, config.s);

                self.mesh.geometry.computeBoundingBox();
                var halfHeight = self.mesh.geometry.boundingBox.getSize().y / 2;
                self.position.set(config.x, config.y + halfHeight, config.z);

                self.mesh.castShadow = true;
                self.mesh.receiveShadow = true;

                self.mesh.geometry.computeVertexNormals();

                self.updateJointPositions();

                // hide the helper parts
                self.bodyPartOpacity(0);
                return self.setSkin(config.defaultSkin).then(function () {
                    return self;
                });
            });
        }

        /**
         * Load targets from .target urls
         * @param  {String}      dataUrl    Url of the targt binary
         * @return {Promise}                Promise of an array of targets
         */

    }, {
        key: 'loadTargets',
        value: function loadTargets() {
            var dataUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.baseUrl + 'targets/' + this.config.targets;

            return this.targets.load(dataUrl).then(function (targets) {
                return targets;
            });
        }
    }, {
        key: 'onLoadComplete',
        value: function onLoadComplete() {}

        /**
         * This sets the opacity of parts of the body.
         * With name given arguments it sets all helpers and joints
         * If no arguments are given it lists helper names.
         * @param  {Number} opacity - Set opacity of the helper/s to this
         * @param  {String} name    - Optional helper, otherwise all helpers are set
         * @return {Number}         - Amount of helper opacities set
         */

    }, {
        key: 'bodyPartOpacity',
        value: function bodyPartOpacity(opacity, name) {
            var parts = void 0;

            // return lists of parts
            if (opacity === undefined) {
                return this.mesh.material.materials.map(function (m) {
                    return m.name;
                });
            }

            var helpersAndJoints = this.mesh.material.materials.filter(function (m) {
                return typeof m.name === 'string' && (m.name.startsWith('joint') || m.name.startsWith('helper'));
            });

            if (name) {
                parts = this.mesh.material.materials.filter(function (m) {
                    return m.name === name;
                });
            } else {
                parts = helpersAndJoints;
            }
            for (var i = 0; i < parts.length; i++) {
                // no point in rendering it at 0 opacity
                if (opacity === 0) {
                    parts[i].visible = false;
                } else {
                    parts[i].visible = true;
                }
                parts[i].opacity = opacity;
                parts[i].transparent = opacity < 1;
            }
            return parts.length;
        }

        /** Set this bodies texture map from a loaded skin material **/

    }, {
        key: 'setSkin',
        value: function setSkin() {
            var _this6 = this;

            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.config.defaultSkin;

            var base = this.config.baseUrl + 'skins/';
            if (!url.startsWith(base)) {
                url = this.config.baseUrl + 'skins/' + url;
            }
            return _Promise.resolve().then(function () {
                if (_this6._skinCache[url]) {
                    return _this6._skinCache[url];
                } else {
                    return new _Promise(function (resolve, reject) {
                        _this6.loader.load(url, resolve, undefined, reject);
                    }).then(function (text) {
                        var json = JSON.parse(text);
                        var texturePath = self.texturePath && typeof self.texturePath === "string" ? self.texturePath : THREE.Loader.prototype.extractUrlBase(url);
                        return new THREE.Loader().createMaterial(json, texturePath);
                    }).then(function (material) {
                        _this6._skinCache[url] = material;
                        material.name = url.split('/').slice(-1)[0].split('.')[0];
                        material.skinning = true;
                        return material;
                    });
                }
            }).then(function (material) {
                if (_this6.mesh && _this6.mesh.material.materials) {
                    return _this6.mesh.material.materials[0] = material;
                } else {
                    return false;
                }
            });
        }

        /**
         *  Calculate the position of specified named joint from the current
         *  state of the human mesh. If this skeleton contains no vertex mapping
         *  for that joint name, it falls back to looking for a vertex group in the
         *  human basemesh with that joint name.
         * @type {String} - bone name e.g. head
         */

    }, {
        key: 'getJointPosition',
        value: function getJointPosition(boneName) {
            var _this7 = this;

            var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            // TODO if inRest then get geom, else buffer geom
            if (boneName && boneName.indexOf('____head') === -1 && boneName.indexOf('____tail') === -1) {
                boneName += head ? '____head' : '____tail';
            }
            // let bone_id = _.findIndex(this.skeleton.bones, bone=>bone.name==boneName)
            var vertices = this.metadata.joint_pos_idxs[boneName];
            if (vertices) {
                var positions = vertices.map(function (vId) {
                    return _this7.mesh.geometry.vertices[vId].clone();
                });

                return new THREE.Vector3(_.mean(positions.map(function (v) {
                    return v.x;
                })), _.mean(positions.map(function (v) {
                    return v.y;
                })), _.mean(positions.map(function (v) {
                    return v.z;
                })));
            } else {
                return null;
            }
        }

        /**
         * We move bones towards the vertices they are weighted to, adjusting for
         * change in mesh size
         * See makehumans shared/skeleton.py:Skeleton:updateJointPositions
         */

    }, {
        key: 'updateJointPositions',
        value: function updateJointPositions() {
            var _this8 = this;

            var skeleton = this.skeleton;
            var self = this;
            var identity = new THREE.Matrix4().identity();

            // undo pose, while we do this
            var poseName = self._poseName;
            self.setPose();

            // get positions of reference vertices
            // first get positions of bones, as we don't want changes to propogate to the mesh then to the skeleton
            var positions = skeleton.bones.map(function (bone) {
                var vTail = _this8.getJointPosition(bone.name, false, true);
                var vHead = _this8.getJointPosition(bone.parent.name, false, true);
                if (vTail && vHead) {
                    return vTail.clone().sub(vHead);
                }
                if (vTail) {
                    return vTail;
                } else {
                    console.warn('couldn\'t update ' + bone.name + ' because no weights or group for ' + (vTail ? bone.name : bone.parent.name));
                    return null;
                }
            });

            // now update referenceMatrix

            var _loop = function _loop(i) {
                var boneInverse = new THREE.Matrix4();
                var bone = skeleton.bones[i];
                var parentIndex = _.findIndex(skeleton.bones, function (b) {
                    return b.name === bone.parent.name;
                });
                var parent = skeleton.bones[parentIndex];
                var position = positions[i];

                if (position) {
                    bone.position.set(position.x, position.y, position.z);
                    bone.updateMatrixWorld();

                    if (i > 0) {
                        boneInverse.getInverse(parent.matrixWorld).multiply(bone.matrixWorld);
                        // subtract parents
                        for (var j = 0; j < boneInverse.elements.length; j++) {
                            boneInverse.elements[j] = skeleton.boneInverses[parentIndex].elements[j] - boneInverse.elements[j] + identity.elements[j];
                        }
                    } else {
                        boneInverse.getInverse(bone.matrixWorld).multiply(self.matrixWorld);
                    }

                    // TODO make into test, it shouldn't change boneInverses on initial load with no pose
                    // let diffs =_.zipWith(
                    //     boneInverse.elements,
                    //     self.mesh.skeleton.boneInverses[i].elements,
                    //     (a,b)=>a-b
                    // )
                    // console.assert(
                    //     diffs.filter(d=>d>0.001) .length==0,'in pose position these should be equal '+bone.name+' '+diffs
                    // )
                    skeleton.boneInverses[i] = boneInverse;
                }
            };

            for (var i = 0; i < skeleton.bones.length; i++) {
                _loop(i);
            }
            // FIXME there should be a way of doing this without actually changing bone positions, the rePosing but it works for now
            self.setPose(poseName);
        }
    }, {
        key: 'setPose',
        value: function setPose(poseName) {
            var _this9 = this;

            var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            // TODO, load each from json like a proxy
            var pose = this.poses[poseName];
            var self = this;
            if (pose) {
                this._poseName = poseName;
                self._poseTweens.map(function (tween) {
                    return tween ? tween.stop() : '';
                });
                self._poseTweens = _Object$keys(pose).map(function (boneName) {
                    var bone = _this9.mesh.skeleton.bones.find(function (b) {
                        return b.name === boneName;
                    });
                    if (!bone) console.error('couldnt find bone', boneName);
                    // Tween the pose
                    var data = pose[bone.name];
                    if (!interval) {
                        var _bone$parent$quaterni;

                        // skip the tween at interval zero
                        // we apply the rotation to the one above it (the head), since it modifies the one after
                        (_bone$parent$quaterni = bone.parent.quaternion).set.apply(_bone$parent$quaterni, _toConsumableArray(data));
                        return null;
                    } else {
                        var _ret3 = function () {
                            var _ref2;

                            var qBefore = bone.parent.quaternion.clone();
                            var qAfter = (_ref2 = new THREE.Quaternion()).set.apply(_ref2, _toConsumableArray(data));
                            var t = 0;
                            return {
                                v: new TWEEN.Tween(t).to(1, interval).onUpdate(function (ti) {
                                    THREE.Quaternion.slerp(qBefore, qAfter, bone.parent.quaternion, ti);
                                }).start()
                            };
                        }();

                        if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
                    }
                });
            } else {
                this.mesh.pose();
                this._poseName = null;
            }
            // this.updateHeight()
        }
    }, {
        key: 'onElementsNeedUpdate',
        value: function onElementsNeedUpdate() {}
    }, {
        key: 'onBeforeRender',
        value: function onBeforeRender() {}
    }, {
        key: 'onAfterRender',
        value: function onAfterRender() {}
    }, {
        key: 'exportConfig',
        value: function exportConfig() {
            // consider doing bodyPartOpacity, consider using this.toJSON
            // also consifer exporting config althoug we might need to reload human then
            var json = {
                skin: this.mesh.material.materials[0].name,
                poseName: this._poseName
            };
            return json;
        }
    }, {
        key: 'importConfig',
        value: function importConfig(json) {
            if (json.skin) {
                this.setSkin(json.skin);
            }
            if (json.poseName) {
                this.setPose(json.poseName);
            }
        }
    }]);

    return BaseHuman;
}(THREE.Object3D);

/**
 * Extends BaseHuman to have targets and modifiers to manage them
 */


var Human = exports.Human = function (_BaseHuman) {
    _inherits(Human, _BaseHuman);

    function Human(config) {
        _classCallCheck(this, Human);

        // const
        // Store age in the age modifier instead
        var _this10 = _possibleConstructorReturn(this, (Human.__proto__ || _Object$getPrototypeOf(Human)).call(this, config));

        _this10.bodyZones = ['l-eye', 'r-eye', 'jaw', 'nose', 'mouth', 'head', 'neck', 'torso', 'hip', 'pelvis', 'r-upperarm', 'l-upperarm', 'r-lowerarm', 'l-lowerarm', 'l-hand', 'r-hand', 'r-upperleg', 'l-upperleg', 'r-lowerleg', 'l-lowerleg', 'l-foot', 'r-foot', 'ear'];

        // flags
        // this.hasWarpTargets = false // not used yet


        // a modular container for modifiers such as age, left-arm length etc
        _this10.modifiers = new Modifiers(_this10);

        // a modular object with human factors and their getters and setters,
        //  e.g. age, weight, ageInYears
        _this10.factors = new Factors(_this10);

        // holds loaded targets, target metadata, and target related methods
        _this10.targets = new Targets(_this10);

        _this10.proxies = new Proxies(_this10);
        _this10.add(_this10.proxies);

        _this10.ethnicSkinBlender = new EthnicSkinBlender(_this10);

        _this10.io = new HumanIO(_this10);

        // because three.js/core/object3d.js sets these in the constructor, preventing method override
        _this10.onBeforeRender = Human.prototype.onBeforeRender;
        _this10.onAfterRender = Human.prototype.onAfterRender;
        return _this10;
    }

    _createClass(Human, [{
        key: 'updateHeight',
        value: function updateHeight() {
            // TODO update position, by reading bone world position, or buffer geom?
            // let position = this.mesh.geometry._bufferGeometry.attributes.position.array
            // let ys=[]
            // for (let i=0;i<position.length;i+=3){
            //     ys.push(position[i])
            // }
            // let miny = _.min(ys)
            // this.position.y=miny
            //
            // Use joint ground, get face group that corresponds, then get vertices for the faces, then get mean y?
            // no the ground join is just between the feet, it doesn't seem to help us
        }
    }, {
        key: 'updateSkinColor',
        value: function updateSkinColor() {
            var defaultSkin = this._skinCache["data/skins/young_caucasian_female/young_caucasian_female.json"];
            if (defaultSkin) {
                return defaultSkin.color = this.ethnicSkinBlender.valueOf();
            } else {
                return false;
            }
        }

        /** Call when vertices/element change **/

    }, {
        key: 'onElementsNeedUpdate',
        value: function onElementsNeedUpdate() {
            _get(Human.prototype.__proto__ || _Object$getPrototypeOf(Human.prototype), 'onElementsNeedUpdate', this).call(this);
            this.updateJointPositions();
            this.proxies.onElementsNeedUpdate();
            this.updateSkinColor();
            this.mesh.geometry.computeVertexNormals();
        }

        /** Call before render **/

    }, {
        key: 'onBeforeRender',
        value: function onBeforeRender() {
            _get(Human.prototype.__proto__ || _Object$getPrototypeOf(Human.prototype), 'onBeforeRender', this).call(this);
            TWEEN.update();
            this.targets.applyTargets();
            if (this.mesh && this.mesh.geometry.elementsNeedUpdate) {
                this.onElementsNeedUpdate();
            }
        }

        /**
         * This should be called after render
         */

    }, {
        key: 'onAfterRender',
        value: function onAfterRender() {
            _get(Human.prototype.__proto__ || _Object$getPrototypeOf(Human.prototype), 'onAfterRender', this).call(this);
        }
    }, {
        key: 'exportConfig',
        value: function exportConfig() {
            // TODO, no need to export modifiers with default values or skin etc
            var json = _get(Human.prototype.__proto__ || _Object$getPrototypeOf(Human.prototype), 'exportConfig', this).call(this);
            json.proxies = this.proxies.exportConfig();
            json.modifiers = this.modifiers.exportConfig();
            return json;
        }
    }, {
        key: 'importConfig',
        value: function importConfig(json) {
            // json = _.defaults(json, { modifiers: [], proxies: [] })
            _get(Human.prototype.__proto__ || _Object$getPrototypeOf(Human.prototype), 'importConfig', this).call(this, json);
            if (json.proxies) this.proxies.importConfig(json.proxies);
            if (json.modifiers) this.modifiers.importConfig(json.modifiers);
        }
    }]);

    return Human;
}(BaseHuman);

// export var human = new Human();


exports.default = Human;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(92), __esModule: true };

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(93), __esModule: true };

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(94), __esModule: true };

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(95), __esModule: true };

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(96), __esModule: true };

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(98), __esModule: true };

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(99), __esModule: true };

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(101), __esModule: true };

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(104), __esModule: true };

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(106), __esModule: true };

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(107), __esModule: true };

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _assign = __webpack_require__(84);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";

exports.__esModule = true;

var _isIterable2 = __webpack_require__(82);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(81);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ },
/* 92 */
/***/ function(module, exports) {

// for a legacy code and future fixes
module.exports = function(){
  return Function.call.apply(Array.prototype.concat, arguments);
};

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(23);
__webpack_require__(132);
module.exports = __webpack_require__(0).Array.from;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(32);
__webpack_require__(23);
module.exports = __webpack_require__(130);

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(32);
__webpack_require__(23);
module.exports = __webpack_require__(131);

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

var core  = __webpack_require__(0)
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(134);
module.exports = __webpack_require__(0).Number.isFinite;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(135);
module.exports = __webpack_require__(0).Object.assign;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(136);
var $Object = __webpack_require__(0).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(137);
var $Object = __webpack_require__(0).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(138);
var $Object = __webpack_require__(0).Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(139);
module.exports = __webpack_require__(0).Object.getPrototypeOf;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(140);
module.exports = __webpack_require__(0).Object.keys;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(141);
module.exports = __webpack_require__(0).Object.setPrototypeOf;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(73);
__webpack_require__(23);
__webpack_require__(32);
__webpack_require__(142);
module.exports = __webpack_require__(0).Promise;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(143);
__webpack_require__(73);
__webpack_require__(144);
__webpack_require__(145);
module.exports = __webpack_require__(0).Symbol;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(23);
__webpack_require__(32);
module.exports = __webpack_require__(52).f('iterator');

/***/ },
/* 108 */
/***/ function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ },
/* 109 */
/***/ function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(7)
  , toLength  = __webpack_require__(49)
  , toIndex   = __webpack_require__(129);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var $defineProperty = __webpack_require__(5)
  , createDesc      = __webpack_require__(21);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(17)
  , gOPS    = __webpack_require__(44)
  , pIE     = __webpack_require__(29);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(13)
  , call        = __webpack_require__(65)
  , isArrayIter = __webpack_require__(64)
  , anObject    = __webpack_require__(4)
  , toLength    = __webpack_require__(49)
  , getIterFn   = __webpack_require__(53)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ },
/* 114 */
/***/ function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(20);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var create         = __webpack_require__(42)
  , descriptor     = __webpack_require__(21)
  , setToStringTag = __webpack_require__(30)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(10)(IteratorPrototype, __webpack_require__(1)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ },
/* 117 */
/***/ function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(17)
  , toIObject = __webpack_require__(7);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

var META     = __webpack_require__(31)('meta')
  , isObject = __webpack_require__(15)
  , has      = __webpack_require__(9)
  , setDesc  = __webpack_require__(5).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(14)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

var global    = __webpack_require__(2)
  , macrotask = __webpack_require__(72).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(20)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(17)
  , gOPS     = __webpack_require__(44)
  , pIE      = __webpack_require__(29)
  , toObject = __webpack_require__(22)
  , IObject  = __webpack_require__(63)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(14)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(5)
  , anObject = __webpack_require__(4)
  , getKeys  = __webpack_require__(17);

module.exports = __webpack_require__(6) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(7)
  , gOPN      = __webpack_require__(68).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

var hide = __webpack_require__(10);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(15)
  , anObject = __webpack_require__(4);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(13)(Function.call, __webpack_require__(43).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var global      = __webpack_require__(2)
  , core        = __webpack_require__(0)
  , dP          = __webpack_require__(5)
  , DESCRIPTORS = __webpack_require__(6)
  , SPECIES     = __webpack_require__(1)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(4)
  , aFunction = __webpack_require__(37)
  , SPECIES   = __webpack_require__(1)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(48)
  , defined   = __webpack_require__(39);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(48)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(4)
  , get      = __webpack_require__(53);
module.exports = __webpack_require__(0).getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(38)
  , ITERATOR  = __webpack_require__(1)('iterator')
  , Iterators = __webpack_require__(16);
module.exports = __webpack_require__(0).isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var ctx            = __webpack_require__(13)
  , $export        = __webpack_require__(3)
  , toObject       = __webpack_require__(22)
  , call           = __webpack_require__(65)
  , isArrayIter    = __webpack_require__(64)
  , toLength       = __webpack_require__(49)
  , createProperty = __webpack_require__(111)
  , getIterFn      = __webpack_require__(53);

$export($export.S + $export.F * !__webpack_require__(67)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var addToUnscopables = __webpack_require__(108)
  , step             = __webpack_require__(117)
  , Iterators        = __webpack_require__(16)
  , toIObject        = __webpack_require__(7);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(66)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export   = __webpack_require__(3)
  , _isFinite = __webpack_require__(2).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(3);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(121)});

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

var $export = __webpack_require__(3)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(42)});

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

var $export = __webpack_require__(3);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(6), 'Object', {defineProperty: __webpack_require__(5).f});

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = __webpack_require__(7)
  , $getOwnPropertyDescriptor = __webpack_require__(43).f;

__webpack_require__(45)('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(22)
  , $getPrototypeOf = __webpack_require__(69);

__webpack_require__(45)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(22)
  , $keys    = __webpack_require__(17);

__webpack_require__(45)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(3);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(125).set});

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
var LIBRARY            = __webpack_require__(28)
  , global             = __webpack_require__(2)
  , ctx                = __webpack_require__(13)
  , classof            = __webpack_require__(38)
  , $export            = __webpack_require__(3)
  , isObject           = __webpack_require__(15)
  , aFunction          = __webpack_require__(37)
  , anInstance         = __webpack_require__(109)
  , forOf              = __webpack_require__(113)
  , speciesConstructor = __webpack_require__(127)
  , task               = __webpack_require__(72).set
  , microtask          = __webpack_require__(120)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(1)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(124)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(30)($Promise, PROMISE);
__webpack_require__(126)(PROMISE);
Wrapper = __webpack_require__(0)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(67)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';
// ECMAScript 6 symbols shim
var global         = __webpack_require__(2)
  , has            = __webpack_require__(9)
  , DESCRIPTORS    = __webpack_require__(6)
  , $export        = __webpack_require__(3)
  , redefine       = __webpack_require__(71)
  , META           = __webpack_require__(119).KEY
  , $fails         = __webpack_require__(14)
  , shared         = __webpack_require__(47)
  , setToStringTag = __webpack_require__(30)
  , uid            = __webpack_require__(31)
  , wks            = __webpack_require__(1)
  , wksExt         = __webpack_require__(52)
  , wksDefine      = __webpack_require__(51)
  , keyOf          = __webpack_require__(118)
  , enumKeys       = __webpack_require__(112)
  , isArray        = __webpack_require__(115)
  , anObject       = __webpack_require__(4)
  , toIObject      = __webpack_require__(7)
  , toPrimitive    = __webpack_require__(50)
  , createDesc     = __webpack_require__(21)
  , _create        = __webpack_require__(42)
  , gOPNExt        = __webpack_require__(123)
  , $GOPD          = __webpack_require__(43)
  , $DP            = __webpack_require__(5)
  , $keys          = __webpack_require__(17)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(68).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(29).f  = $propertyIsEnumerable;
  __webpack_require__(44).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(28)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(51)('asyncIterator');

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

__webpack_require__(51)('observable');

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

(function (global, factory) {
   true ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.d3_random = {})));
}(this, function (exports) { 'use strict';

  function uniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;
    else max -= min;
    return function() {
      return Math.random() * max + min;
    };
  }

  function normal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function() {
      var y;

      // If available, use the second previously-generated uniform random.
      if (x != null) y = x, x = null;

      // Otherwise, generate a new x and y.
      else do {
        x = Math.random() * 2 - 1;
        y = Math.random() * 2 - 1;
        r = x * x + y * y;
      } while (!r || r > 1);

      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  function logNormal() {
    var randomNormal = normal.apply(this, arguments);
    return function() {
      return Math.exp(randomNormal());
    };
  }

  function irwinHall(n) {
    return function() {
      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
      return sum;
    };
  }

  function bates(n) {
    var randomIrwinHall = irwinHall(n);
    return function() {
      return randomIrwinHall() / n;
    };
  }

  function exponential(lambda) {
    return function() {
      return -Math.log(1 - Math.random()) / lambda;
    };
  }

  var version = "0.2.1";

  exports.version = version;
  exports.randomUniform = uniform;
  exports.randomNormal = normal;
  exports.randomLogNormal = logNormal;
  exports.randomBates = bates;
  exports.randomIrwinHall = irwinHall;
  exports.randomExponential = exponential;

}));

/***/ },
/* 147 */
/***/ function(module, exports) {

module.exports = [
	{
		"group": "measure",
		"modifiers": [
			{
				"target": "measure-neckcirc",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-neckheight",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-upperarm",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-upperarmlenght",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-lowerarmlenght",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-wrist",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-frontchest",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-bust",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-underbust",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-waist",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-napetowaist",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-waisttohip",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-shoulder",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-hips",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-upperlegheight",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-thighcirc",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-lowerlegheight",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-calf",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-kneecirc",
				"min": "decrease",
				"max": "increase"
			},
			{
				"target": "measure-ankle",
				"min": "decrease",
				"max": "increase"
			}
		]
	}
];

/***/ },
/* 148 */
/***/ function(module, exports) {

module.exports = [
	{
		"group": "head",
		"modifiers": [
			{
				"target": "head-age",
				"min": "less",
				"max": "more"
			},
			{
				"target": "head-angle",
				"min": "in",
				"max": "out"
			},
			{
				"target": "head",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "head-oval"
			},
			{
				"target": "head-round"
			},
			{
				"target": "head-rectangular"
			},
			{
				"target": "head-square"
			},
			{
				"target": "head-triangular"
			},
			{
				"target": "head-invertedtriangular"
			},
			{
				"target": "head-diamond"
			},
			{
				"target": "head-scale-depth",
				"min": "less",
				"max": "more"
			},
			{
				"target": "head-scale-horiz",
				"min": "less",
				"max": "more"
			},
			{
				"target": "head-scale-vert",
				"min": "less",
				"max": "more"
			},
			{
				"target": "head-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "head-trans",
				"min": "down",
				"max": "up"
			},
			{
				"target": "head-trans",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "head-back-scale-depth",
				"min": "less",
				"max": "more"
			}
		]
	},
	{
		"group": "forehead",
		"modifiers": [
			{
				"target": "forehead-trans-depth",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "forehead-scale-vert",
				"min": "less",
				"max": "more"
			},
			{
				"target": "forehead-nubian",
				"min": "less",
				"max": "more"
			},
			{
				"target": "forehead-temple",
				"min": "in",
				"max": "out"
			}
		]
	},
	{
		"group": "eyebrows",
		"modifiers": [
			{
				"target": "eyebrows-trans-depth",
				"min": "less",
				"max": "more"
			},
			{
				"target": "eyebrows-angle",
				"min": "up",
				"max": "down"
			},
			{
				"target": "eyebrows-trans-vert",
				"min": "less",
				"max": "more"
			}
		]
	},
	{
		"group": "neck",
		"modifiers": [
			{
				"target": "neck-double",
				"min": "less",
				"max": "more"
			},
			{
				"target": "neck-scale-depth",
				"min": "less",
				"max": "more"
			},
			{
				"target": "neck-scale-horiz",
				"min": "less",
				"max": "more"
			},
			{
				"target": "neck-scale-vert",
				"min": "less",
				"max": "more"
			},
			{
				"target": "neck-trans-horiz",
				"min": "in",
				"max": "out"
			},
			{
				"target": "neck-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "neck-trans-depth",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "neck-back-scale-depth",
				"min": "less",
				"max": "more"
			}
		]
	},
	{
		"group": "eyes",
		"modifiers": [
			{
				"target": "r-eye-bag",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-eye-bag",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-eye-bag-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-eye-eyefold-angle",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-eye-epicanthus",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-eye-eyefold",
				"min": "concave",
				"max": "convex"
			},
			{
				"target": "r-eye-eyefold",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-eye-height1",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-eye-height2",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-eye-height3",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-eye-push1",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-eye-push2",
				"min": "out",
				"max": "in"
			},
			{
				"target": "r-eye-move",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-eye-move",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-eye-size",
				"min": "small",
				"max": "big"
			},
			{
				"target": "r-eye-corner1",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-eye-corner2",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-eye-bag",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-eye-bag",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-eye-bag-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-eye-eyefold-angle",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-eye-epicanthus",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-eye-eyefold",
				"min": "concave",
				"max": "convex"
			},
			{
				"target": "l-eye-eyefold",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-eye-height1",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-eye-height2",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-eye-height3",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-eye-push1",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-eye-push2",
				"min": "out",
				"max": "in"
			},
			{
				"target": "l-eye-move",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-eye-move",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-eye-size",
				"min": "small",
				"max": "big"
			},
			{
				"target": "l-eye-corner1",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-eye-corner2",
				"min": "down",
				"max": "up"
			}
		]
	},
	{
		"group": "nose",
		"modifiers": [
			{
				"target": "nose-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "nose-trans-depth",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "nose-trans-horiz",
				"min": "in",
				"max": "out"
			},
			{
				"target": "nose-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "nose-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "nose-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "nose-nostril-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nose-point-width",
				"min": "less",
				"max": "more"
			},
			{
				"target": "nose-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nose-width1",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nose-width2",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nose-width3",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nose-compression",
				"min": "compress",
				"max": "uncompress"
			},
			{
				"target": "nose-curve",
				"min": "concave",
				"max": "convex"
			},
			{
				"target": "nose-greek",
				"min": "lessgreek",
				"max": "moregreek"
			},
			{
				"target": "nose-hump",
				"min": "lesshump",
				"max": "morehump"
			},
			{
				"target": "nose-volume",
				"min": "potato",
				"max": "point"
			},
			{
				"target": "nose-nostrils-angle",
				"min": "down",
				"max": "up"
			},
			{
				"target": "nose-point",
				"min": "down",
				"max": "up"
			},
			{
				"target": "nose-septumangle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "nose-flaring",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "mouth",
		"modifiers": [
			{
				"target": "mouth-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "mouth-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "mouth-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "mouth-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "mouth-trans",
				"min": "down",
				"max": "up"
			},
			{
				"target": "mouth-trans",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "mouth-lowerlip-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "mouth-lowerlip-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "mouth-upperlip-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "mouth-upperlip-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "mouth-cupidsbow-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "mouth-dimples",
				"min": "in",
				"max": "out"
			},
			{
				"target": "mouth-laugh-lines",
				"min": "in",
				"max": "out"
			},
			{
				"target": "mouth-lowerlip-ext",
				"min": "up",
				"max": "down"
			},
			{
				"target": "mouth-angles",
				"min": "down",
				"max": "up"
			},
			{
				"target": "mouth-lowerlip-middle",
				"min": "up",
				"max": "down"
			},
			{
				"target": "mouth-lowerlip-volume",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "mouth-philtrum-volume",
				"min": "increase",
				"max": "decrease"
			},
			{
				"target": "mouth-upperlip-volume",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "mouth-upperlip-ext",
				"min": "down",
				"max": "up"
			},
			{
				"target": "mouth-upperlip-middle",
				"min": "down",
				"max": "up"
			},
			{
				"target": "mouth-cupidsbow",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "ears",
		"modifiers": [
			{
				"target": "r-ear-trans-depth",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "r-ear-size",
				"min": "small",
				"max": "big"
			},
			{
				"target": "r-ear-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-ear-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-ear-lobe",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-ear-shape1",
				"min": "pointed",
				"max": "triangle"
			},
			{
				"target": "r-ear-rot",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "r-ear-shape2",
				"min": "square",
				"max": "round"
			},
			{
				"target": "r-ear-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "r-ear-wing",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-ear-flap",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-ear-trans-depth",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "l-ear-size",
				"min": "small",
				"max": "big"
			},
			{
				"target": "l-ear-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "l-ear-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-ear-lobe",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-ear-shape1",
				"min": "pointed",
				"max": "triangle"
			},
			{
				"target": "l-ear-rot",
				"min": "backward",
				"max": "forward"
			},
			{
				"target": "l-ear-shape2",
				"min": "square",
				"max": "round"
			},
			{
				"target": "l-ear-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "l-ear-wing",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-ear-flap",
				"min": "in",
				"max": "out"
			}
		]
	},
	{
		"group": "chin",
		"modifiers": [
			{
				"target": "chin-jaw-drop",
				"min": "less",
				"max": "more"
			},
			{
				"target": "chin-cleft",
				"min": "in",
				"max": "out"
			},
			{
				"target": "chin-prominent",
				"min": "less",
				"max": "more"
			},
			{
				"target": "chin-width",
				"min": "min",
				"max": "max"
			},
			{
				"target": "chin-height",
				"min": "min",
				"max": "max"
			},
			{
				"target": "chin-bones",
				"min": "in",
				"max": "out"
			},
			{
				"target": "chin-prognathism",
				"min": "less",
				"max": "more"
			}
		]
	},
	{
		"group": "cheek",
		"modifiers": [
			{
				"target": "l-cheek-volume",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "l-cheek-bones",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-cheek-inner",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "l-cheek-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "r-cheek-volume",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "r-cheek-bones",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-cheek-inner",
				"min": "deflate",
				"max": "inflate"
			},
			{
				"target": "r-cheek-trans-vert",
				"min": "down",
				"max": "up"
			}
		]
	},
	{
		"group": "torso",
		"modifiers": [
			{
				"target": "torso-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "torso-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "torso-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "torso-trans-horiz",
				"min": "in",
				"max": "out"
			},
			{
				"target": "torso-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "torso-trans-depth",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "torso-vshape",
				"min": "less",
				"max": "more"
			},
			{
				"target": "torso-muscle-dorsi",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "torso-muscle-pectoral",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "hip",
		"modifiers": [
			{
				"target": "hip-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "hip-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "hip-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "hip-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "hip-trans",
				"min": "down",
				"max": "up"
			},
			{
				"target": "hip-trans",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "hip-waist",
				"min": "down",
				"max": "up"
			}
		]
	},
	{
		"group": "stomach",
		"modifiers": [
			{
				"target": "stomach-navel",
				"min": "in",
				"max": "out"
			},
			{
				"target": "stomach-tone",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "stomach-pregnant",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "stomach-navel",
				"min": "down",
				"max": "up"
			}
		]
	},
	{
		"group": "buttocks",
		"modifiers": [
			{
				"target": "buttocks-volume",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "pelvis",
		"modifiers": [
			{
				"target": "pelvis-tone",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "bulge",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "armslegs",
		"modifiers": [
			{
				"target": "r-hand-fingers-distance",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-hand-fingers-diameter",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-hand-fingers-length",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-hand-scale",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-hand-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-hand-fingers-distance",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-hand-fingers-diameter",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-hand-fingers-length",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-hand-scale",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-hand-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-foot-scale",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-foot-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "r-foot-trans",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "l-foot-scale",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-foot-trans",
				"min": "in",
				"max": "out"
			},
			{
				"target": "l-foot-trans",
				"min": "forward",
				"max": "backward"
			},
			{
				"target": "r-lowerarm-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-lowerarm-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-lowerarm-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-lowerarm",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "r-lowerarm-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperarm-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperarm-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperarm-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperarm",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "r-upperarm-shoulder-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperarm-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerarm-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerarm-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerarm-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerarm",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "l-lowerarm-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperarm-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperarm-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperarm-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperarm",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "l-upperarm-shoulder-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperarm-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-leg-genu",
				"min": "varun",
				"max": "valgus"
			},
			{
				"target": "r-lowerleg-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-lowerleg-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-lowerleg",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "r-lowerleg-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperleg-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperleg-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperleg-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "r-upperleg",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "r-upperleg-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-leg-genu",
				"min": "varun",
				"max": "valgus"
			},
			{
				"target": "l-lowerleg-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerleg-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-lowerleg",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "l-lowerleg-muscle",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperleg-scale-depth",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperleg-scale-horiz",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperleg-scale-vert",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "l-upperleg",
				"min": "skinny",
				"max": "fat"
			},
			{
				"target": "l-upperleg-muscle",
				"min": "decr",
				"max": "incr"
			}
		]
	},
	{
		"group": "breast",
		"modifiers": [
			{
				"macrovar": "BreastSize"
			},
			{
				"macrovar": "BreastFirmness"
			},
			{
				"target": "breast-trans-vert",
				"min": "down",
				"max": "up"
			},
			{
				"target": "breast-dist",
				"min": "min",
				"max": "max"
			},
			{
				"target": "breast-point",
				"min": "min",
				"max": "max"
			},
			{
				"target": "breast-volume-vert",
				"min": "up",
				"max": "down"
			},
			{
				"target": "nipple-size",
				"min": "min",
				"max": "max"
			},
			{
				"target": "nipple-point",
				"min": "in",
				"max": "out"
			}
		]
	},
	{
		"group": "genitals",
		"modifiers": [
			{
				"target": "penis-length",
				"min": "min",
				"max": "max"
			},
			{
				"target": "penis-circ",
				"min": "min",
				"max": "max"
			},
			{
				"target": "penis-testicles",
				"min": "min",
				"max": "max"
			}
		]
	},
	{
		"group": "macrodetails",
		"modifiers": [
			{
				"macrovar": "Gender"
			},
			{
				"macrovar": "Age"
			},
			{
				"macrovar": "African",
				"modifierType": "EthnicModifier"
			},
			{
				"macrovar": "Asian",
				"modifierType": "EthnicModifier"
			},
			{
				"macrovar": "Caucasian",
				"modifierType": "EthnicModifier"
			}
		]
	},
	{
		"group": "macrodetails-universal",
		"modifiers": [
			{
				"macrovar": "Muscle"
			},
			{
				"macrovar": "Weight"
			}
		]
	},
	{
		"group": "macrodetails-height",
		"modifiers": [
			{
				"macrovar": "Height"
			}
		]
	},
	{
		"group": "macrodetails-proportions",
		"modifiers": [
			{
				"macrovar": "BodyProportions"
			}
		]
	},
	{
		"group": "legs",
		"modifiers": [
			{
				"target": "legs-upperlegheight",
				"min": "decr",
				"max": "incr"
			},
			{
				"target": "legs-lowerlegheight",
				"min": "decr",
				"max": "incr"
			}
		]
	}
];

/***/ },
/* 149 */
/***/ function(module, exports) {

module.exports = {
	"prostrate01": {
		"toe1-1.L": [
			-0.29499774533072065,
			-0.03172229732792842,
			0.01797936976071046,
			0.9548019524304702
		],
		"finger5-2.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger1-3.R": [
			-3.490658428972883e-8,
			5.551115123125783e-16,
			2.617994002055379e-8,
			0.9999999999999992
		],
		"toe5-2.R": [
			-0.03706738171818843,
			0.0031343045377925094,
			-0.0005620298652676036,
			0.9993076950919831
		],
		"toe4-2.R": [
			-0.1143178899910936,
			0.009666383274839485,
			-0.0017332869161141543,
			0.9933956798672088
		],
		"clavicle.R": [
			0.03204164465819385,
			-0.014961486478580643,
			-0.15595924837815248,
			0.9871302851069207
		],
		"neck03": [
			-0.11552073229011453,
			0,
			0,
			0.9933050691560754
		],
		"neck02": [
			0.044943657131892814,
			-2.220446049250313e-16,
			0,
			0.998989523310235
		],
		"neck01": [
			0.12930333356886187,
			0,
			0,
			0.9916050866791575
		],
		"clavicle.L": [
			0.032041719940525834,
			0.014961486475039698,
			0.1559592339899432,
			0.9871302849365835
		],
		"toe5-2.L": [
			-0.03706738171818843,
			-0.0031343045377925094,
			0.0005620298652676036,
			0.9993076950919831
		],
		"toe4-2.L": [
			-0.1143178899910936,
			-0.009666383274839485,
			0.0017332869161141543,
			0.9933956798672088
		],
		"finger5-2.L": [
			-1.7453292144864443e-8,
			-8.726645850387627e-9,
			2.6179939993653534e-8,
			0.9999999999999996
		],
		"finger1-3.L": [
			-3.490658428972883e-8,
			-2.6179939993653534e-8,
			1.0341496537059884e-15,
			0.9999999999999992
		],
		"toe1-1.R": [
			-0.2949977453401389,
			0.031722300205699994,
			-0.017979361158030855,
			0.9548019524939418
		],
		"oculi02.L": [
			6.108652428338209e-8,
			1.7453292144864463e-8,
			1.0899510809257394e-15,
			0.999999999999998
		],
		"oculi01.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"jaw": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.R": [
			0.015732285617544528,
			-0.00706724428977723,
			-0.006506433802424136,
			0.9998300933491507
		],
		"oculi01.R": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"oculi02.R": [
			6.108652428338209e-8,
			-1.7453292144864463e-8,
			-1.0899510809257394e-15,
			0.999999999999998
		],
		"wrist.R": [
			0.06400553839013624,
			-0.024220143408116068,
			-0.28765421138015235,
			0.9552862033882525
		],
		"finger1-1.L": [
			0.1349781321525207,
			0.10467216212537855,
			-0.006602531691843082,
			0.9852822178908299
		],
		"tongue07.R": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"eye.R": [
			2.6179939993653527e-8,
			8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"finger2-1.R": [
			0.028308513634310594,
			-0.028187836457087,
			-0.015943138376584256,
			0.9990745168756883
		],
		"finger4-3.R": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"finger2-1.L": [
			0.028308506194191178,
			0.028187829016840138,
			0.015943146294900488,
			0.9990745171700611
		],
		"eye.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue07.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"wrist.L": [
			0.0640055284288696,
			0.024220140092584774,
			0.2876540964116988,
			0.9552862387588374
		],
		"finger5-3.R": [
			-1.7453291256686047e-8,
			-1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"lowerleg01.R": [
			0.7166949451773923,
			-0.06633687820718592,
			-0.0032580251527054354,
			0.694216939737863
		],
		"lowerarm02.L": [
			0.08508380075378742,
			-0.1357936179820335,
			0.17466177589096785,
			0.9715009543007422
		],
		"oris07.L": [
			3.490658428972884e-8,
			8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"oris07.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"tongue00": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"lowerarm02.R": [
			0.08508381706092867,
			0.13579363848663917,
			-0.17466184172752494,
			0.971500938170031
		],
		"lowerleg01.L": [
			0.7166949455805202,
			0.06633688347880518,
			0.003258019891344989,
			0.6942169388426374
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			0.13497814552597495,
			-0.10467222776788909,
			0.0066025373069097965,
			0.9852822090475328
		],
		"metacarpal4.L": [
			-0.04516756093027485,
			-0.0810048378732896,
			-0.057377884921852855,
			0.9940351533032552
		],
		"finger1-2.R": [
			-0.015187814265390795,
			-0.05356212701076479,
			-0.018012887788977777,
			0.9982865143441657
		],
		"pelvis.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			-0.2949978399405706,
			0.0317223060518701,
			-0.017979365907488228,
			0.9548019229823083
		],
		"toe2-3.L": [
			-0.11599794025945076,
			-0.012473663755221964,
			0.007069780683113835,
			0.9931459629728048
		],
		"toe5-3.L": [
			-0.08292846884837331,
			-0.007012190115463834,
			0.0012573534748786391,
			0.9965300383362697
		],
		"levator05.L": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"finger4-1.L": [
			-0.10255970812727973,
			-0.059834654629546846,
			-0.03641743002350784,
			0.9922575729943778
		],
		"finger4-1.R": [
			-0.10255974824221942,
			0.059834622652964686,
			0.03641744180692374,
			0.9922575703438645
		],
		"levator05.R": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe5-3.R": [
			-0.08292852256323847,
			0.007012189147140413,
			-0.0012573625983585794,
			0.9965300338615681
		],
		"toe2-3.R": [
			-0.11599794024247184,
			0.01247367310957026,
			-0.007069781606310259,
			0.9931459628507273
		],
		"finger4-2.L": [
			0.01573231168340105,
			0.007067218444694157,
			0.006506416337947747,
			0.9998300932353397
		],
		"toe2-1.L": [
			-0.2949978083746944,
			-0.03172230633684703,
			0.017979365092588667,
			0.9548019327408516
		],
		"finger1-2.L": [
			-0.015187823542814347,
			0.05356219148644703,
			0.01801288582711218,
			0.9982865107790353
		],
		"pelvis.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			-0.04516760818921233,
			0.0810047703299348,
			0.057377890803834965,
			0.9940351563205219
		],
		"tongue04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-0.11599787564913742,
			-0.012473657256240944,
			0.007069769912566891,
			0.9931459706774857
		],
		"levator03.R": [
			4.363322858580418e-8,
			-1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"upperleg02.R": [
			-0.10398265005424727,
			0.0071837524874875935,
			0.05562667827049113,
			0.9929963116006454
		],
		"upperleg02.L": [
			-0.10398262828971205,
			-0.007183751596019583,
			-0.05562667843175134,
			0.9929963138771571
		],
		"levator03.L": [
			4.363322858580418e-8,
			1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"toe3-2.R": [
			-0.1159979152508569,
			0.012473664723742561,
			-0.007069771386237191,
			0.9931459659477859
		],
		"metacarpal3.L": [
			-0.01756449570839344,
			-0.0790886585888555,
			-0.06137902079062131,
			0.9948211338627205
		],
		"tongue01": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"breast.L": [
			-0.026177208749308917,
			-1.74473110403639e-8,
			4.5687851198921377e-10,
			0.9996573181556244
		],
		"temporalis02.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"tongue02": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris04.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"oris04.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"temporalis02.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"breast.R": [
			-0.026177182716939085,
			8.495216974324649e-9,
			-8.952094564399027e-9,
			0.9996573188373126
		],
		"oris03.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"oris06.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"orbicularis04.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-2.R": [
			-0.11599790802544833,
			0.012473683482217779,
			-0.007069765506755096,
			0.9931459665979541
		],
		"toe1-2.L": [
			-0.11599790803975064,
			-0.012473675052520283,
			0.007069764583395732,
			0.9931459667087316
		],
		"orbicularis04.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"metacarpal3.R": [
			-0.017564502680441376,
			0.07908866602003228,
			0.0613789985255821,
			0.994821134522562
		],
		"oris06.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"levator04.L": [
			4.3633228585804185e-8,
			-3.3306690738754696e-16,
			8.726646077118623e-9,
			0.9999999999999991
		],
		"tongue06.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-2.L": [
			-0.11599783622458781,
			-0.012473655989525212,
			0.0070697781767240404,
			0.9931459752392902
		],
		"toe2-2.R": [
			-0.11599786844551845,
			0.012473655862139,
			-0.007069778641816437,
			0.9931459714742261
		],
		"tongue06.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"levator04.R": [
			4.3633228585804185e-8,
			4.440892098500626e-16,
			-8.72664605333848e-9,
			0.999999999999999
		],
		"toe4-1.L": [
			-2.6179939993653497e-8,
			8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"upperleg01.R": [
			0.21644123826846876,
			-4.742174541938482e-9,
			-1.8928379176903024e-8,
			0.9762956470131432
		],
		"metacarpal1.R": [
			0.019117941257869673,
			0.042926649284844576,
			0.05910105466832126,
			0.9971453617403678
		],
		"levator02.R": [
			-2.6179939993653507e-8,
			8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"toe3-1.L": [
			-0.22198919496384387,
			-0.02655563350773371,
			0.01632307318983887,
			0.9745507441534005
		],
		"toe3-1.R": [
			-0.22198917523796635,
			0.026555642912187594,
			-0.016323074049041698,
			0.974550748376029
		],
		"levator02.L": [
			-2.6179939993653477e-8,
			-8.726645517320719e-9,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"finger5-1.R": [
			-0.14674661292921298,
			0.05520795829469494,
			0.025195095906469855,
			0.9873108528102985
		],
		"metacarpal1.L": [
			0.019117948769646283,
			-0.04292664189677309,
			-0.059101056533401336,
			0.9971453618038564
		],
		"toe4-1.R": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"upperleg01.L": [
			0.21644123826846876,
			4.742174541938482e-9,
			1.8928379176903024e-8,
			0.9762956470131432
		],
		"head": [
			-0.028178816161959566,
			1.1102230246251565e-16,
			2.465190328815662e-32,
			0.9996028983149812
		],
		"toe5-1.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"special01": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"temporalis01.L": [
			8.726646072432222e-9,
			2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"special04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			0.006193448323233974,
			-0.05147844978485061,
			-0.05882182802416405,
			0.9969210615457533
		],
		"metacarpal2.R": [
			0.006193403896560818,
			0.05147846277642332,
			0.058821826151972255,
			0.9969210612613709
		],
		"temporalis01.R": [
			8.726646072432225e-9,
			-3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"toe5-1.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"risorius02.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"special05.L": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"finger2-2.L": [
			0.029563637937978834,
			0.02297340003376669,
			0.02392771428221667,
			0.9990123516213347
		],
		"foot.L": [
			-0.043428718569395314,
			-0.004077285413601972,
			-0.00006872775307644499,
			0.9990482057556446
		],
		"oris06": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"levator06.R": [
			-1.7453292144864446e-8,
			-3.490658440075123e-8,
			-8.726645628343005e-9,
			0.9999999999999993
		],
		"orbicularis03.R": [
			-3.490658428972884e-8,
			8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"levator06.L": [
			-4.363322858580408e-8,
			8.726646849588349e-9,
			1.745329214486511e-8,
			0.9999999999999989
		],
		"orbicularis03.L": [
			-3.490658428972884e-8,
			-8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"foot.R": [
			-0.043428725984940034,
			0.004077285412388054,
			0.00006872772032133509,
			0.9990482054332971
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			0.02956365653796329,
			-0.022973353461816948,
			-0.02392775804092456,
			0.9990123510937983
		],
		"risorius02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"special05.R": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"lowerleg02.L": [
			0.04342875194535515,
			0.004077251150268024,
			0.00006871547424154348,
			0.999048204445466
		],
		"tongue05.L": [
			-3.4906584289728866e-8,
			5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"finger5-1.L": [
			-0.14674659883596308,
			-0.05520794725879763,
			-0.025195108903441083,
			0.9873108551904464
		],
		"toe4-3.R": [
			-0.06784601680709149,
			0.005736854848391815,
			-0.0010286641754143453,
			0.9976787801441278
		],
		"oris03.L": [
			-4.3633228585804185e-8,
			-4.440892098500626e-16,
			-8.72664605333848e-9,
			0.999999999999999
		],
		"toe4-3.L": [
			-0.0678460315374449,
			-0.005736854844715533,
			0.0010286642894839773,
			0.9976787791423101
		],
		"finger3-3.L": [
			4.363322858580416e-8,
			-2.617994021569814e-8,
			-1.1643607064032247e-15,
			0.9999999999999988
		],
		"tongue05.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerleg02.R": [
			0.04342875194535515,
			-0.004077251150268024,
			-0.00006871547424154348,
			0.999048204445466
		],
		"shoulder01.R": [
			-0.3664830863696703,
			0.26130929205821163,
			0.14912635356839082,
			0.8804367847610598
		],
		"finger3-1.L": [
			-0.07438011407141384,
			-0.04671589450711289,
			-0.03309538757878276,
			0.9955852144101648
		],
		"special06.R": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"finger4-3.L": [
			-2.6179940881831887e-8,
			1.7453293255087488e-8,
			2.6179939105475074e-8,
			0.9999999999999993
		],
		"finger3-2.L": [
			0.03375351859805419,
			0.017898673966612044,
			0.017252437775142127,
			0.9991209590651688
		],
		"upperarm01.R": [
			-0.3845348745455427,
			0.011315452313193863,
			-0.03384392222636605,
			0.9224204462854931
		],
		"finger3-2.R": [
			0.033753516683231996,
			-0.01789873450667645,
			-0.017252439601719367,
			0.9991209580137751
		],
		"upperarm01.L": [
			-0.38453494253410936,
			-0.011315480727112637,
			0.0338439180551965,
			0.9224204177471775
		],
		"special06.L": [
			-2.6179939993653504e-8,
			-1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"finger3-1.R": [
			-0.07438009934589401,
			0.04671589634986861,
			0.03309539981187958,
			0.9955852150171852
		],
		"shoulder01.L": [
			-0.36648306408440123,
			-0.26130922634410014,
			-0.14912634615904422,
			0.8804368147959339
		],
		"lowerarm01.R": [
			-0.43068614338631345,
			0.4079350956870491,
			-0.14301349301063687,
			0.7922408373838844
		],
		"special03": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"upperarm02.L": [
			-0.10658079053352863,
			-0.023735194458893938,
			0.023732945868874412,
			0.9937373510710115
		],
		"spine02": [
			0.08718154396051105,
			0,
			0,
			0.9961924404414347
		],
		"spine03": [
			0.21875185244033352,
			0,
			0,
			0.9757805219689121
		],
		"spine01": [
			0.17306662070378664,
			-1.1102230246251565e-16,
			0,
			0.9849101201623283
		],
		"upperarm02.R": [
			-0.10658081225396246,
			0.023735202862642413,
			-0.023732947694942635,
			0.9937373484971089
		],
		"spine04": [
			0.04604637036261979,
			0,
			0,
			0.9989393033495221
		],
		"spine05": [
			0.6262940132675567,
			0,
			0,
			0.7795869476493417
		],
		"lowerarm01.L": [
			-0.43068612973593695,
			-0.40793511834480456,
			0.1430135251476026,
			0.792240827336578
		],
		"finger5-3.L": [
			9.138523059687561e-16,
			3.4906584289728926e-8,
			-2.6179939993653487e-8,
			0.999999999999999
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			0,
			0,
			0,
			1
		],
		"oris05": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"risorius03.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"finger2-3.L": [
			3.490658428972884e-8,
			-2.6179941325921163e-8,
			1.7453291256685967e-8,
			0.999999999999999
		],
		"toe3-3.R": [
			0.04290465742039351,
			0.003412745661475758,
			0.0013472097665151739,
			0.9990724340930106
		],
		"finger3-3.R": [
			2.6179939993653497e-8,
			8.72664507323151e-9,
			2.617993999365348e-8,
			0.9999999999999993
		],
		"finger2-3.R": [
			8.72664784878902e-9,
			4.363322858580432e-8,
			-4.3633228585804146e-8,
			0.999999999999998
		],
		"toe3-3.L": [
			0.042904694502099924,
			-0.0034127456555700375,
			-0.0013472098785195128,
			0.9990724325004244
		],
		"risorius03.L": [
			2.617993999365348e-8,
			-1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		]
	},
	"Harvey_StandingFashion1": {
		"toe1-1.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger5-2.R": [
			8.726645628343012e-9,
			-1.745329203384216e-8,
			-3.4906584289728866e-8,
			0.9999999999999993
		],
		"finger1-3.R": [
			-8.726645184253789e-9,
			-3.490658440075123e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"toe5-2.R": [
			-4.363322858580417e-8,
			8.726645628343022e-9,
			-8.726646516520993e-9,
			0.999999999999999
		],
		"toe4-2.R": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"clavicle.R": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"neck03": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0.09946983629352446,
			8.683366581330176e-9,
			8.680380769339109e-10,
			0.995040577900087
		],
		"clavicle.L": [
			0.06526797657843562,
			0.1255205022008652,
			0.19122878337764304,
			0.9712961686161985
		],
		"toe5-2.L": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"toe4-2.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger5-2.L": [
			1.745329214486444e-8,
			3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"finger1-3.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"toe1-1.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oculi02.L": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"oculi01.L": [
			1.7453292144864453e-8,
			-2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"jaw": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger4-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"oculi01.R": [
			-3.4906582513371954e-8,
			4.363322680944748e-8,
			-2.6179941770010287e-8,
			0.9999999999999979
		],
		"oculi02.R": [
			8.72664651652143e-9,
			4.363322880784892e-8,
			-8.726645628342965e-9,
			0.9999999999999992
		],
		"wrist.R": [
			0.05268757581180192,
			0.05794055323202163,
			0.06134941174429749,
			0.9950392762724853
		],
		"finger1-1.L": [
			7.615435000746988e-16,
			-4.363322858580432e-8,
			1.7453292144864436e-8,
			0.9999999999999989
		],
		"tongue07.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"eye.R": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"finger2-1.R": [
			0.07319614758140085,
			0.045995571627625464,
			0.049220150501468565,
			0.9950397520473753
		],
		"finger4-3.R": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger2-1.L": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"eye.L": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"tongue07.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"wrist.L": [
			-0.4000482643729639,
			0.18990065083536334,
			0.2992199616136811,
			0.8452020726171888
		],
		"finger5-3.R": [
			8.726646516521435e-9,
			-1.7453292366909068e-8,
			3.49065842897289e-8,
			0.9999999999999992
		],
		"lowerleg01.R": [
			0.8819526355185332,
			-0.0703827655611835,
			0.01871252525089698,
			0.46567763142823115
		],
		"lowerarm02.L": [
			2.617993999365347e-8,
			-2.6179940437742744e-8,
			8.726645184253845e-9,
			0.9999999999999996
		],
		"oris07.L": [
			3.490658251337198e-8,
			3.490658262439439e-8,
			4.3633230362160965e-8,
			0.9999999999999979
		],
		"oris07.R": [
			1.7453292144864443e-8,
			6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"tongue00": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"lowerarm02.R": [
			2.617993910547503e-8,
			2.6179939216497417e-8,
			3.490658428972883e-8,
			0.9999999999999989
		],
		"lowerleg01.L": [
			0,
			0,
			0,
			1
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.0694590922785238,
			-0.0006771940796062026,
			-0.071198513665488,
			0.9950405758359042
		],
		"metacarpal4.L": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"finger1-2.R": [
			-8.726646516521403e-9,
			-6.981316880150246e-8,
			-8.726645628343002e-9,
			0.9999999999999976
		],
		"pelvis.R": [
			-0.19431966054273475,
			-0.02305652529236668,
			-0.012095890810798832,
			0.9805926552822493
		],
		"toe2-1.R": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe2-3.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-3.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator05.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger4-1.L": [
			-8.72664474016463e-9,
			2.617993888343051e-8,
			-5.235987998730668e-8,
			0.9999999999999984
		],
		"finger4-1.R": [
			0.046745797981063125,
			0.02616865376105093,
			0.08381487877759494,
			0.995040249450717
		],
		"levator05.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe5-3.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.L": [
			-3.4906584289728906e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999994
		],
		"toe2-1.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger1-2.L": [
			-1.7453292144864436e-8,
			4.363322869682662e-8,
			-6.702088926697263e-16,
			0.9999999999999991
		],
		"pelvis.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			-8.72664518425384e-9,
			-1.7453291367708346e-8,
			5.235987998730672e-8,
			0.9999999999999986
		],
		"tongue04": [
			-2.6179939993653497e-8,
			-8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"toe3-2.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"levator03.R": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"upperleg02.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperleg02.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"levator03.L": [
			1.745328948032921e-8,
			-6.108652406133785e-8,
			-4.3633230362160945e-8,
			0.9999999999999969
		],
		"toe3-2.R": [
			-2.6179939993653497e-8,
			-8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"metacarpal3.L": [
			-3.490658428972881e-8,
			-1.745329158975295e-8,
			1.7453293033042366e-8,
			0.9999999999999991
		],
		"tongue01": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"breast.L": [
			0,
			0,
			0,
			1
		],
		"temporalis02.R": [
			0,
			0,
			0,
			1
		],
		"tongue02": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"oris04.R": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"oris04.L": [
			-8.726646960610684e-9,
			-1.7453293255087488e-8,
			-6.108652428338172e-8,
			0.999999999999998
		],
		"temporalis02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"breast.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"oris03.R": [
			3.807717500373487e-16,
			8.726646183454534e-9,
			-4.36332285858042e-8,
			0.999999999999999
		],
		"oris06.L": [
			-1.7453292144864443e-8,
			2.220446049250313e-16,
			2.6179940054284205e-8,
			0.9999999999999996
		],
		"orbicularis04.R": [
			8.726646516521438e-9,
			3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"toe1-2.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe1-2.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"orbicularis04.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.R": [
			8.72664607243222e-9,
			-2.220446049250313e-16,
			4.3633228492591465e-8,
			0.999999999999999
		],
		"oris06.R": [
			-3.490658428972882e-8,
			-2.6179939549564324e-8,
			2.617994088183189e-8,
			0.9999999999999989
		],
		"levator04.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"tongue06.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"toe2-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-2.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"tongue06.R": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"levator04.R": [
			-3.8077175003734897e-16,
			4.363322858580432e-8,
			8.726646072432225e-9,
			0.999999999999999
		],
		"toe4-1.L": [
			0,
			0,
			0,
			1
		],
		"upperleg01.R": [
			-0.29549656079357217,
			-0.07474613298621469,
			0.12718807757046902,
			0.943884522114176
		],
		"metacarpal1.R": [
			8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"levator02.R": [
			2.617993999365347e-8,
			1.745329247793137e-8,
			-8.726645628343018e-9,
			0.9999999999999994
		],
		"toe3-1.L": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"toe3-1.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"levator02.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"finger5-1.R": [
			0.025827150095404733,
			0.023013963786825298,
			0.09326338910830287,
			0.9950403288514497
		],
		"metacarpal1.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe4-1.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"upperleg01.L": [
			0.0007085417664518905,
			-0.015130137271207378,
			-0.047568740554872216,
			0.9987531185617109
		],
		"head": [
			-0.0989816870399504,
			-0.005177688321898577,
			-0.09884712041556619,
			0.9901540607198037
		],
		"toe5-1.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"special01": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"temporalis01.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"special04": [
			-6.108652428338212e-8,
			1.7453293033042883e-8,
			8.726645184253815e-9,
			0.9999999999999981
		],
		"metacarpal2.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal2.R": [
			2.617993910547522e-8,
			3.4906582846438994e-8,
			3.4906586066085765e-8,
			0.9999999999999987
		],
		"temporalis01.R": [
			1.7453291256686083e-8,
			2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"risorius02.R": [
			-1.745329214486445e-8,
			8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"special05.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger2-2.L": [
			8.726647404699818e-9,
			-3.490658451177353e-8,
			4.363322858580417e-8,
			0.9999999999999984
		],
		"foot.L": [
			0.005566696163229298,
			-0.046411994101164145,
			0.08781014718922477,
			0.9950398568640288
		],
		"oris06": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"levator06.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"orbicularis03.R": [
			3.4906584289728807e-8,
			2.6179939993653534e-8,
			8.72664696061079e-9,
			0.999999999999999
		],
		"levator06.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"orbicularis03.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"foot.R": [
			0.18856843282214222,
			-0.10149960783489631,
			-0.04165796314669926,
			0.9759120810087508
		],
		"root": [
			-2.2659934238242162e-8,
			0.0010514256631327656,
			-0.04990920797540352,
			0.9987532054833879
		],
		"finger2-2.R": [
			-9.138523059687563e-16,
			-5.235988009832937e-8,
			-1.745329214486443e-8,
			0.9999999999999987
		],
		"risorius02.L": [
			8.726644740164589e-9,
			-4.363322858580432e-8,
			-2.617993999365346e-8,
			0.9999999999999987
		],
		"special05.R": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"lowerleg02.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"tongue05.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"finger5-1.L": [
			-2.617993910547503e-8,
			-2.6179939216497417e-8,
			3.490658428972883e-8,
			0.9999999999999989
		],
		"toe4-3.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"oris03.L": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"toe4-3.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-3.L": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue05.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"lowerleg02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"shoulder01.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-1.L": [
			-1.7453291256686053e-8,
			2.617993988263123e-8,
			-1.745329303304289e-8,
			0.9999999999999994
		],
		"special06.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"finger4-3.L": [
			2.617994088183186e-8,
			2.617994077080965e-8,
			-4.36332285858042e-8,
			0.9999999999999984
		],
		"finger3-2.L": [
			2.6179940881831864e-8,
			3.490658440075123e-8,
			-2.6179939105475068e-8,
			0.9999999999999987
		],
		"upperarm01.R": [
			0.13078026934452358,
			-0.13094065713870395,
			0.2841516512688637,
			0.9407491188087479
		],
		"finger3-2.R": [
			-8.726646516521441e-9,
			-2.6179940104675836e-8,
			-8.726645628343022e-9,
			0.9999999999999998
		],
		"upperarm01.L": [
			-0.12315193568484854,
			-0.36221466003996305,
			0.3440024944973228,
			0.8574942708664758
		],
		"special06.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-1.R": [
			0.05636776404166757,
			0.03739332095286663,
			0.07293740705659776,
			0.9950399737583002
		],
		"shoulder01.L": [
			0.0009138538331175106,
			0.0006807053436533872,
			0.09946337050761857,
			0.9950405717550774
		],
		"lowerarm01.R": [
			-0.03718516522850106,
			0.03331270496579042,
			-0.0005695829047822425,
			0.9987528236506295
		],
		"special03": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"upperarm02.L": [
			-0.2982366206581178,
			0.33283303358833705,
			-0.014740265256971388,
			0.8944606276583473
		],
		"spine02": [
			-0.07439566682484122,
			-0.0006322002740057897,
			0.09919312959601075,
			0.9922830282341067
		],
		"spine03": [
			-0.04967340825936633,
			-0.013253971367001238,
			0.09846044793972063,
			0.9938120672171424
		],
		"spine01": [
			-0.04985824400194388,
			-0.004897503290821947,
			-0.04961730380736518,
			0.9975110491264981
		],
		"upperarm02.R": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"spine04": [
			0.09946977228791996,
			8.683367136441689e-9,
			8.680375205221452e-10,
			0.9950405842984442
		],
		"spine05": [
			-1.202190454027754e-7,
			-0.05316754738988283,
			-0.08408041907216632,
			0.995039544456992
		],
		"lowerarm01.L": [
			-0.6209189191685367,
			-0.3229106295243097,
			0.21727477096404327,
			0.6804264067930587
		],
		"finger5-3.L": [
			1.745329214486444e-8,
			8.726646627543744e-9,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"oris01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"risorius03.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"finger2-3.L": [
			2.6179939993653494e-8,
			-1.745329158975295e-8,
			-1.745329303304287e-8,
			0.9999999999999994
		],
		"toe3-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-3.R": [
			2.6179939993653494e-8,
			-8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"finger2-3.R": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe3-3.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.L": [
			6.981316857945728e-8,
			8.726644740164602e-9,
			2.617994088183179e-8,
			0.9999999999999974
		]
	},
	"Harvey_IDunno": {
		"toe1-1.L": [
			-0.19477091273664954,
			-0.01789474918210876,
			0.01349460581357169,
			0.9805926601384378
		],
		"finger5-2.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger1-3.R": [
			-5.235987998730676e-8,
			-1.7453290479529926e-8,
			2.6179940881831593e-8,
			0.9999999999999982
		],
		"toe5-2.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"toe4-2.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"clavicle.R": [
			0,
			0,
			-4.3633228585804205e-8,
			0.9999999999999991
		],
		"neck03": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			8.72664607243222e-9,
			-2.220446049250313e-16,
			4.3633228492591465e-8,
			0.999999999999999
		],
		"toe5-2.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"toe4-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger5-2.L": [
			0,
			0,
			0,
			1
		],
		"finger1-3.L": [
			-1.7453292144864433e-8,
			2.617994021569814e-8,
			-4.927555263958927e-16,
			0.9999999999999996
		],
		"toe1-1.R": [
			-0.36887769513511026,
			0.033883909484375696,
			-0.02555570842554417,
			0.9285084988715677
		],
		"oculi02.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oculi01.L": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			1.7453291256686053e-8,
			2.617993988263123e-8,
			1.745329303304289e-8,
			0.9999999999999994
		],
		"oculi01.R": [
			-8.72664651652144e-9,
			-1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"oculi02.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"wrist.R": [
			-0.4358055228952712,
			-0.5221479726197721,
			-0.17233713315499624,
			0.7125552283430089
		],
		"finger1-1.L": [
			1.745328948032921e-8,
			-6.108652406133785e-8,
			-4.3633230362160945e-8,
			0.9999999999999969
		],
		"tongue07.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"eye.R": [
			-2.6179939993653497e-8,
			-8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"finger2-1.R": [
			1.7453291256686047e-8,
			1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"finger4-3.R": [
			5.235987998730686e-8,
			2.617994110387656e-8,
			-8.726644740164896e-9,
			0.9999999999999984
		],
		"finger2-1.L": [
			-2.617993999365348e-8,
			1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"eye.L": [
			-2.6179939993653477e-8,
			2.6179940548765046e-8,
			-8.726646960610674e-9,
			0.9999999999999996
		],
		"tongue07.L": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"wrist.L": [
			-0.43580553954991025,
			0.5221479937396011,
			0.17233714273253778,
			0.7125552003642281
		],
		"finger5-3.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"lowerleg01.R": [
			0.09913226064798254,
			-0.007914647042239875,
			0.0021039917962976714,
			0.9950405652432154
		],
		"lowerarm02.L": [
			6.981316857945734e-8,
			-4.363322902989353e-8,
			-8.726649181055347e-9,
			0.9999999999999966
		],
		"oris07.L": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"oris07.R": [
			-8.726645184253779e-9,
			2.6179939993653534e-8,
			-3.490658428972884e-8,
			0.9999999999999991
		],
		"tongue00": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm02.R": [
			-8.726646960610704e-9,
			2.6179939993653534e-8,
			2.6179939993653468e-8,
			0.9999999999999992
		],
		"lowerleg01.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			1.7453292144864443e-8,
			2.6179940104675836e-8,
			-8.726645628343028e-9,
			0.9999999999999997
		],
		"metacarpal4.L": [
			1.7453293033042833e-8,
			1.745329292202058e-8,
			-5.235987998730684e-8,
			0.9999999999999982
		],
		"finger1-2.R": [
			-3.490658428972881e-8,
			-1.745329158975295e-8,
			1.7453293033042366e-8,
			0.9999999999999991
		],
		"pelvis.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			-0.3680145346459284,
			0.03457334037301196,
			-0.03524205137474158,
			0.9285084728960168
		],
		"toe2-3.L": [
			-0.19561478308716831,
			-0.01239937163970839,
			-0.004363401389184473,
			0.9805927151213278
		],
		"toe5-3.L": [
			-0.0989084774727224,
			-0.009172591071700209,
			0.005227783135080551,
			0.9950405252755045
		],
		"levator05.L": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"finger4-1.L": [
			-2.6179939993653494e-8,
			-6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"finger4-1.R": [
			-1.7453292144864436e-8,
			1.1102230246251565e-15,
			5.2359879927727643e-8,
			0.9999999999999986
		],
		"levator05.R": [
			-1.1423153030516055e-15,
			4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"toe5-3.R": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe2-3.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger4-2.L": [
			2.6179939105475025e-8,
			-2.617993899445281e-8,
			-4.36332285858042e-8,
			0.9999999999999987
		],
		"toe2-1.L": [
			-0.19431516309118926,
			-0.018258867148769342,
			0.01860901608421144,
			0.9805926451303139
		],
		"finger1-2.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"pelvis.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			-3.490658428972882e-8,
			-2.6179939549564324e-8,
			2.617994088183189e-8,
			0.9999999999999989
		],
		"tongue04": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe3-2.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"levator03.R": [
			1.1423153030516055e-15,
			4.363322869682662e-8,
			-2.617993999365348e-8,
			0.9999999999999989
		],
		"upperleg02.R": [
			-1.745329214486445e-8,
			8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"upperleg02.L": [
			-0.09891963268173494,
			-0.010350616877011443,
			0.0014614907752934824,
			0.9950405192981286
		],
		"levator03.L": [
			-8.726646960610635e-9,
			-4.363322858580432e-8,
			-1.7453292144864436e-8,
			0.9999999999999989
		],
		"toe3-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"metacarpal3.L": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"tongue01": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"breast.L": [
			1.7453292144864443e-8,
			-1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"temporalis02.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue02": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris04.L": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"temporalis02.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"breast.R": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"oris03.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"oris06.L": [
			-2.6179940881831897e-8,
			2.6179940992854256e-8,
			2.6179939105475064e-8,
			0.9999999999999988
		],
		"orbicularis04.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-2.R": [
			8.726645628343017e-9,
			1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"toe1-2.L": [
			-0.09794735077210281,
			-0.010073730386527147,
			0.014114040918977132,
			0.9950405169045953
		],
		"orbicularis04.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"metacarpal3.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"oris06.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator04.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue06.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"toe2-2.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe2-2.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue06.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator04.R": [
			8.726646516521441e-9,
			2.6179940104675836e-8,
			-8.726645628343022e-9,
			0.9999999999999998
		],
		"toe4-1.L": [
			-0.19161650803661348,
			-0.025005940682967243,
			0.033107525255446996,
			0.9805925293157572
		],
		"upperleg01.R": [
			-0.08239542778720119,
			-0.047940095396744375,
			0.14559798805880683,
			0.9847405580183758
		],
		"metacarpal1.R": [
			-8.726646516521438e-9,
			-3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"levator02.R": [
			2.6179940881831897e-8,
			2.6179940992854256e-8,
			-2.6179939105475064e-8,
			0.9999999999999988
		],
		"toe3-1.L": [
			-0.1925986172423634,
			-0.020028384139154753,
			0.03070496497305703,
			0.9805925971529191
		],
		"toe3-1.R": [
			-0.3647635898064715,
			0.03792394856252501,
			-0.05815085427074557,
			0.9285083606648382
		],
		"levator02.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger5-1.R": [
			8.726646516521441e-9,
			8.726646516521441e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"metacarpal1.L": [
			4.3633228585804185e-8,
			-3.3306690738754696e-16,
			8.726646077118623e-9,
			0.9999999999999991
		],
		"toe4-1.R": [
			-0.2807671826821984,
			0.0366372032402571,
			-0.04851073974082686,
			0.9578487420241416
		],
		"upperleg01.L": [
			0.13364798857668708,
			-0.13730339646860823,
			-0.1576349691030362,
			0.9687296882946631
		],
		"head": [
			-3.6935967985529696e-8,
			0.002614683092190928,
			0.049851830220885004,
			0.99875320197532
		],
		"toe5-1.R": [
			-0.1941639355554441,
			0.02028404042887233,
			-0.018083873264060246,
			0.9805926255898884
		],
		"special01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"special04": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"metacarpal2.L": [
			8.726645628343012e-9,
			-8.726645406298417e-9,
			-4.363322858580416e-8,
			0.9999999999999992
		],
		"metacarpal2.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"temporalis01.R": [
			1.7453291256686083e-8,
			2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			-0.19416391650626483,
			-0.020284031390138568,
			0.018083871387494746,
			0.9805926295833314
		],
		"risorius02.R": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"special05.L": [
			-1.745329214486445e-8,
			-1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"finger2-2.L": [
			1.5230870001493993e-16,
			-8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"foot.L": [
			0.19991728338440207,
			-0.029982540921343448,
			0.08199995490855516,
			0.975915024189656
		],
		"oris06": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.R": [
			-6.092348000597591e-16,
			1.745329203384216e-8,
			3.490658428972889e-8,
			0.9999999999999993
		],
		"orbicularis03.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"levator06.L": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"orbicularis03.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"foot.R": [
			0.29171138366485816,
			0.06528157548575986,
			-0.16009090865891648,
			0.9407516598482264
		],
		"root": [
			-7.985037213990826e-10,
			-0.00042100894703200886,
			0.019984583642715915,
			0.9998001996239517
		],
		"finger2-2.R": [
			5.2359881763663516e-8,
			-5.235988198570851e-8,
			4.3633225033090454e-8,
			0.9999999999999967
		],
		"risorius02.L": [
			-3.490658428972882e-8,
			-2.6179939993653534e-8,
			-8.726645184253818e-9,
			0.9999999999999988
		],
		"special05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue05.L": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger5-1.L": [
			0,
			0,
			3.490658428972887e-8,
			0.9999999999999996
		],
		"toe4-3.R": [
			-6.108652428338212e-8,
			-1.7453293033042883e-8,
			-8.726645184253815e-9,
			0.9999999999999981
		],
		"oris03.L": [
			1.5992415089755391e-15,
			-2.617994021569814e-8,
			6.108652428338218e-8,
			0.9999999999999978
		],
		"toe4-3.L": [
			-0.19448866038259202,
			-0.021415720057336052,
			0.012395428750391062,
			0.9805926173815018
		],
		"finger3-3.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"tongue05.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"lowerleg02.R": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"shoulder01.R": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"finger3-1.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"special06.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger4-3.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger3-2.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"upperarm01.R": [
			-0.2519707608611143,
			-0.2596662964741675,
			0.2627807259069823,
			0.8944442074485471
		],
		"finger3-2.R": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"upperarm01.L": [
			-0.2519707845354649,
			0.25966627724696834,
			-0.2627806811022032,
			0.8944442195244737
		],
		"special06.L": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"finger3-1.R": [
			1.3707785118926925e-15,
			5.235988009832937e-8,
			-2.617993999365348e-8,
			0.9999999999999982
		],
		"shoulder01.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"lowerarm01.R": [
			-0.5004042032522945,
			0.19068193471946648,
			0.15331507915692286,
			0.8305001623372414
		],
		"special03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperarm02.L": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"spine02": [
			-0.04985824813635371,
			0.0003169129790202563,
			-0.049857390480411795,
			0.9975110502011602
		],
		"spine03": [
			-1.6745380090753036e-8,
			0.006658132218425816,
			-0.049474543137123385,
			0.998753192163477
		],
		"spine01": [
			0,
			0,
			0,
			1
		],
		"upperarm02.R": [
			-8.726645628343018e-9,
			-8.726645628343022e-9,
			5.235987998730709e-8,
			0.9999999999999986
		],
		"spine04": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"spine05": [
			1.5696469901500368e-9,
			0.026682703488547066,
			0.04219694951368663,
			0.9987529478235754
		],
		"lowerarm01.L": [
			-0.500404208048105,
			-0.1906819226708466,
			-0.15331504291730755,
			0.830500168903994
		],
		"finger5-3.L": [
			-1.7453291256686083e-8,
			2.617993899445281e-8,
			-2.6179940881832245e-8,
			0.9999999999999991
		],
		"oris01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"finger2-3.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"toe3-3.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger3-3.R": [
			2.617993999365347e-8,
			-2.6179940437742744e-8,
			8.726645184253845e-9,
			0.9999999999999996
		],
		"finger2-3.R": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"toe3-3.L": [
			-0.19534703188831612,
			-0.009006968320803055,
			-0.01401028930461432,
			0.9805927408703851
		],
		"risorius03.L": [
			3.490658428972884e-8,
			-8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		]
	},
	"sit_on_ground01": {
		"toe1-1.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"finger5-2.R": [
			-0.01068746535125665,
			-0.011824853008334912,
			-0.03584918418978137,
			0.9992300970890664
		],
		"finger1-3.R": [
			-4.3633228585804086e-8,
			-1.7453292144864463e-8,
			8.726646960611766e-9,
			0.9999999999999989
		],
		"toe5-2.R": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe4-2.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"clavicle.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"neck03": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"neck02": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"neck01": [
			-0.0168362379909243,
			-0.20018285686917614,
			-0.05653780273967207,
			0.9779810027640503
		],
		"clavicle.L": [
			0.00944746573112099,
			-0.03522476465370006,
			-0.009376964787492136,
			0.9992907654320258
		],
		"toe5-2.L": [
			4.363322858580422e-8,
			8.726646516521441e-9,
			-8.726645628343238e-9,
			0.999999999999999
		],
		"toe4-2.L": [
			-8.72664696061068e-9,
			1.745329292202058e-8,
			5.235987998730666e-8,
			0.9999999999999984
		],
		"finger5-2.L": [
			-0.0021396419367815936,
			0.0017146560309255765,
			0.004406675618416307,
			0.9999865314578351
		],
		"finger1-3.L": [
			4.3633228585804066e-8,
			1.7453290479529926e-8,
			3.490658428972878e-8,
			0.9999999999999984
		],
		"toe1-1.R": [
			-4.36332285858042e-8,
			1.4432899320127035e-15,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"oculi02.L": [
			2.617994088183188e-8,
			-5.2359880320373975e-8,
			8.7266447401646e-9,
			0.9999999999999986
		],
		"oculi01.L": [
			-1.7453292144864446e-8,
			3.490658440075123e-8,
			8.726645628343005e-9,
			0.9999999999999993
		],
		"jaw": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger4-2.R": [
			-0.014922083450345942,
			-0.016510077515314858,
			-0.050053456318451664,
			0.9984985729967348
		],
		"oculi01.R": [
			9.13852305968756e-16,
			-2.6179939993653534e-8,
			3.4906584289728846e-8,
			0.9999999999999991
		],
		"oculi02.R": [
			4.3633228585804185e-8,
			4.440892098500626e-16,
			-8.72664605333848e-9,
			0.999999999999999
		],
		"wrist.R": [
			-0.18435906919745407,
			-0.23429047675735437,
			-0.3716635995859098,
			0.8791961526578151
		],
		"finger1-1.L": [
			-0.1070679319467298,
			0.053443447983828496,
			-0.01036061493215629,
			0.9927602497453644
		],
		"tongue07.R": [
			-1.0661610059836916e-15,
			-6.108652417236016e-8,
			-1.745329214486441e-8,
			0.999999999999998
		],
		"eye.R": [
			1.7453291256686076e-8,
			6.981316835741325e-8,
			8.726647404699983e-9,
			0.9999999999999972
		],
		"finger2-1.R": [
			-0.013501956501324706,
			-0.015067005079017148,
			-0.040046310082846176,
			0.9989929807447767
		],
		"finger4-3.R": [
			-0.008606287698527039,
			-0.009522180018411541,
			-0.028868207320549972,
			0.9995008186619184
		],
		"finger2-1.L": [
			0.1342935760108229,
			-0.09520475777375881,
			-0.11364916079378427,
			0.9797883229505916
		],
		"eye.L": [
			-4.363322858580418e-8,
			-1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"tongue07.L": [
			8.72664607243222e-9,
			-4.3633228918871225e-8,
			-3.5626088403688626e-16,
			0.9999999999999991
		],
		"wrist.L": [
			0.14984370498830588,
			-0.1750099956422725,
			0.1996308293790151,
			0.9524000721661648
		],
		"finger5-3.R": [
			-0.006589716288242841,
			-0.0072909895453883156,
			-0.02210410580258597,
			0.9997073699925181
		],
		"lowerleg01.R": [
			0.5663156816656298,
			0.040647327319745075,
			0.10523781368634179,
			0.8164308580963079
		],
		"lowerarm02.L": [
			-2.6179941770010337e-8,
			-5.235988020935167e-8,
			-2.6179938217296668e-8,
			0.999999999999998
		],
		"oris07.L": [
			-8.726646960610626e-9,
			-3.490658440075123e-8,
			-2.61799399936535e-8,
			0.999999999999999
		],
		"oris07.R": [
			1.745329303304289e-8,
			-1.7453293144065185e-8,
			2.6179939993653494e-8,
			0.9999999999999993
		],
		"tongue00": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"lowerarm02.R": [
			4.36332285858042e-8,
			-1.4432899320127035e-15,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"lowerleg01.L": [
			0.5228745532729162,
			0.06721638776248606,
			0.11405596206592888,
			0.8420661472075859
		],
		"tongue03": [
			-3.046174000298796e-16,
			3.4906584178706623e-8,
			8.726646072432218e-9,
			0.9999999999999994
		],
		"finger1-1.R": [
			-0.13898128874189633,
			-0.12513660182478348,
			0.05932289226707655,
			0.9805640349902988
		],
		"metacarpal4.L": [
			-0.002723275724155266,
			0.0021824322186426715,
			0.005608802201461194,
			0.9999781808103646
		],
		"finger1-2.R": [
			-4.569261529843784e-16,
			-1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"pelvis.R": [
			-0.3025928717572053,
			0.1653953615116024,
			-0.04248721236719948,
			0.9376975872515824
		],
		"toe2-1.R": [
			-5.235987998730683e-8,
			-8.726646294476836e-9,
			4.4331856927593173e-16,
			0.9999999999999987
		],
		"toe2-3.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"toe5-3.L": [
			8.726646516521443e-9,
			1.7453291811797556e-8,
			-2.6179939993653554e-8,
			0.9999999999999993
		],
		"levator05.L": [
			-9.138523059687567e-16,
			3.4906584178706623e-8,
			2.6179939993653468e-8,
			0.9999999999999989
		],
		"finger4-1.L": [
			2.617993999365346e-8,
			5.235987998730707e-8,
			1.361416935280011e-15,
			0.9999999999999983
		],
		"finger4-1.R": [
			-0.014831506179981531,
			-0.016409905634565014,
			-0.04974958541582534,
			0.9985167600859042
		],
		"levator05.R": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe5-3.R": [
			3.490658428972883e-8,
			-5.551115123125783e-16,
			2.617994002055379e-8,
			0.9999999999999992
		],
		"toe2-3.R": [
			-8.726645628343061e-9,
			8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"finger4-2.L": [
			0.02195182439763686,
			-0.015562262181695874,
			-0.018577201218574646,
			0.9994652675287364
		],
		"toe2-1.L": [
			-8.726646516521426e-9,
			8.726646627543744e-9,
			5.2359879987307266e-8,
			0.9999999999999986
		],
		"finger1-2.L": [
			-2.617993999365348e-8,
			-1.1102230246251565e-15,
			-4.363322861862043e-8,
			0.9999999999999989
		],
		"pelvis.L": [
			5.2359879987306776e-8,
			-2.6179939549564324e-8,
			-1.7453293921221474e-8,
			0.9999999999999984
		],
		"metacarpal4.R": [
			0.007033650904995218,
			0.018535690430484864,
			0.03912061557017563,
			0.9990378037755242
		],
		"tongue04": [
			-2.6179939993653534e-8,
			-4.3633228474782015e-8,
			8.726647404699778e-9,
			0.9999999999999987
		],
		"toe3-2.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"levator03.R": [
			8.726645628343017e-9,
			-2.6179939993653534e-8,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"upperleg02.R": [
			-0.044796282525279674,
			-0.40502212325854203,
			0.012333452737831898,
			0.9131255437707467
		],
		"upperleg02.L": [
			0.013723314177283714,
			-0.12407892776332086,
			0.003778306589379267,
			0.9921702549121362
		],
		"levator03.L": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"toe3-2.R": [
			-1.7453292144864446e-8,
			4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"metacarpal3.L": [
			-5.2359879987306876e-8,
			8.726647626744466e-9,
			2.6179939105475504e-8,
			0.9999999999999984
		],
		"tongue01": [
			-3.4906584289728793e-8,
			-1.7453292366909068e-8,
			8.7266465165216e-9,
			0.9999999999999996
		],
		"breast.L": [
			-8.726645628343017e-9,
			2.6179939993653534e-8,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"temporalis02.R": [
			-1.745329214486443e-8,
			-5.235987998730707e-8,
			8.662785736608193e-16,
			0.999999999999998
		],
		"tongue02": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"oris04.R": [
			-8.726645628343005e-9,
			-5.235987976526246e-8,
			8.726646516521441e-9,
			0.9999999999999984
		],
		"oris04.L": [
			8.726645628343012e-9,
			-4.3633228474782015e-8,
			-8.726646516521458e-9,
			0.9999999999999989
		],
		"temporalis02.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"breast.R": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"oris03.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"oris06.L": [
			-4.363322858580416e-8,
			2.617994021569814e-8,
			-1.1643607064032247e-15,
			0.9999999999999988
		],
		"orbicularis04.R": [
			-3.8077175003734897e-16,
			4.363322858580432e-8,
			8.726646072432225e-9,
			0.999999999999999
		],
		"toe1-2.R": [
			3.490658428972884e-8,
			-8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"toe1-2.L": [
			2.617993999365348e-8,
			-1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"orbicularis04.L": [
			6.092348000597589e-16,
			-3.4906584178706623e-8,
			1.745329214486445e-8,
			0.9999999999999991
		],
		"metacarpal3.R": [
			-0.000060270840156263466,
			0.030083305265528937,
			0.020822605168964704,
			0.9993304809849964
		],
		"oris06.R": [
			-7.853981998095982e-8,
			2.617993977160893e-8,
			-2.1033163520354776e-15,
			0.9999999999999964
		],
		"levator04.L": [
			-2.6179940881831887e-8,
			-1.7453293255087488e-8,
			-2.6179939105475074e-8,
			0.9999999999999993
		],
		"tongue06.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-2.L": [
			-8.72664562834299e-9,
			8.726645406298417e-9,
			-6.108652428338209e-8,
			0.9999999999999983
		],
		"toe2-2.R": [
			6.853892030067822e-16,
			-8.726645961409929e-9,
			7.853981998095987e-8,
			0.9999999999999968
		],
		"tongue06.R": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"levator04.R": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"toe4-1.L": [
			3.490658428972886e-8,
			8.881784197001252e-16,
			-2.6179940108230155e-8,
			0.9999999999999991
		],
		"upperleg01.R": [
			-0.2509388718710931,
			-0.29278186153435015,
			-0.0911022927439739,
			0.9181551265430777
		],
		"metacarpal1.R": [
			-0.006006919593092174,
			-0.006703177475822386,
			-0.017816284606693707,
			0.9998007623179447
		],
		"levator02.R": [
			-2.617993999365347e-8,
			-1.745329247793137e-8,
			-8.726645628343018e-9,
			0.9999999999999994
		],
		"toe3-1.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe3-1.R": [
			-4.363322858580409e-8,
			8.726647404699861e-9,
			2.6179939993652998e-8,
			0.9999999999999986
		],
		"levator02.L": [
			-1.745329303304284e-8,
			-5.235988009832937e-8,
			-8.726645184253813e-9,
			0.9999999999999986
		],
		"finger5-1.R": [
			-0.006321833273218274,
			-0.006994639499484201,
			-0.021205552192607915,
			0.9997306807328383
		],
		"metacarpal1.L": [
			-2.617993999365347e-8,
			-2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"toe4-1.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"upperleg01.L": [
			-0.2293538142283797,
			-0.23480106681168533,
			0.22372111447771634,
			0.9177222618307989
		],
		"head": [
			-0.0018575662371562497,
			-0.10063444514639219,
			0.06488943982549114,
			0.9928034138221355
		],
		"toe5-1.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			2.2846307649218957e-16,
			8.726646183454534e-9,
			-2.6179939993653534e-8,
			0.9999999999999994
		],
		"special04": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal2.L": [
			-6.981316857945715e-8,
			-3.4906586066085765e-8,
			-2.617993732912073e-8,
			0.9999999999999968
		],
		"metacarpal2.R": [
			-8.726645628343023e-9,
			1.745329203384216e-8,
			-2.6179939993653547e-8,
			0.9999999999999994
		],
		"temporalis01.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"toe5-1.L": [
			1.745329214486445e-8,
			-8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"risorius02.R": [
			-8.726646516521428e-9,
			5.235987998730707e-8,
			8.726645628342985e-9,
			0.9999999999999987
		],
		"special05.L": [
			-2.6179939105475068e-8,
			3.4906584289728926e-8,
			-1.7453293033042906e-8,
			0.999999999999999
		],
		"finger2-2.L": [
			0.03547519967015399,
			-0.0185982356790797,
			-0.13790091899645612,
			0.9896357675316312
		],
		"foot.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"oris06": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"levator06.R": [
			-8.72664607243222e-9,
			4.3633228918871225e-8,
			-3.5626088403688626e-16,
			0.9999999999999991
		],
		"orbicularis03.R": [
			1.745329214486444e-8,
			3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"levator06.L": [
			2.6179939993653484e-8,
			2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"orbicularis03.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"foot.R": [
			0.635353359487403,
			-0.2756965408811024,
			0.08962245524715878,
			0.7157411134270104
		],
		"root": [
			-0.20098981948297437,
			0.051511981456435985,
			0.2428637166189045,
			0.9476111140023032
		],
		"finger2-2.R": [
			-0.049398752017000426,
			-0.11112666182570285,
			-0.05447918072152588,
			0.9910815542620848
		],
		"risorius02.L": [
			8.726646072432215e-9,
			5.235988020935167e-8,
			4.624224031074066e-16,
			0.9999999999999982
		],
		"special05.R": [
			8.726646960610635e-9,
			4.363322858580432e-8,
			-1.7453292144864436e-8,
			0.9999999999999989
		],
		"lowerleg02.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue05.L": [
			1.745329303304285e-8,
			4.3633228918871225e-8,
			-2.6179939105475048e-8,
			0.9999999999999986
		],
		"finger5-1.L": [
			-0.06374256168738383,
			0.054148447700526625,
			0.13742428309274282,
			0.9869748719484202
		],
		"toe4-3.R": [
			2.6179939993653487e-8,
			-7.771561172376096e-16,
			2.6179939958862843e-8,
			0.9999999999999994
		],
		"oris03.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe4-3.L": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger3-3.L": [
			0.08833058586594267,
			-0.0482002978091719,
			-0.14540603579755995,
			0.984241598209162
		],
		"tongue05.R": [
			1.745329303304289e-8,
			2.6179940104675836e-8,
			-1.745329125668605e-8,
			0.9999999999999996
		],
		"lowerleg02.R": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"shoulder01.R": [
			-0.022621746439657347,
			0.048423880041678635,
			-0.1464174167277496,
			0.9877779732857487
		],
		"finger3-1.L": [
			0.07154423734482153,
			-0.05071983070653152,
			-0.06054597474443867,
			0.9943053383232406
		],
		"special06.R": [
			-2.2846307649218933e-16,
			-2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"finger4-3.L": [
			0.14874946426441413,
			-0.10545303967802,
			-0.1258828286997729,
			0.9751444850596548
		],
		"finger3-2.L": [
			0.06261078169532443,
			-0.0326979435697583,
			-0.1360321097283607,
			0.9881831812091626
		],
		"upperarm01.R": [
			0.04486706465023275,
			0.162626040571765,
			0.24540413689954976,
			0.9546289996800904
		],
		"finger3-2.R": [
			-0.01763071858940222,
			-0.01967435049849986,
			-0.052292102398031864,
			0.9982823316683902
		],
		"upperarm01.L": [
			-0.15630077505965886,
			-0.42895800416262986,
			0.02776458134350627,
			0.8892661167521134
		],
		"special06.L": [
			-2.2846307649218933e-16,
			-2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"finger3-1.R": [
			-0.02541004230578719,
			-0.028065489841788804,
			-0.08176392930067182,
			0.9959323862066508
		],
		"shoulder01.L": [
			0.17382672567858484,
			-0.2019844122197918,
			0.14330463751553502,
			0.9531266167339093
		],
		"lowerarm01.R": [
			0.13213104170497741,
			-0.3042996221465467,
			0.019638673105609957,
			0.9431635331680703
		],
		"special03": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"upperarm02.L": [
			0.09961255532828352,
			-0.10899822016025484,
			0.006731316478035687,
			0.9890153771308804
		],
		"spine02": [
			0.06666772420902758,
			-0.0005020493216487676,
			0.0004989352100265534,
			0.9977749814256335
		],
		"spine03": [
			0.13965668631875283,
			-0.0012596761294343395,
			0.00035990437877195307,
			0.9901991181834853
		],
		"spine01": [
			0.04552672543571295,
			-0.08486828825678217,
			-0.15785778618993235,
			0.9827540945011011
		],
		"upperarm02.R": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"spine04": [
			-0.11001115518818354,
			-0.03444908508936606,
			-0.011016744371244523,
			0.9932720863963338
		],
		"spine05": [
			0.15853706436871096,
			0.005330308092790004,
			-0.02417207743551239,
			0.9870427030830216
		],
		"lowerarm01.L": [
			-0.21834962862956395,
			-0.03415552919826337,
			0.1409267469259243,
			0.9650370415188188
		],
		"finger5-3.L": [
			-2.6179939993653497e-8,
			5.551115123125783e-16,
			1.745329205570242e-8,
			0.9999999999999993
		],
		"oris01": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"oris02": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			-1.745329214486445e-8,
			0.9999999999999997
		],
		"oris05": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"risorius03.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger2-3.L": [
			0.03719634852347441,
			-0.02325019062250444,
			-0.07587292601884565,
			0.9961521768233387
		],
		"toe3-3.R": [
			1.745329214486444e-8,
			-8.726646183454534e-9,
			3.490658428972891e-8,
			0.9999999999999996
		],
		"finger3-3.R": [
			-0.010898364966812464,
			-0.01216166038240174,
			-0.03232411637585735,
			0.999344020424555
		],
		"finger2-3.R": [
			-2.6179939993653504e-8,
			-3.4906584733818136e-8,
			-8.726645184253808e-9,
			0.9999999999999991
		],
		"toe3-3.L": [
			2.617993999365347e-8,
			2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"risorius03.L": [
			2.7755575615628914e-16,
			1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		]
	},
	"Harvey_StandingFashion3": {
		"toe1-1.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger5-2.R": [
			0.10125852204955291,
			0.10554750765308174,
			0.34130865495223,
			0.9285013933189665
		],
		"finger1-3.R": [
			-1.7453291256686083e-8,
			2.617993899445281e-8,
			-2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-2.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"toe4-2.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"clavicle.R": [
			0.0012380098247128052,
			0.0030851216974754347,
			0.09941443450143182,
			0.995040561770497
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			6.327142510034724e-9,
			-0.02641887815143429,
			0.095899800944629,
			0.9950403363964702
		],
		"neck01": [
			2.5417074547833076e-8,
			-0.045870389962814895,
			0.0882699981820641,
			0.9950398558578435
		],
		"clavicle.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"toe5-2.L": [
			2.6179939993653494e-8,
			-8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe4-2.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger5-2.L": [
			2.6179939993653504e-8,
			1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"finger1-3.L": [
			-3.4906584289728807e-8,
			-2.6179939993653534e-8,
			8.72664696061079e-9,
			0.999999999999999
		],
		"toe1-1.R": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"oculi02.L": [
			-2.6179939105475058e-8,
			-1.7453291256686043e-8,
			3.490658428972882e-8,
			0.9999999999999987
		],
		"oculi01.L": [
			8.726646516521436e-9,
			-1.7453292366909068e-8,
			2.6179939993653527e-8,
			0.9999999999999996
		],
		"jaw": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.R": [
			0.18221325673006925,
			0.12266935560308512,
			0.299396751269809,
			0.9284999427015759
		],
		"oculi01.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"oculi02.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"wrist.R": [
			0.1925607833378127,
			0.09747406846669127,
			-0.09995555902698523,
			0.9713022376770688
		],
		"finger1-1.L": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"tongue07.R": [
			-2.6179939993653494e-8,
			-1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"eye.R": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger2-1.R": [
			-2.6179939993653497e-8,
			-8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"finger4-3.R": [
			0.1393629680866851,
			0.08407556385857129,
			0.23673198078197757,
			0.9578450981045812
		],
		"finger2-1.L": [
			0.07319621197392415,
			-0.04599561843046307,
			-0.04922023527715266,
			0.9950397409536618
		],
		"eye.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"tongue07.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"wrist.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"finger5-3.R": [
			0.13855276206311773,
			0.13328654824437025,
			0.47718747413495144,
			0.8575138148802549
		],
		"lowerleg01.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerarm02.L": [
			3.8077175003734897e-16,
			4.363322869682662e-8,
			-8.726646072432225e-9,
			0.9999999999999991
		],
		"oris07.L": [
			8.726646072432225e-9,
			-1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"oris07.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"tongue00": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"lowerarm02.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"lowerleg01.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"tongue03": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"finger1-1.R": [
			-0.022815779291223994,
			-0.09446268522699686,
			-0.02136585705294773,
			0.9950375578175086
		],
		"metacarpal4.L": [
			8.726646072432222e-9,
			3.3306690738754696e-16,
			-5.2359880055849324e-8,
			0.9999999999999984
		],
		"finger1-2.R": [
			0.10710304578641043,
			0.06111424520634867,
			-0.24254247971596643,
			0.9622718597929392
		],
		"pelvis.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-1.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-3.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-3.L": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"levator05.L": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger4-1.L": [
			1.745329303304289e-8,
			2.6179940104675836e-8,
			-1.745329125668605e-8,
			0.9999999999999996
		],
		"finger4-1.R": [
			0.09213394221563306,
			0.051584401326754015,
			0.16519973798005883,
			0.9805913689212682
		],
		"levator05.R": [
			8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"toe5-3.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe2-3.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger4-2.L": [
			-1.7453292144864443e-8,
			-8.726645850387627e-9,
			2.6179939993653534e-8,
			0.9999999999999996
		],
		"toe2-1.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger1-2.L": [
			-8.726645184253878e-9,
			2.6179939993653534e-8,
			-2.6179939993653474e-8,
			0.9999999999999992
		],
		"pelvis.L": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"metacarpal4.R": [
			2.6179939993653438e-8,
			-1.6653345369377348e-15,
			6.108652420236881e-8,
			0.999999999999998
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator03.R": [
			-8.726646516521428e-9,
			5.235987998730707e-8,
			8.726645628342985e-9,
			0.9999999999999987
		],
		"upperleg02.R": [
			-0.09891966174926611,
			0.010350628072996915,
			-0.0014614745965565593,
			0.9950405163157475
		],
		"upperleg02.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"levator03.L": [
			4.363322858580416e-8,
			-4.363322858580432e-8,
			-1.9472425866614827e-15,
			0.9999999999999979
		],
		"toe3-2.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"metacarpal3.L": [
			8.726646516521443e-9,
			1.7453291811797556e-8,
			-2.6179939993653554e-8,
			0.9999999999999993
		],
		"tongue01": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"breast.L": [
			0,
			0,
			0,
			1
		],
		"temporalis02.R": [
			-1.745329214486444e-8,
			-8.726646627543744e-9,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"tongue02": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"oris04.R": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"oris04.L": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"temporalis02.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"breast.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"oris03.R": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"oris06.L": [
			-2.6179940881831874e-8,
			4.363322880784892e-8,
			1.7453291256686013e-8,
			0.9999999999999986
		],
		"orbicularis04.R": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"toe1-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe1-2.L": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"orbicularis04.L": [
			2.6179939993653477e-8,
			-2.6179940548765046e-8,
			-8.726646960610674e-9,
			0.9999999999999996
		],
		"metacarpal3.R": [
			4.3633228585804185e-8,
			2.6179939660586626e-8,
			8.726647404700228e-9,
			0.9999999999999984
		],
		"oris06.R": [
			-6.108652428338209e-8,
			-3.490658462279583e-8,
			2.0145849534447307e-15,
			0.9999999999999976
		],
		"levator04.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue06.L": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe2-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-2.R": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"tongue06.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator04.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe4-1.L": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"upperleg01.R": [
			-0.1087239611690134,
			-0.16583973567646482,
			-0.24440754298859046,
			0.9491792429613911
		],
		"metacarpal1.R": [
			1.745329214486444e-8,
			4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"levator02.R": [
			3.4906584289728827e-8,
			2.617994121489886e-8,
			-2.61799391054727e-8,
			0.9999999999999991
		],
		"toe3-1.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-1.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"levator02.L": [
			2.6179939993653484e-8,
			-2.6179940104675836e-8,
			-8.045503725131716e-16,
			0.9999999999999991
		],
		"finger5-1.R": [
			0.09639042169090366,
			0.08594233544630747,
			0.3481440587757758,
			0.9285033742121855
		],
		"metacarpal1.L": [
			2.6179939993653517e-8,
			3.4906584733818136e-8,
			8.72664696061073e-9,
			0.9999999999999996
		],
		"toe4-1.R": [
			3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"upperleg01.L": [
			0.09978287490845919,
			-0.019265867912301782,
			-0.09626830549766942,
			0.9901538353029782
		],
		"head": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-1.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			8.726645628343032e-9,
			-2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"special04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			4.363322680944724e-8,
			-3.4906582846438994e-8,
			-3.490658606608551e-8,
			0.9999999999999978
		],
		"metacarpal2.R": [
			3.490658428972882e-8,
			5.235988009832937e-8,
			-8.726644296075283e-9,
			0.999999999999998
		],
		"temporalis01.R": [
			8.72664651652145e-9,
			-8.726646627543744e-9,
			2.6179939993653484e-8,
			0.9999999999999996
		],
		"toe5-1.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"risorius02.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"special05.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger2-2.L": [
			3.4906584289728793e-8,
			1.7453292366909068e-8,
			8.7266465165216e-9,
			0.9999999999999996
		],
		"foot.L": [
			-0.10418531991720381,
			0.0383132164088027,
			-0.08528671242948038,
			0.9901533685470818
		],
		"oris06": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			-8.726646960610704e-9,
			2.6179939993653534e-8,
			2.6179939993653468e-8,
			0.9999999999999992
		],
		"orbicularis03.R": [
			1.7453292144864433e-8,
			2.617994021569814e-8,
			4.927555263958927e-16,
			0.9999999999999996
		],
		"levator06.L": [
			0,
			0,
			0,
			1
		],
		"orbicularis03.L": [
			-2.617993999365346e-8,
			-3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"foot.R": [
			0.19396494494662234,
			0.024827266816278337,
			0.13539814140604153,
			0.9713025019313377
		],
		"root": [
			-1.4283491974796373e-7,
			-0.0031233913336558006,
			0.14825908030117155,
			0.9889436230315696
		],
		"finger2-2.R": [
			4.363322858580418e-8,
			1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"risorius02.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"special05.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"lowerleg02.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"tongue05.L": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"finger5-1.L": [
			8.726647404699835e-9,
			-4.363322880784892e-8,
			3.490658428972884e-8,
			0.9999999999999982
		],
		"toe4-3.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"oris03.L": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"toe4-3.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"finger3-3.L": [
			8.726646516521433e-9,
			-8.726646405499139e-9,
			4.3633228585804245e-8,
			0.9999999999999992
		],
		"tongue05.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"lowerleg02.R": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"shoulder01.R": [
			-8.726645628343025e-9,
			-8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"finger3-1.L": [
			1.0661610059836916e-15,
			-6.108652428338246e-8,
			1.745329214486441e-8,
			0.9999999999999981
		],
		"special06.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger4-3.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger3-2.L": [
			4.363322858580412e-8,
			2.6179940992854256e-8,
			-2.617993910547514e-8,
			0.9999999999999986
		],
		"upperarm01.R": [
			0.12888288003077358,
			0.002099341733657667,
			0.28711261357941525,
			0.9491844621162189
		],
		"finger3-2.R": [
			0.16656546081689325,
			0.12411643639363645,
			0.19846656069903268,
			0.9578424096708693
		],
		"upperarm01.L": [
			0.0008710164123783456,
			0.26242015361113924,
			-0.2764263001566139,
			0.9245125228415464
		],
		"special06.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-1.R": [
			-0.022735373744812,
			0.08453947518909488,
			0.10925129434620263,
			0.9901516725225056
		],
		"shoulder01.L": [
			0.08861051354582129,
			-0.045218773029888415,
			0.09848356006023586,
			0.9901537395034569
		],
		"lowerarm01.R": [
			0.051627231511961955,
			0.05658021100329924,
			-0.06347765524076404,
			0.9950396454284459
		],
		"special03": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"upperarm02.L": [
			2.617993999365348e-8,
			-1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"spine02": [
			5.002467551034803e-7,
			0.09934966647659604,
			-0.14694667358631114,
			0.984142428153902
		],
		"spine03": [
			-1.6788981573913152e-8,
			0.006658132221168844,
			-0.04947453573197148,
			0.9987531925302823
		],
		"spine01": [
			-9.676599912928573e-8,
			-0.009774414008282606,
			-0.09898894995132054,
			0.99504052611857
		],
		"upperarm02.R": [
			0.06635084860280537,
			0.07405826688766004,
			-0.003281607420712516,
			0.9950387776604587
		],
		"spine04": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"spine05": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"lowerarm01.L": [
			-4.569261529843786e-16,
			1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"finger5-3.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"oris01": [
			-6.10865242833821e-8,
			-4.440892098500626e-16,
			-8.72664608214625e-9,
			0.9999999999999981
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			5.235987998730676e-8,
			-1.7453290479529926e-8,
			-2.6179940881831593e-8,
			0.9999999999999982
		],
		"finger2-3.L": [
			5.235987998730672e-8,
			-2.6179938550363602e-8,
			-2.617994177001015e-8,
			0.9999999999999981
		],
		"toe3-3.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger3-3.R": [
			0.21508490266172436,
			0.1564573365462576,
			0.2591352943003168,
			0.9284979729303322
		],
		"finger2-3.R": [
			-0.07333538599899797,
			-0.049504164188581834,
			-0.045463689443442125,
			0.9950398543930576
		],
		"toe3-3.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"risorius03.L": [
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999987
		]
	},
	"run01": {
		"toe1-1.L": [
			4.3633225033090646e-8,
			-7.853981687233613e-8,
			-5.235988354001967e-8,
			0.9999999999999949
		],
		"finger5-2.R": [
			0.1689640642073576,
			0.2048792230367159,
			0.5613594068700722,
			0.7838056297915216
		],
		"finger1-3.R": [
			-0.11674540235647181,
			0.019808291632809394,
			0.04536502022962496,
			0.991927496115911
		],
		"toe5-2.R": [
			-6.108652428338212e-8,
			8.726647848789071e-9,
			2.6179939105475263e-8,
			0.9999999999999978
		],
		"toe4-2.R": [
			6.108652428338186e-8,
			2.617993710707367e-8,
			4.363323036216344e-8,
			0.9999999999999963
		],
		"clavicle.R": [
			0.01825920868793728,
			0.08460171021987017,
			-0.010705013071144812,
			0.9961900193342184
		],
		"neck03": [
			-6.498606571544075e-9,
			-0.11050784646017786,
			-0.004305819141036509,
			0.9938659244547313
		],
		"neck02": [
			-0.019848213624619693,
			-0.024069893253115593,
			-0.05798131758708717,
			0.997830073442147
		],
		"neck01": [
			0.002216466554085632,
			-0.15354090291435485,
			-0.05409893753726966,
			0.9866577843232166
		],
		"clavicle.L": [
			0.06619250955351944,
			0.1862703906390758,
			-0.0220905519463987,
			0.9800172961559794
		],
		"toe5-2.L": [
			1.3707784060135717e-15,
			1.7453292255886765e-8,
			-7.853981998096028e-8,
			0.9999999999999968
		],
		"toe4-2.L": [
			8.72664562834302e-9,
			-3.4906584289728926e-8,
			-8.726646516521445e-9,
			0.9999999999999994
		],
		"finger5-2.L": [
			-1.7453291256686003e-8,
			5.235987976526246e-8,
			-8.726646960611257e-9,
			0.9999999999999984
		],
		"finger1-3.L": [
			-1.2217304856676214e-7,
			8.72664285278546e-9,
			-2.617994088182809e-8,
			0.9999999999999921
		],
		"toe1-1.R": [
			1.7453291256686023e-8,
			2.617993932751972e-8,
			3.4906584289728926e-8,
			0.999999999999999
		],
		"oculi02.L": [
			7.85398199809595e-8,
			-6.108652461644937e-8,
			8.726641187459652e-9,
			0.9999999999999951
		],
		"oculi01.L": [
			3.490658428972883e-8,
			-2.6179939993653534e-8,
			-1.0341496537059884e-15,
			0.9999999999999992
		],
		"jaw": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"finger4-2.R": [
			0.318522823380126,
			0.24374473808450403,
			0.5100451523786065,
			0.7609110698216665
		],
		"oculi01.R": [
			3.490658784244258e-8,
			-6.981316846843555e-8,
			4.363322680944667e-8,
			0.9999999999999959
		],
		"oculi02.R": [
			-2.6179939993653487e-8,
			8.726645295276114e-9,
			-3.4906584289728926e-8,
			0.9999999999999988
		],
		"oris03.L": [
			-7.310818447749912e-15,
			-1.0471975997461413e-7,
			-6.98131685794569e-8,
			0.999999999999992
		],
		"finger1-1.L": [
			0.10354985599240853,
			0.044746778845505486,
			0.13696552233400394,
			0.9841319011182783
		],
		"tongue07.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"eye.R": [
			4.36332285858042e-8,
			-1.4432899320127035e-15,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"finger2-1.R": [
			0.24858515615714782,
			0.16125566315540296,
			0.15746206153910644,
			0.9420232111866951
		],
		"finger4-3.R": [
			0.2764935981261254,
			0.1871171466344561,
			0.4642130947599283,
			0.8203929950237615
		],
		"finger2-1.L": [
			-3.8077175003734897e-16,
			-4.363322869682662e-8,
			-8.726646072432225e-9,
			0.9999999999999991
		],
		"eye.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue07.L": [
			7.85398199809599e-8,
			-8.726646627543744e-9,
			8.726645184253795e-9,
			0.9999999999999967
		],
		"wrist.L": [
			0.04203765973765045,
			-0.04865364789157456,
			-0.04621812643859133,
			0.9968598409501358
		],
		"finger5-3.R": [
			0.15020739498959854,
			0.16994108233969885,
			0.5110257703690446,
			0.8291021825097159
		],
		"lowerleg01.R": [
			0.468385102235004,
			-0.024706618306662653,
			-0.00691420106327792,
			0.8831518401949975
		],
		"lowerarm02.L": [
			-1.0471975642189872e-7,
			3.490657896065841e-8,
			-5.235988354000115e-8,
			0.9999999999999926
		],
		"oris07.L": [
			-6.981316857945685e-8,
			6.108652439440476e-8,
			1.7453287703973417e-8,
			0.9999999999999958
		],
		"oris07.R": [
			-2.6179939993653494e-8,
			-6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"tongue00": [
			6.10865242833821e-8,
			-5.551115123125783e-16,
			8.726646064568477e-9,
			0.9999999999999981
		],
		"lowerarm02.R": [
			-8.726646072432222e-9,
			-3.3306690738754696e-16,
			-5.2359880055849324e-8,
			0.9999999999999984
		],
		"lowerleg01.L": [
			0.6567205136941227,
			0.06236236802677486,
			-0.00006984601342713512,
			0.751551127381867
		],
		"tongue03": [
			-7.853981998095985e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"finger1-1.R": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"metacarpal4.L": [
			-7.853981642824565e-8,
			3.490657551896703e-8,
			-1.1344640071794618e-7,
			0.9999999999999901
		],
		"finger1-2.R": [
			0.034837535679376044,
			-0.005036281208236293,
			-0.016311210393539183,
			0.9992471798283329
		],
		"pelvis.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-1.R": [
			-2.6179939993653527e-8,
			-8.726647404699861e-9,
			-4.363322858580379e-8,
			0.9999999999999987
		],
		"toe2-3.L": [
			-1.7453290368507614e-8,
			2.6179939216497417e-8,
			-6.981316857945846e-8,
			0.9999999999999971
		],
		"toe5-3.L": [
			8.726649625146034e-9,
			3.490658584404116e-8,
			-1.0471975997461114e-7,
			0.9999999999999939
		],
		"levator05.L": [
			-2.6179939993653504e-8,
			-3.4906584733818136e-8,
			-8.726645184253808e-9,
			0.9999999999999991
		],
		"finger4-1.L": [
			4.3633230362160965e-8,
			-6.108652450542706e-8,
			2.6179937329118278e-8,
			0.9999999999999969
		],
		"finger4-1.R": [
			0.2627267245440125,
			0.16771924706637098,
			0.46896697893226563,
			0.8263866498467944
		],
		"levator05.R": [
			-2.6179939993653517e-8,
			-3.4906584733818136e-8,
			8.72664696061073e-9,
			0.9999999999999996
		],
		"toe5-3.R": [
			1.745329214486436e-8,
			-2.3314683517128287e-15,
			1.0471975997979369e-7,
			0.9999999999999942
		],
		"toe2-3.R": [
			-5.235988176366347e-8,
			1.7453294809399722e-8,
			5.2359878210949805e-8,
			0.9999999999999972
		],
		"finger4-2.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			2.617993999365343e-8,
			0.9999999999999992
		],
		"toe2-1.L": [
			4.569261529843769e-16,
			-8.726645961409929e-9,
			5.235987998730683e-8,
			0.9999999999999987
		],
		"finger1-2.L": [
			-1.7453291256685957e-8,
			8.726644296075392e-9,
			-9.599310857310953e-8,
			0.9999999999999953
		],
		"pelvis.L": [
			0.0012242347757332103,
			0.022441766901693083,
			-0.007283257147378338,
			0.9997208723002983
		],
		"metacarpal4.R": [
			6.98131756848848e-8,
			9.599311590058335e-8,
			-7.853981287553142e-8,
			0.99999999999999
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-4.569261529843785e-16,
			2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"levator03.R": [
			7.853981998095985e-8,
			3.490658595506346e-8,
			-1.7453289480330276e-8,
			0.999999999999996
		],
		"upperleg02.R": [
			5.235987998730684e-8,
			8.726645739365324e-9,
			8.72664651652204e-9,
			0.9999999999999988
		],
		"upperleg02.L": [
			-0.17871053863283465,
			-0.0222005635533975,
			-0.0016303582430563807,
			0.9836498463841048
		],
		"levator03.L": [
			3.490658428972877e-8,
			1.7453293255087488e-8,
			-3.490658428972879e-8,
			0.9999999999999988
		],
		"toe3-2.R": [
			-8.726646072432222e-9,
			-3.3306690738754696e-16,
			-5.2359880055849324e-8,
			0.9999999999999984
		],
		"metacarpal3.L": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"tongue01": [
			0,
			0,
			0,
			1
		],
		"breast.L": [
			0.004637217825469179,
			-0.000016452224591234632,
			-0.001365723399657891,
			0.9999883153016139
		],
		"temporalis02.R": [
			-8.726646072432222e-9,
			-2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			4.3633230362160866e-8,
			-2.6179941881032676e-8,
			3.4906582513371795e-8,
			0.9999999999999981
		],
		"oris04.L": [
			6.981316857945727e-8,
			2.6179942214099583e-8,
			-2.6179938217296585e-8,
			0.9999999999999971
		],
		"temporalis02.L": [
			5.235987998730666e-8,
			-2.617993932751972e-8,
			-8.726647404699014e-9,
			0.9999999999999984
		],
		"breast.R": [
			6.853892559463472e-16,
			-2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"oris03.R": [
			-4.3633228585804086e-8,
			5.235987976526246e-8,
			8.72664385198646e-9,
			0.9999999999999973
		],
		"oris06.L": [
			-5.2359879987306756e-8,
			-2.617994121489886e-8,
			-1.7453290368507855e-8,
			0.9999999999999986
		],
		"orbicularis04.R": [
			5.235987998730684e-8,
			8.881784197001252e-16,
			-1.7453292120936186e-8,
			0.9999999999999983
		],
		"toe1-2.R": [
			4.363322858580418e-8,
			-1.7453291367708346e-8,
			-1.745329303304287e-8,
			0.999999999999999
		],
		"toe1-2.L": [
			-2.6179939993653497e-8,
			8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"orbicularis04.L": [
			4.569261529843786e-16,
			-1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"metacarpal3.R": [
			2.3455541708123308e-14,
			1.2217304856676492e-7,
			-1.9198621714621295e-7,
			0.999999999999974
		],
		"oris06.R": [
			-2.6179938217296555e-8,
			2.6179937884229787e-8,
			-6.98131685794569e-8,
			0.9999999999999972
		],
		"levator04.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue06.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe2-2.L": [
			4.363322858580417e-8,
			-8.726646516521441e-9,
			-4.068768463957589e-16,
			0.999999999999999
		],
		"toe2-2.R": [
			-6.108652428338212e-8,
			8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"tongue06.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"levator04.R": [
			-8.726645184253789e-9,
			3.4906584178706623e-8,
			-2.617993999365348e-8,
			0.999999999999999
		],
		"toe4-1.L": [
			2.6179940881831828e-8,
			1.7453293699176697e-8,
			-6.981316857945666e-8,
			0.9999999999999969
		],
		"upperleg01.R": [
			0.17831041151268653,
			1.0748162138085604e-7,
			-3.9735519825006404e-7,
			0.9839742868317275
		],
		"metacarpal1.R": [
			5.23598817636635e-8,
			3.490658806448721e-8,
			-6.108652073066836e-8,
			0.9999999999999964
		],
		"levator02.R": [
			5.235987821094978e-8,
			-6.108652428338246e-8,
			-1.7453295697578545e-8,
			0.9999999999999963
		],
		"toe3-1.L": [
			3.490658606608565e-8,
			-3.4906586066085765e-8,
			4.363322680944711e-8,
			0.9999999999999977
		],
		"toe3-1.R": [
			-2.6179939993653464e-8,
			8.726645295276114e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"levator02.L": [
			7.853981998095975e-8,
			4.3633230695228065e-8,
			-2.6179936440939114e-8,
			0.9999999999999956
		],
		"finger5-1.R": [
			0.20161510819733572,
			0.11523566678916386,
			0.5199961114545502,
			0.821995214899929
		],
		"metacarpal1.L": [
			-2.6179937329118063e-8,
			2.6179937218095972e-8,
			-1.0471975997461235e-7,
			0.9999999999999937
		],
		"toe4-1.R": [
			2.61799391054751e-8,
			5.235987998730707e-8,
			1.7453293921221276e-8,
			0.9999999999999978
		],
		"upperleg01.L": [
			-0.18114441340591336,
			0.14629819883108142,
			0.06170298350780243,
			0.9705546251174351
		],
		"head": [
			-0.0870417478468922,
			-0.031383715697398396,
			0.10449312610182138,
			0.990212089967726
		],
		"toe5-1.R": [
			1.745329658575659e-8,
			3.490658617710807e-8,
			-1.3089969286284658e-7,
			0.9999999999999908
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			-1.066161005983695e-15,
			-1.7453292144864463e-8,
			-6.108652428338229e-8,
			0.9999999999999979
		],
		"special04": [
			-7.853981998095985e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"metacarpal2.L": [
			-1.7453296585756558e-8,
			-7.853982031402751e-8,
			-5.235987821094999e-8,
			0.9999999999999956
		],
		"metacarpal2.R": [
			-2.6179932000047952e-8,
			8.726645372991726e-8,
			-8.726646072432758e-8,
			0.9999999999999917
		],
		"temporalis01.R": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"toe5-1.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"risorius02.R": [
			0,
			0,
			-3.490658428972887e-8,
			0.9999999999999996
		],
		"special05.L": [
			2.6179939105474995e-8,
			4.363322880784892e-8,
			2.617994088183188e-8,
			0.9999999999999984
		],
		"finger2-2.L": [
			-2.2846307649218957e-16,
			-8.726646183454534e-9,
			-2.6179939993653534e-8,
			0.9999999999999994
		],
		"foot.L": [
			-0.2734319097056278,
			-0.03457726563067942,
			-0.009911805918940707,
			0.9612185805318494
		],
		"toe3-3.R": [
			-6.108652783609577e-8,
			-2.617994609988017e-8,
			-9.599310857310678e-8,
			0.9999999999999928
		],
		"levator06.R": [
			-6.108652428338212e-8,
			8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"orbicularis03.R": [
			8.726646072432212e-9,
			6.661338147750939e-16,
			-4.363322873131176e-8,
			0.9999999999999994
		],
		"levator06.L": [
			-4.363322858580418e-8,
			1.7453291367708346e-8,
			-1.745329303304287e-8,
			0.999999999999999
		],
		"orbicularis03.L": [
			8.72664696061062e-9,
			-2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"foot.R": [
			0.24697500641840936,
			-0.022511803761614657,
			-0.001576548890844342,
			0.9687590409331001
		],
		"root": [
			0.0745775285412027,
			0,
			0,
			0.997215218614661
		],
		"finger2-2.R": [
			0.24841802680344846,
			0.16187565313994012,
			0.15234444905412733,
			0.9428021667995854
		],
		"risorius02.L": [
			-2.617993999365346e-8,
			-5.235987998730707e-8,
			1.361416935280011e-15,
			0.9999999999999983
		],
		"special05.R": [
			4.363322858580413e-8,
			3.490658440075123e-8,
			1.6405861018266948e-15,
			0.9999999999999987
		],
		"lowerleg02.L": [
			-0.009894719267259808,
			0.10826852903440243,
			0.003980636671479781,
			0.9940644720957683
		],
		"tongue05.L": [
			2.6179939993653494e-8,
			8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"finger5-1.L": [
			-3.4906578960658454e-8,
			7.853981653926922e-8,
			-6.981317213217043e-8,
			0.9999999999999942
		],
		"toe4-3.R": [
			4.363322858580417e-8,
			-8.726646516521441e-9,
			-4.068768463957589e-16,
			0.999999999999999
		],
		"wrist.R": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"toe4-3.L": [
			8.726646072432218e-9,
			-6.661338147750939e-16,
			5.235988014207866e-8,
			0.9999999999999986
		],
		"finger3-3.L": [
			1.745329303304287e-8,
			-3.490658440075123e-8,
			1.7453291256686037e-8,
			0.999999999999999
		],
		"tongue05.R": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"lowerleg02.R": [
			0.010713787091983427,
			0.11722732643044154,
			0.0043099459998787466,
			0.9930379615450742
		],
		"shoulder01.R": [
			0.1014450078731351,
			0.00772236030076956,
			0.031191992779291557,
			0.9943220479882069
		],
		"finger3-1.L": [
			8.726645184253878e-9,
			2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"special06.R": [
			3.4906584289728807e-8,
			-2.6179939993653534e-8,
			-8.72664696061079e-9,
			0.999999999999999
		],
		"finger4-3.L": [
			-5.2359879987306796e-8,
			4.363322858580432e-8,
			-8.7266482928784e-9,
			0.9999999999999978
		],
		"finger3-2.L": [
			7.853982353367289e-8,
			-6.108652805814074e-8,
			6.108652073067004e-8,
			0.9999999999999933
		],
		"upperarm01.R": [
			-0.29996791445329907,
			0.0720522834165006,
			0.0547027441492434,
			0.9496501084797225
		],
		"finger3-2.R": [
			0.4116888325632265,
			0.3287124044654298,
			0.4723829521020566,
			0.7066221103649596
		],
		"upperarm01.L": [
			0.15775814176215258,
			-0.006815183328870988,
			-0.047014214102588686,
			0.9863344187729952
		],
		"special06.L": [
			8.726645628343017e-9,
			1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"finger3-1.R": [
			0.27827437300400604,
			0.19853088062709923,
			0.35111995623423115,
			0.8717015768602966
		],
		"shoulder01.L": [
			0.006230998885875409,
			0.028452111295600546,
			-0.0038049481835740967,
			0.9995684940938403
		],
		"lowerarm01.R": [
			-0.34303250588229395,
			0.30394839461570666,
			-0.025734120310534726,
			0.8884153467666417
		],
		"special03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperarm02.L": [
			8.726650069235059e-9,
			8.726645717160864e-8,
			-4.363322858580405e-8,
			0.9999999999999953
		],
		"spine02": [
			0.0492390812901845,
			0.18685643195738533,
			0.05145951052340251,
			0.9798020746490308
		],
		"spine03": [
			0.13304735908412668,
			0.08937496359791208,
			-0.004405766708506822,
			0.9870618548714776
		],
		"spine01": [
			7.988914785982854e-8,
			-0.08390284663826642,
			-0.011347364919512945,
			0.9964093283562596
		],
		"upperarm02.R": [
			0.15234274390528582,
			0.17166199647192126,
			-0.0032508233414518394,
			0.9733002000895123
		],
		"spine04": [
			0.047041894247847625,
			0.11068988018850723,
			0.015208679217986677,
			0.9926245547465928
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.18860207474251983,
			-0.1671146880955504,
			0.014149997963202592,
			0.9676268474898706
		],
		"finger5-3.L": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			-7.853981998095985e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"oris05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			-7.853981998095991e-8,
			8.72664829287828e-9,
			2.6179939105476246e-8,
			0.9999999999999963
		],
		"finger2-3.L": [
			9.599311567853686e-8,
			5.235989097851501e-8,
			-1.134463936125626e-7,
			0.9999999999999879
		],
		"oris06": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger3-3.R": [
			0.32816792226599706,
			0.25492508427737925,
			0.3823338437486953,
			0.8253119701822693
		],
		"finger2-3.R": [
			0.5240586003304084,
			0.36215886946637066,
			0.30449706319593034,
			0.7081561093372184
		],
		"toe3-3.L": [
			-8.726645628343005e-9,
			-5.235987976526246e-8,
			8.726646516521441e-9,
			0.9999999999999984
		],
		"risorius03.L": [
			-1.2217304856676193e-7,
			-3.4906587842442605e-8,
			-2.617993555275131e-8,
			0.9999999999999918
		]
	},
	"sit01": {
		"toe1-1.L": [
			3.49065842897289e-8,
			1.7453293699176697e-8,
			-4.363322858580413e-8,
			0.999999999999998
		],
		"finger5-2.R": [
			-0.032086184063162264,
			-0.03890347645653891,
			-0.10659840218371158,
			0.9930225460500582
		],
		"finger4-2.R": [
			-0.037703111046718196,
			-0.028850635757134202,
			-0.060372459119740596,
			0.9970462789728688
		],
		"toe5-2.R": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe4-2.R": [
			-8.726646072432218e-9,
			6.661338147750939e-16,
			5.235988014207866e-8,
			0.9999999999999986
		],
		"clavicle.R": [
			1.7453290368507587e-8,
			5.235988020935167e-8,
			2.617994088183192e-8,
			0.9999999999999982
		],
		"neck03": [
			-8.726645717160755e-8,
			-3.4906584289728926e-8,
			3.1358776836655874e-15,
			0.9999999999999956
		],
		"neck02": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"neck01": [
			-1.7453293033042806e-8,
			-7.85398199809606e-8,
			-8.726644740164658e-9,
			0.9999999999999969
		],
		"clavicle.L": [
			-0.009078311961766667,
			0.14968274182842567,
			0.0006035776039970913,
			0.9886922153758092
		],
		"toe5-2.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe4-2.L": [
			0,
			0,
			0,
			1
		],
		"finger5-2.L": [
			0.16344572086369877,
			-0.009426041586660494,
			-0.13723657427865144,
			0.9769149240090523
		],
		"finger1-3.L": [
			-1.3089969286283663e-7,
			4.3633236135320885e-8,
			5.235987465823641e-8,
			0.9999999999999893
		],
		"toe1-1.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			2.6179939105474998e-8,
			-6.981316880150246e-8,
			-8.726647848788915e-9,
			0.9999999999999972
		],
		"oculi01.L": [
			6.108652783609577e-8,
			7.853982353367428e-8,
			-3.4906578960658394e-8,
			0.9999999999999944
		],
		"jaw": [
			2.617993999365346e-8,
			3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"finger1-3.R": [
			-0.20162531978731754,
			0.034206814136812036,
			0.07834790773153325,
			0.9757247202163952
		],
		"oculi01.R": [
			3.490658251337198e-8,
			-3.490658262439439e-8,
			-4.3633230362160965e-8,
			0.9999999999999979
		],
		"oculi02.R": [
			2.617993821729663e-8,
			6.108652439440476e-8,
			2.6179941770010327e-8,
			0.9999999999999977
		],
		"wrist.R": [
			0.15514800690550562,
			-0.2139840428643096,
			-0.10570496341435166,
			0.958627344729048
		],
		"finger1-1.L": [
			-8.726646427703486e-8,
			1.2217305589423688e-7,
			5.235986932916384e-8,
			0.9999999999999876
		],
		"tongue07.R": [
			6.10865207306681e-8,
			-3.4906580625992945e-8,
			-6.108652783609546e-8,
			0.9999999999999957
		],
		"eye.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"finger2-1.R": [
			-0.09197880843659828,
			-0.05966445638765949,
			-0.0582631251791783,
			0.9922627976936879
		],
		"finger4-3.R": [
			-0.081800622805521,
			-0.055355308633561084,
			-0.1373338362018759,
			0.9855880809693205
		],
		"finger2-1.L": [
			2.617994088183185e-8,
			-8.726647293677559e-9,
			5.2359879987300185e-8,
			0.9999999999999984
		],
		"eye.L": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"tongue07.L": [
			2.61799391054751e-8,
			-5.235987998730707e-8,
			-1.7453293921221276e-8,
			0.9999999999999978
		],
		"wrist.L": [
			0.19224837426391442,
			-0.03965399068943731,
			-0.09661997682078091,
			0.9757728750556838
		],
		"finger5-3.R": [
			-0.022854715064886986,
			-0.025854480591192996,
			-0.0777506507586545,
			0.9963754534006082
		],
		"lowerleg01.R": [
			8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"lowerarm02.L": [
			-2.6179939105475104e-8,
			-6.981316891252476e-8,
			1.7453293921221593e-8,
			0.9999999999999972
		],
		"oris07.L": [
			-2.6179945322724075e-8,
			8.726645717160864e-8,
			6.108652073066822e-8,
			0.9999999999999938
		],
		"oris07.R": [
			4.36332268094472e-8,
			-6.981316857945785e-8,
			-3.4906587842442294e-8,
			0.9999999999999958
		],
		"tongue00": [
			6.10865242833821e-8,
			1.2212453270876722e-15,
			-2.6179939969202333e-8,
			0.9999999999999977
		],
		"lowerarm02.R": [
			-8.726645628343013e-9,
			3.4906584178706623e-8,
			-1.745329214486445e-8,
			0.9999999999999992
		],
		"lowerleg01.L": [
			0.7282192914954296,
			0.06638397177078481,
			0.004647266234752762,
			0.6821057357201842
		],
		"tongue03": [
			-1.745329303304287e-8,
			-3.490658440075123e-8,
			-1.7453291256686037e-8,
			0.999999999999999
		],
		"finger1-1.R": [
			-0.047259505825403315,
			0.0023724420637966093,
			0.049695945743139236,
			0.9976428336857271
		],
		"metacarpal4.L": [
			-1.134463794016909e-7,
			1.570796258620888e-7,
			-1.221730698830427e-7,
			0.9999999999999737
		],
		"finger1-2.R": [
			-0.036951782575106125,
			0.0053418443920469905,
			0.017301111997421105,
			0.9991529922822959
		],
		"pelvis.R": [
			4.363322858580417e-8,
			8.726646516521441e-9,
			4.068768463957589e-16,
			0.999999999999999
		],
		"toe2-1.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"toe2-3.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe5-3.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"levator05.L": [
			7.615435000746988e-16,
			4.363322858580432e-8,
			-1.7453292144864436e-8,
			0.9999999999999989
		],
		"finger4-1.L": [
			0.05054049573092968,
			-0.03226221567552412,
			-0.09021396962318033,
			0.9941158118729453
		],
		"finger4-1.R": [
			-0.1061360785418888,
			-0.06774972355096354,
			-0.18945045513451766,
			0.9737831549374032
		],
		"levator05.R": [
			8.376979030217172e-16,
			9.599310846208908e-8,
			-8.726646072432192e-9,
			0.9999999999999953
		],
		"toe5-3.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe2-3.R": [
			-3.4906584289728793e-8,
			-8.726647182655256e-9,
			-4.363322858580416e-8,
			0.9999999999999982
		],
		"finger4-2.L": [
			0.05761233589416657,
			-0.04408566577636208,
			-0.09225232053852968,
			0.9930895136799749
		],
		"toe2-1.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"finger1-2.L": [
			5.2359879987306704e-8,
			-1.745329336610979e-8,
			8.726645184253104e-9,
			0.9999999999999986
		],
		"pelvis.L": [
			-4.363322858580417e-8,
			8.726645628343022e-9,
			-8.726646516520993e-9,
			0.999999999999999
		],
		"metacarpal4.R": [
			-0.1098802529856072,
			-0.03288957852793861,
			-0.1871051947335423,
			0.9756209569970277
		],
		"tongue04": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe3-2.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator03.R": [
			-1.7453285039436844e-8,
			7.85398198699383e-8,
			-8.72664571716076e-8,
			0.999999999999993
		],
		"upperleg02.R": [
			-0.09770662988172334,
			0.0035566920941355606,
			0.0033866863296956934,
			0.995203142466003
		],
		"upperleg02.L": [
			-0.19663427992396587,
			0.02288891681077776,
			0.05372967947928978,
			0.9787360108778391
		],
		"levator03.L": [
			-4.3633230362161065e-8,
			7.85398202030052e-8,
			1.745328859215099e-8,
			0.9999999999999959
		],
		"toe3-2.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal3.L": [
			-1.3089970707368857e-7,
			1.4835299599891272e-7,
			8.726643940803354e-8,
			0.9999999999999768
		],
		"tongue01": [
			-8.72664571716077e-8,
			4.363322725353669e-8,
			-1.74532956975764e-8,
			0.9999999999999953
		],
		"breast.L": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"temporalis02.R": [
			6.10865242833821e-8,
			1.2212453270876722e-15,
			-2.6179939969202333e-8,
			0.9999999999999977
		],
		"tongue02": [
			4.363323036216087e-8,
			5.235988043139628e-8,
			-1.7453289480329435e-8,
			0.9999999999999978
		],
		"oris04.R": [
			6.108652428338185e-8,
			-3.490658218030518e-8,
			-2.6179941770008798e-8,
			0.9999999999999972
		],
		"oris04.L": [
			8.72664571716075e-8,
			-1.745329158975295e-8,
			-8.726647404697831e-9,
			0.9999999999999962
		],
		"temporalis02.L": [
			8.726645361889379e-8,
			6.108652061964648e-8,
			3.4906589618799e-8,
			0.9999999999999937
		],
		"breast.R": [
			2.6179940881831953e-8,
			-1.7453293810199e-8,
			5.235987998730656e-8,
			0.9999999999999983
		],
		"oris03.R": [
			4.363322680944749e-8,
			1.0471975975256953e-7,
			8.726650513321782e-9,
			0.9999999999999932
		],
		"oris06.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"orbicularis04.R": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe1-2.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-2.L": [
			-3.490658428972881e-8,
			-1.745329158975295e-8,
			1.7453293033042366e-8,
			0.9999999999999991
		],
		"orbicularis04.L": [
			1.7453292144864443e-8,
			-2.220446049250313e-16,
			2.6179940054284205e-8,
			0.9999999999999996
		],
		"metacarpal3.R": [
			-0.14387131775609757,
			-0.07892079277092612,
			-0.1457275141200134,
			0.9756208505479645
		],
		"oris06.R": [
			-2.6179947099081133e-8,
			6.981317235421614e-8,
			1.0471975642189525e-7,
			0.9999999999999917
		],
		"levator04.L": [
			-8.726646072432223e-9,
			3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"tongue06.L": [
			-3.490658428972876e-8,
			-6.108652472747167e-8,
			2.198084113085672e-15,
			0.9999999999999978
		],
		"toe2-2.L": [
			1.7453292144864407e-8,
			-6.108652472747167e-8,
			-1.0183439690065433e-15,
			0.9999999999999984
		],
		"toe2-2.R": [
			2.6179939993653474e-8,
			-8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"tongue06.R": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"levator04.R": [
			-8.726646960610704e-9,
			2.6179939993653534e-8,
			2.6179939993653468e-8,
			0.9999999999999992
		],
		"toe4-1.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"upperleg01.R": [
			-0.32709107938277965,
			0.01033499581587427,
			0.009898909285640526,
			0.9448844507370462
		],
		"metacarpal1.R": [
			-0.1708560167581953,
			-0.11041029315150974,
			-0.08235279178211048,
			0.9756207287616495
		],
		"levator02.R": [
			2.6179939105474998e-8,
			-6.981316880150246e-8,
			-8.726647848788915e-9,
			0.9999999999999972
		],
		"toe3-1.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"toe3-1.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"levator02.L": [
			5.235987998730658e-8,
			1.0471976008563644e-7,
			5.406259684038563e-15,
			0.9999999999999931
		],
		"finger5-1.R": [
			-0.05996250924798033,
			-0.06463370297098003,
			-0.21425699212376845,
			0.9727902771157928
		],
		"metacarpal1.L": [
			-6.108652073066813e-8,
			6.108652073066878e-8,
			-3.490658784244205e-8,
			0.9999999999999956
		],
		"toe4-1.R": [
			1.5230870001493993e-16,
			-8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"upperleg01.L": [
			-0.6269253115035869,
			0.06019574165008634,
			-0.017150301801370053,
			0.7765610044493921
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			3.490658428972881e-8,
			1.6653345369377348e-15,
			-4.363322861363843e-8,
			0.9999999999999984
		],
		"special01": [
			1.7453292144864436e-8,
			4.363322869682662e-8,
			6.702088926697263e-16,
			0.9999999999999991
		],
		"temporalis01.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"special04": [
			8.726646072432223e-9,
			-3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"metacarpal2.L": [
			-4.363322858580416e-8,
			-2.617994021569814e-8,
			1.1643607064032247e-15,
			0.9999999999999988
		],
		"metacarpal2.R": [
			-0.1421261994510505,
			-0.07722914200576725,
			-0.14832295957079553,
			0.9756208806287477
		],
		"temporalis01.R": [
			1.7453292144864436e-8,
			3.490658440075123e-8,
			8.726646516521445e-9,
			0.9999999999999993
		],
		"toe5-1.L": [
			9.13852305968756e-16,
			1.7453292255886765e-8,
			-5.235987998730695e-8,
			0.9999999999999986
		],
		"risorius02.R": [
			-6.108652428338209e-8,
			3.490658584404116e-8,
			1.7453290368507594e-8,
			0.9999999999999973
		],
		"special05.L": [
			1.7453291256686003e-8,
			5.235987976526246e-8,
			8.726646960611257e-9,
			0.9999999999999984
		],
		"finger2-2.L": [
			8.726646516521441e-9,
			2.6179940104675836e-8,
			-8.726645628343022e-9,
			0.9999999999999998
		],
		"foot.L": [
			0.33814198413222785,
			-0.06259162387951711,
			0.20235966460293953,
			0.9169475739261385
		],
		"toe3-3.R": [
			8.726645628343012e-9,
			-8.726645406298417e-9,
			-4.363322858580416e-8,
			0.9999999999999992
		],
		"levator06.R": [
			8.726646072432207e-9,
			-6.981316835741325e-8,
			-6.527107176072624e-16,
			0.9999999999999976
		],
		"orbicularis03.R": [
			1.7453292144864446e-8,
			5.551115123125783e-16,
			-3.490658429686185e-8,
			0.9999999999999992
		],
		"levator06.L": [
			8.72664740469985e-9,
			2.617993977160893e-8,
			-4.363322858580432e-8,
			0.9999999999999988
		],
		"orbicularis03.L": [
			-1.7453292144864473e-8,
			4.363322880784892e-8,
			-8.726646960610506e-9,
			0.9999999999999988
		],
		"foot.R": [
			0.14508641966092065,
			-0.013225390803066839,
			-0.000926013985110333,
			0.9893301584234563
		],
		"root": [
			-0.33361393895387637,
			-0.007009048421216968,
			-0.009344239935399788,
			0.9426374160598214
		],
		"finger2-2.R": [
			-0.17334570586489081,
			-0.11295483417977192,
			-0.10630754934994435,
			0.9725693685515865
		],
		"risorius02.L": [
			-6.108652428338214e-8,
			-8.726648625945188e-9,
			-4.363322858580311e-8,
			0.9999999999999971
		],
		"special05.R": [
			-4.363322858580409e-8,
			8.726647404699861e-9,
			2.6179939993652998e-8,
			0.9999999999999986
		],
		"lowerleg02.L": [
			-0.00643881988893256,
			0.07045068513805153,
			0.0025909659663232573,
			0.997491117482947
		],
		"tongue05.L": [
			3.490658428972878e-8,
			-1.7453290923619136e-8,
			-3.490658428972879e-8,
			0.9999999999999988
		],
		"finger5-1.L": [
			0.048298096730249825,
			-0.05206273642825199,
			-0.17258096308657922,
			0.9824319704223528
		],
		"toe4-3.R": [
			3.4906584289728793e-8,
			1.7453292366909068e-8,
			8.7266465165216e-9,
			0.9999999999999996
		],
		"oris03.L": [
			-7.853981998095985e-8,
			3.490658595506346e-8,
			1.7453289480330276e-8,
			0.999999999999996
		],
		"toe4-3.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"finger3-3.L": [
			4.3633233914874465e-8,
			-7.853982353367428e-8,
			7.853981642824957e-8,
			0.9999999999999928
		],
		"tongue05.R": [
			4.363322858580419e-8,
			2.6179939660586626e-8,
			-8.7266447401649e-9,
			0.9999999999999984
		],
		"lowerleg02.R": [
			-8.726646516521436e-9,
			1.7453292366909068e-8,
			2.6179939993653527e-8,
			0.9999999999999996
		],
		"shoulder01.R": [
			0.015830069791274774,
			-0.02913021186372522,
			0.0014921921513231064,
			0.9994491547896578
		],
		"finger3-1.L": [
			2.617994354636741e-8,
			-1.1344639705423987e-7,
			3.490658073701449e-8,
			0.9999999999999926
		],
		"special06.R": [
			1.745329303304286e-8,
			6.981316869048015e-8,
			-1.7453291256686017e-8,
			0.9999999999999971
		],
		"finger4-3.L": [
			-9.138523059687563e-16,
			-5.235988009832937e-8,
			-1.745329214486443e-8,
			0.9999999999999987
		],
		"finger3-2.L": [
			0.06279616985813974,
			-0.05013847108917446,
			-0.07205287848756886,
			0.9941585172746064
		],
		"upperarm01.R": [
			-0.06583831808778708,
			-0.08506508598564644,
			0.16430593752689562,
			0.9805268002002975
		],
		"finger3-2.R": [
			-0.09190304008139923,
			-0.07337823560286283,
			-0.10545056249376401,
			0.9874460211238668
		],
		"upperarm01.L": [
			-0.3084288227425467,
			-0.27945912509406245,
			0.023258455571157337,
			0.9089737636190347
		],
		"special06.L": [
			2.6179939105475045e-8,
			1.745329158975295e-8,
			2.6179940881831907e-8,
			0.9999999999999996
		],
		"finger3-1.R": [
			-0.13245746625167393,
			-0.0944950497687741,
			-0.1671304322410354,
			0.972416126883089
		],
		"shoulder01.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"lowerarm01.R": [
			0.17999386450697694,
			-0.15948659628535722,
			0.013503087096417923,
			0.9705585510333838
		],
		"special03": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"upperarm02.L": [
			4.3633228585804106e-8,
			3.4906584289728926e-8,
			-8.726644740164946e-9,
			0.9999999999999984
		],
		"spine02": [
			0.056046654409118955,
			1.1102230246251565e-16,
			0,
			0.9984281509099914
		],
		"spine03": [
			0.1626577998616062,
			-1.4381943969077327e-8,
			-2.0059772967711365e-8,
			0.9866825427381294
		],
		"spine01": [
			0.12292652882773933,
			-0.16635008659134587,
			-0.0441718010054187,
			0.9773768818615226
		],
		"upperarm02.R": [
			-0.06091406693141478,
			-0.06863806603125155,
			0.0012982085086604607,
			0.9957793967521281
		],
		"spine04": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"spine05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.07840618496541713,
			-0.06947287570140892,
			0.005882041715258742,
			0.9944804629987486
		],
		"finger5-3.L": [
			0.0221690076348878,
			-0.0250790864975855,
			-0.07541804414306474,
			0.9965900326305523
		],
		"oris01": [
			1.0471975997461241e-7,
			1.7763568394002505e-15,
			-1.745329214486436e-8,
			0.9999999999999944
		],
		"oris02": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"oris05": [
			-1.7453292144864436e-8,
			-8.726646072432231e-9,
			1.7453292144864443e-8,
			0.9999999999999999
		],
		"risorius03.R": [
			4.363322858580412e-8,
			3.4906584178706623e-8,
			8.726647404700103e-9,
			0.9999999999999984
		],
		"finger2-3.L": [
			5.235988176366364e-8,
			1.745329558655584e-8,
			-6.981316857943709e-8,
			0.999999999999996
		],
		"oris06": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"finger3-3.R": [
			-0.058105668809720276,
			-0.04513578362296189,
			-0.06769499378292065,
			0.9949893869311606
		],
		"finger2-3.R": [
			-0.1255697117479206,
			-0.08677781730944423,
			-0.0729594997433235,
			0.9855854956886065
		],
		"toe3-3.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"risorius03.L": [
			-7.853981998095987e-8,
			8.72664329687467e-9,
			-3.4906584289727655e-8,
			0.9999999999999963
		]
	},
	"Harvey_FashionCloseup2": {
		"toe1-1.L": [
			-0.19477089363709968,
			-0.0178947388042624,
			0.01349462111570301,
			0.9805926639109007
		],
		"finger5-2.R": [
			0.027131498369240316,
			0.028265817834310147,
			0.09143241617891258,
			0.995040219594205
		],
		"finger1-3.R": [
			-1.7453291256686053e-8,
			-2.617993988263123e-8,
			1.745329303304289e-8,
			0.9999999999999994
		],
		"toe5-2.R": [
			0,
			0,
			0,
			1
		],
		"toe4-2.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"clavicle.R": [
			0.025157175612350362,
			0.0923048166452809,
			-0.10221157611166584,
			0.9901513677453865
		],
		"neck03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			0.025157177335938693,
			-0.09230480901555471,
			0.10221160530196301,
			0.9901513653995972
		],
		"toe5-2.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe4-2.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"finger5-2.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger1-3.L": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"toe1-1.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			-2.617993821729672e-8,
			-5.235987843299483e-8,
			3.490658606608563e-8,
			0.999999999999998
		],
		"oculi01.L": [
			-4.363322858580419e-8,
			-4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			0.048818087271168535,
			0.032853866421261646,
			0.08020366764611236,
			0.9950400944245767
		],
		"oculi01.R": [
			-4.3633228585804e-8,
			3.490658451177353e-8,
			1.745329036850783e-8,
			0.9999999999999983
		],
		"oculi02.R": [
			-2.6179939105475045e-8,
			1.745329114566374e-8,
			-4.363322858580426e-8,
			0.9999999999999988
		],
		"wrist.R": [
			-0.12407856940282651,
			0.04066509053101819,
			-0.3775655060415342,
			0.9167306843749982
		],
		"finger1-1.L": [
			0.21610711026339194,
			0.4388054475140132,
			-0.0938809708643277,
			0.8671411992491213
		],
		"tongue07.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"eye.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger2-1.R": [
			0.06607323399523517,
			-0.06314392677409764,
			-0.03929784890917258,
			0.9950391205033448
		],
		"finger4-3.R": [
			0.09511522496060996,
			0.05737369981788487,
			0.16156257405613197,
			0.9805910907275553
		],
		"finger2-1.L": [
			0.21138664580907246,
			-0.1328358256876916,
			-0.14214898742587825,
			0.9578434082673727
		],
		"eye.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue07.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"wrist.L": [
			0.0584160611279057,
			0.12806598510085077,
			-0.48927387809730793,
			0.8606960784586336
		],
		"finger5-3.R": [
			0.02680226502441698,
			0.02575810620706831,
			0.09226599764130804,
			0.9950402726691219
		],
		"lowerleg01.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"lowerarm02.L": [
			-1.7453294809399725e-8,
			-4.363323047318346e-8,
			-5.23598799873068e-8,
			0.9999999999999976
		],
		"oris07.L": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"oris07.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			8.726645184253878e-9,
			2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"lowerleg01.L": [
			0.09913224247401435,
			0.007914647993908841,
			-0.002104000845250509,
			0.9950405670271181
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"metacarpal4.L": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"finger1-2.R": [
			0.07254002862229095,
			0.10004372611964485,
			-0.31578703103248607,
			0.9407485041940074
		],
		"pelvis.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"toe5-3.L": [
			4.3633228585804185e-8,
			-3.3306690738754696e-16,
			8.726646077118623e-9,
			0.9999999999999991
		],
		"levator05.L": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"finger4-1.L": [
			-0.035240214538274264,
			-0.07234038720911518,
			-0.11455660968722402,
			0.9901524018224167
		],
		"finger4-1.R": [
			-0.08216014389854812,
			0.04653077090981805,
			0.03130707178720971,
			0.9950399315450704
		],
		"levator05.R": [
			-4.569261529843785e-16,
			-2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"toe5-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			-8.726645628342998e-9,
			-6.108652406133785e-8,
			8.726646516521382e-9,
			0.9999999999999979
		],
		"toe2-1.L": [
			-0.19431514383631127,
			-0.018258889431111647,
			0.01860903836540772,
			0.9805926481081384
		],
		"finger1-2.L": [
			0.11609786245660755,
			-0.07785420537929111,
			0.007637698237273179,
			0.9901523491884477
		],
		"pelvis.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			1.523087000149394e-15,
			-3.4906584178706623e-8,
			4.36332285858042e-8,
			0.9999999999999983
		],
		"tongue04": [
			0,
			0,
			0,
			1
		],
		"toe3-2.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"levator03.R": [
			3.490658428972883e-8,
			5.235987998730707e-8,
			1.6734015079435647e-15,
			0.9999999999999981
		],
		"upperleg02.R": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"upperleg02.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator03.L": [
			4.363322858580412e-8,
			-2.6179940992854256e-8,
			2.617993910547514e-8,
			0.9999999999999986
		],
		"toe3-2.R": [
			-2.6179939993653497e-8,
			-8.726646405499139e-9,
			-1.7453292144864423e-8,
			0.9999999999999994
		],
		"metacarpal3.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"tongue01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"breast.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"temporalis02.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"tongue02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris04.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"oris04.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"temporalis02.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"breast.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"oris03.R": [
			-2.7755575615628914e-16,
			-1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"oris06.L": [
			-1.745329303304289e-8,
			3.490658440075123e-8,
			2.617993910547502e-8,
			0.9999999999999988
		],
		"orbicularis04.R": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"toe1-2.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe1-2.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"orbicularis04.L": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"metacarpal3.R": [
			-8.726646516521448e-9,
			-8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"oris06.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"levator04.L": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue06.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"toe2-2.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"toe2-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue06.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator04.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe4-1.L": [
			-0.19161650791730633,
			-0.025005944479711495,
			0.033107543275038225,
			0.980592528633859
		],
		"upperleg01.R": [
			0.0021043678364679108,
			0.04494640220826396,
			0.14130621202584984,
			0.9889428431448639
		],
		"metacarpal1.R": [
			2.6179939105474995e-8,
			-4.363322880784892e-8,
			-2.617994088183188e-8,
			0.9999999999999984
		],
		"levator02.R": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"toe3-1.L": [
			-0.19259859254486292,
			-0.020028391903508025,
			0.03070497176105053,
			0.9805926016326302
		],
		"toe3-1.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator02.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"finger5-1.R": [
			-0.1110929008870997,
			0.07227265264344851,
			0.11787322963209061,
			0.9841447722710663
		],
		"metacarpal1.L": [
			-1.74532939212213e-8,
			2.6179940992854256e-8,
			6.981316857945851e-8,
			0.999999999999997
		],
		"toe4-1.R": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"upperleg01.L": [
			0.08755647904526909,
			0.10448474548427389,
			-0.031906567069626135,
			0.9901508834092472
		],
		"head": [
			-3.6514488676047054e-8,
			-0.002614674232801484,
			-0.04985183762639569,
			0.9987532016288739
		],
		"toe5-1.R": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			2.2846307649218933e-16,
			-2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			-8.726645184253779e-9,
			-2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"metacarpal2.R": [
			2.617993999365353e-8,
			-1.745329336610979e-8,
			1.7453291256686023e-8,
			0.9999999999999997
		],
		"temporalis01.R": [
			1.7453293033042873e-8,
			-1.7453293144065185e-8,
			4.363322858580396e-8,
			0.9999999999999986
		],
		"toe5-1.L": [
			-0.09851025659704502,
			-0.01029158464651625,
			0.009174964573503296,
			0.9950405180974905
		],
		"risorius02.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"special05.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger2-2.L": [
			2.6179939993653497e-8,
			-8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"foot.L": [
			-0.09310629138983717,
			-0.054065435577969834,
			0.0894735810897893,
			0.9901528293482597
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"levator06.R": [
			-6.092348000597591e-16,
			1.745329203384216e-8,
			3.490658428972889e-8,
			0.9999999999999993
		],
		"orbicularis03.R": [
			-4.3633228585804185e-8,
			2.6179939660586626e-8,
			-8.726647404700228e-9,
			0.9999999999999984
		],
		"levator06.L": [
			8.726646516521441e-9,
			2.6179940104675836e-8,
			-8.726645628343022e-9,
			0.9999999999999998
		],
		"orbicularis03.L": [
			-8.72664562834302e-9,
			-3.4906584289728926e-8,
			8.726646516521445e-9,
			0.9999999999999994
		],
		"foot.R": [
			0.005566695707175361,
			0.04641199412111696,
			-0.08781013986910151,
			0.9950398575116343
		],
		"root": [
			-2.2659934238242162e-8,
			0.0010514256631327656,
			-0.04990920797540352,
			0.9987532054833879
		],
		"finger2-2.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"risorius02.L": [
			8.726645628343017e-9,
			-2.6179939993653534e-8,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"special05.R": [
			-1.745329214486445e-8,
			1.7453292366909068e-8,
			8.726645628343025e-9,
			0.9999999999999999
		],
		"lowerleg02.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue05.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-1.L": [
			-0.18152833687063924,
			-0.06578287432514274,
			-0.03405021043023549,
			0.9805919944238574
		],
		"toe4-3.R": [
			-5.235987998730684e-8,
			-8.881784197001252e-16,
			-1.7453292120936186e-8,
			0.9999999999999983
		],
		"oris03.L": [
			-2.7755575615628914e-16,
			-1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe4-3.L": [
			-5.235987998730683e-8,
			8.726646294476836e-9,
			-4.4331856927593173e-16,
			0.9999999999999987
		],
		"finger3-3.L": [
			0.11357365630725819,
			-0.08260619334754593,
			-0.13682428011148115,
			0.9805898009797999
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			0,
			0,
			0,
			1
		],
		"shoulder01.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger3-1.L": [
			0.07197872321820836,
			-0.09702888140202581,
			-0.16172441722601327,
			0.979412922342081
		],
		"special06.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"finger4-3.L": [
			0.09511525859062092,
			-0.057373684332268304,
			-0.1615625737856714,
			0.9805910884161299
		],
		"finger3-2.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"upperarm01.R": [
			-0.25635587583388886,
			0.35856640126936834,
			0.2547238472021329,
			0.8607134032142867
		],
		"finger3-2.R": [
			-1.7453291256686047e-8,
			-3.4906584289728926e-8,
			1.745329303304288e-8,
			0.999999999999999
		],
		"upperarm01.L": [
			-0.13822929178114154,
			-0.24780804724091143,
			-0.35464946329790903,
			0.8909026842471823
		],
		"special06.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger3-1.R": [
			-0.03975543194376223,
			0.02387140332070592,
			0.01849520600162055,
			0.9987530170614868
		],
		"shoulder01.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerarm01.R": [
			-0.5742872218087306,
			0.545829739879329,
			-0.028461876191431184,
			0.6094702646841254
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			8.726646516521431e-9,
			8.726646516521441e-9,
			-4.3633228585804225e-8,
			0.9999999999999991
		],
		"spine02": [
			-1.4536483068520866e-8,
			-0.0003155912194869881,
			0.049919285143824425,
			0.998753205438116
		],
		"spine03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"spine01": [
			-2.2832253786964226e-8,
			0.004905353104103227,
			0.04967889942284172,
			0.9987531949701381
		],
		"upperarm02.R": [
			-3.490658428972884e-8,
			-3.4906584289728926e-8,
			8.726647404699887e-9,
			0.9999999999999989
		],
		"spine04": [
			0,
			0,
			0,
			1
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			-0.04003523167270805,
			-0.5688156712092667,
			-0.09041627130980467,
			0.816499118367005
		],
		"finger5-3.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			2.617993910547505e-8,
			-5.235987976526246e-8,
			-8.726647404699368e-9,
			0.999999999999998
		],
		"finger2-3.L": [
			4.3633228585804066e-8,
			8.726647404699861e-9,
			-3.4906584289728654e-8,
			0.9999999999999986
		],
		"toe3-3.R": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger3-3.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger2-3.R": [
			-0.07333540450882452,
			-0.0495041658734523,
			-0.04546368741752955,
			0.9950398530376068
		],
		"toe3-3.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"risorius03.L": [
			2.617993999365348e-8,
			4.363322869682662e-8,
			1.035761105051169e-15,
			0.9999999999999987
		]
	},
	"Harvey_sittingfashion1": {
		"toe1-1.L": [
			-0.3688777632440821,
			-0.03388391243606981,
			0.02555572109331234,
			0.9285084713568683
		],
		"finger5-2.R": [
			-1.7453292144864443e-8,
			-6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"finger1-3.R": [
			8.72664696061062e-9,
			-2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"toe5-2.R": [
			-6.108652428338212e-8,
			8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"toe4-2.R": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"clavicle.R": [
			0.052268122623326745,
			0.18890450110424206,
			-0.006507602402987155,
			0.9805818598826694
		],
		"neck03": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"neck02": [
			4.363322858580417e-8,
			-8.726646516521441e-9,
			-4.068768463957589e-16,
			0.999999999999999
		],
		"neck01": [
			-0.09947011691017074,
			8.683366914397084e-9,
			-8.680404995952906e-10,
			0.9950405498480338
		],
		"clavicle.L": [
			0.05226811207502322,
			-0.1889045801025495,
			0.006507600583818274,
			0.9805818452383429
		],
		"toe5-2.L": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"toe4-2.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"finger5-2.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"finger1-3.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe1-1.R": [
			-0.36887769510186524,
			0.03388390671021768,
			-0.025555716800317672,
			0.92850849875551
		],
		"oculi02.L": [
			1.7453293033042916e-8,
			-2.617994110387656e-8,
			2.6179939105475286e-8,
			0.9999999999999992
		],
		"oculi01.L": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			-3.490658428972882e-8,
			-2.6179939549564324e-8,
			2.617994088183189e-8,
			0.9999999999999989
		],
		"oculi01.R": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"oculi02.R": [
			-2.6179939993653494e-8,
			-6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"wrist.R": [
			-0.0030998415630411483,
			-0.281569723681115,
			-0.18905376703162216,
			0.9407271415557104
		],
		"finger1-1.L": [
			-0.09182210201856525,
			0.09333080603804478,
			-0.049587709303191535,
			0.9901510598445284
		],
		"tongue07.R": [
			-3.4906584289728906e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999994
		],
		"eye.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger2-1.R": [
			0.27374644482191945,
			0.07171824583118402,
			0.10384413319980831,
			0.9534861158728211
		],
		"finger4-3.R": [
			2.6179939993653527e-8,
			-4.3633228474782015e-8,
			8.7266447401645e-9,
			0.9999999999999987
		],
		"finger2-1.L": [
			-0.07877545995921408,
			0.1521416030247631,
			0.1350915755697336,
			0.9759086154693773
		],
		"eye.L": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"tongue07.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"wrist.L": [
			0.152541529471813,
			0.12219069306938157,
			0.01568437568637956,
			0.9805888622011537
		],
		"finger5-3.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"lowerleg01.R": [
			0.571467030316316,
			-0.04560603441721678,
			0.012136674099217619,
			0.8192668820524824
		],
		"lowerarm02.L": [
			1.7453291256686e-8,
			-4.363322836375971e-8,
			-2.617994088183192e-8,
			0.9999999999999984
		],
		"oris07.L": [
			8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"oris07.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			8.726646960610633e-9,
			-1.745329203384216e-8,
			4.3633228585804245e-8,
			0.9999999999999988
		],
		"lowerleg01.L": [
			0.5512499584130952,
			0.20599132807978582,
			-0.004439044628170344,
			0.8084994440247165
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			-1.7453293033042863e-8,
			6.108652428338246e-8,
			1.7453291256686043e-8,
			0.9999999999999979
		],
		"metacarpal4.L": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger1-2.R": [
			2.6179940881831874e-8,
			-4.363322880784892e-8,
			1.7453291256686013e-8,
			0.9999999999999986
		],
		"pelvis.R": [
			-0.5098789212338141,
			-0.06048139047510315,
			-0.03174614193753046,
			0.8575299817264248
		],
		"toe2-1.R": [
			-0.3680145450434492,
			0.03457332279521108,
			-0.03524204434155878,
			0.9285084696964206
		],
		"toe2-3.L": [
			1.745329214486445e-8,
			1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"toe5-3.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator05.L": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger4-1.L": [
			-0.03524023360336993,
			-0.07234039825394556,
			-0.11455660588877492,
			0.990152400776408
		],
		"finger4-1.R": [
			0.055646290216031805,
			0.1198378245746674,
			0.2709568779278617,
			0.953480338806202
		],
		"levator05.R": [
			-3.8077175003734897e-16,
			4.363322858580432e-8,
			8.726646072432225e-9,
			0.999999999999999
		],
		"toe5-3.R": [
			6.108652428338212e-8,
			-8.726645739365324e-9,
			-8.72664651652142e-9,
			0.9999999999999983
		],
		"toe2-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			1.745329214486448e-8,
			-8.72664507323151e-9,
			-4.36332285858036e-8,
			0.9999999999999989
		],
		"toe2-1.L": [
			-0.3680145345216278,
			-0.034573354851880844,
			0.03524204806783703,
			0.9285084725316723
		],
		"finger1-2.L": [
			8.726647404699846e-9,
			4.363322825273741e-8,
			-2.6179939993653474e-8,
			0.9999999999999982
		],
		"pelvis.L": [
			-0.5586071185469538,
			0.09274366677610679,
			0.11241371947914666,
			0.8165291513806812
		],
		"metacarpal4.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator03.R": [
			2.617993999365347e-8,
			2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"upperleg02.R": [
			-0.09891961815195333,
			0.010350611272886834,
			-0.001461463701479557,
			0.9950405208406331
		],
		"upperleg02.L": [
			-0.09891963266204795,
			-0.010350633710659807,
			0.001461501104046121,
			0.9950405191098077
		],
		"levator03.L": [
			6.853892559463472e-16,
			-2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"toe3-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.L": [
			8.726645628343032e-9,
			-2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"breast.L": [
			-2.6179939993653527e-8,
			4.3633228474782015e-8,
			8.7266447401645e-9,
			0.9999999999999987
		],
		"temporalis02.R": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"tongue02": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"oris04.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"temporalis02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"breast.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"oris03.R": [
			-8.726646960610638e-9,
			-1.7453292144864463e-8,
			-4.3633228585804265e-8,
			0.9999999999999988
		],
		"oris06.L": [
			-2.617993999365348e-8,
			4.363322869682662e-8,
			-1.035761105051169e-15,
			0.9999999999999987
		],
		"orbicularis04.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe1-2.R": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe1-2.L": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"orbicularis04.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"metacarpal3.R": [
			0,
			0,
			-3.490658428972887e-8,
			0.9999999999999996
		],
		"oris06.R": [
			-3.4906584289728866e-8,
			5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"levator04.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"tongue06.L": [
			-1.745329214486444e-8,
			8.726646183454534e-9,
			3.490658428972891e-8,
			0.9999999999999996
		],
		"toe2-2.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"toe2-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue06.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"levator04.R": [
			-8.726646516521441e-9,
			2.6179940104675836e-8,
			8.726645628343022e-9,
			0.9999999999999998
		],
		"toe4-1.L": [
			-0.36290348822417196,
			-0.04734935585492539,
			0.06270068988914382,
			0.9285083307231429
		],
		"upperleg01.R": [
			-0.0997335264518384,
			-0.04853939105144589,
			-0.1878509636633078,
			0.9759145283622959
		],
		"metacarpal1.R": [
			2.6179939993653474e-8,
			-8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"levator02.R": [
			2.6179940881831887e-8,
			2.617994110387656e-8,
			-1.745329125668601e-8,
			0.9999999999999994
		],
		"toe3-1.L": [
			-0.36476358950796595,
			-0.03792396197076109,
			0.05815085832175577,
			0.9285083599807525
		],
		"toe3-1.R": [
			-0.3647635295719905,
			0.03792396175312951,
			-0.05815087348956843,
			0.9285083825854944
		],
		"levator02.L": [
			8.72664651652143e-9,
			-2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"finger5-1.R": [
			-0.03966875555315904,
			0.0778773306331787,
			0.19988860105438958,
			0.9759129358579246
		],
		"metacarpal1.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe4-1.R": [
			-0.28076707948782087,
			0.03663722245721979,
			-0.04851071666390499,
			0.9578487727064505
		],
		"upperleg01.L": [
			-0.005281952841623246,
			0.11255507835524148,
			0.35381451669692127,
			0.9285034965389997
		],
		"head": [
			-0.09898132786068414,
			-0.09887762111275256,
			0.005181626927380632,
			0.9901510306616889
		],
		"toe5-1.R": [
			-0.1941639355377292,
			0.02028403850757876,
			-0.01808388138441984,
			0.9805926254833849
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			-9.13852305968756e-16,
			-1.7453292255886765e-8,
			-5.235987998730695e-8,
			0.9999999999999986
		],
		"special04": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"metacarpal2.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"metacarpal2.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"temporalis01.R": [
			1.7453291256686083e-8,
			2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			-0.19416394910292253,
			-0.02028402050818401,
			0.018083887864201537,
			0.9805926230502127
		],
		"risorius02.R": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"special05.L": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger2-2.L": [
			0.14520588558988304,
			-0.09143754488682154,
			-0.09485901784746258,
			0.98058971690924
		],
		"foot.L": [
			0.44851353882589634,
			-0.04710035425574788,
			0.14612519078654543,
			0.8804911076986808
		],
		"oris06": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			-8.726647404699835e-9,
			4.363322880784892e-8,
			3.490658428972884e-8,
			0.9999999999999982
		],
		"orbicularis03.R": [
			-2.617993999365348e-8,
			1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"levator06.L": [
			8.72664651652143e-9,
			-2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"orbicularis03.L": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"foot.R": [
			0.37617547397971896,
			0.24863719862908307,
			0.054295488801505726,
			0.8909116432788503
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			4.3633228585804185e-8,
			2.6179939660586626e-8,
			8.726647404700228e-9,
			0.9999999999999984
		],
		"risorius02.L": [
			-3.490658428972882e-8,
			-5.235988009832937e-8,
			8.726647848789038e-9,
			0.9999999999999978
		],
		"special05.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"lowerleg02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue05.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			-0.06594687837274012,
			-0.056110538277069355,
			-0.10999626168109736,
			0.9901532402327089
		],
		"toe4-3.R": [
			-5.2359879987306836e-8,
			-5.551115123125783e-16,
			-8.726646040608206e-9,
			0.9999999999999987
		],
		"oris03.L": [
			1.5230870001493993e-16,
			-8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe4-3.L": [
			-3.4906584289728754e-8,
			4.363322869682662e-8,
			8.7266447401648e-9,
			0.9999999999999986
		],
		"finger3-3.L": [
			2.6179939105475058e-8,
			2.617993943854202e-8,
			2.6179940881831917e-8,
			0.9999999999999991
		],
		"tongue05.R": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"lowerleg02.R": [
			-1.745329214486445e-8,
			-1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"shoulder01.R": [
			-0.08679196714949336,
			-0.046573432315955454,
			-0.09946831750958149,
			0.9901535858908179
		],
		"finger3-1.L": [
			-0.05636800441118072,
			0.03738751919320893,
			0.07293744160890223,
			0.9950401756204755
		],
		"special06.R": [
			0,
			0,
			0,
			1
		],
		"finger4-3.L": [
			6.092348000597588e-16,
			3.490658440075123e-8,
			-1.7453292144864443e-8,
			0.9999999999999992
		],
		"finger3-2.L": [
			0.057677237226485024,
			-0.042972624239926316,
			-0.06872020068609425,
			0.9950398102033494
		],
		"upperarm01.R": [
			-0.007561987688990677,
			-0.001427970742302942,
			0.41021344240339586,
			0.9119570762449882
		],
		"finger3-2.R": [
			-3.490658428972885e-8,
			-1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"upperarm01.L": [
			-0.13539152509798122,
			-0.12010502094543496,
			-0.4381567405461725,
			0.8804899713167056
		],
		"special06.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger3-1.R": [
			0.1627836136637607,
			0.10800582579981433,
			0.2106465703316542,
			0.9578435462659749
		],
		"shoulder01.L": [
			0.0009138459305278808,
			0.0006806975322064535,
			0.09946339957665559,
			0.9950405688619636
		],
		"lowerarm01.R": [
			0.03718516972118889,
			-0.03331268166079182,
			0.0005695712163810805,
			0.998752824267347
		],
		"special03": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.L": [
			0.24766320146086424,
			-0.27639979725807307,
			0.012255534544081874,
			0.9285019615439107
		],
		"spine02": [
			-1.1075228067610266e-7,
			-0.0006288214727364627,
			0.09946796467441045,
			0.9950405663022355
		],
		"spine03": [
			-0.09898127046567713,
			0.09812820046047199,
			0.013197995015133357,
			0.9901511891115269
		],
		"spine01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.R": [
			0.3431105519934375,
			0.38289804869057653,
			-0.016987291796813308,
			0.8575404744600206
		],
		"spine04": [
			0.19511926116892728,
			0.03214962878534333,
			-0.09211246523510071,
			0.9759150419161334
		],
		"spine05": [
			1.5696469899576528e-9,
			-0.026682703488547177,
			-0.04219694951368662,
			0.9987529478235755
		],
		"lowerarm01.L": [
			0.1732791307621144,
			-0.11846355335176151,
			0.168421232700055,
			0.9631069606982363
		],
		"finger5-3.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			3.4906584289728807e-8,
			-2.6179939993653534e-8,
			-8.72664696061079e-9,
			0.999999999999999
		],
		"finger2-3.L": [
			6.981316857945735e-8,
			-2.6179940881831953e-8,
			8.726644296075377e-9,
			0.9999999999999971
		],
		"toe3-3.R": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"finger3-3.R": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger2-3.R": [
			6.108652428338209e-8,
			2.6179939993653534e-8,
			1.6135134219578416e-15,
			0.999999999999998
		],
		"toe3-3.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"risorius03.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		]
	},
	"Harvey_Fightpose2": {
		"toe1-1.L": [
			-0.0988181837289359,
			-0.009079396200767254,
			0.006846584898580093,
			0.9950405295285065
		],
		"finger5-2.R": [
			0.10125856492140294,
			0.10554747354788796,
			0.34130869435805467,
			0.9285013780352269
		],
		"finger1-3.R": [
			0.3415634022119529,
			-0.05176233421860876,
			-0.13611234314897222,
			0.9285087684390132
		],
		"toe5-2.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"toe4-2.R": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"clavicle.R": [
			-0.001238163271156722,
			-0.0030849405853943246,
			-0.09941444907246186,
			0.995040560685301
		],
		"neck03": [
			-0.09898124913638319,
			0.09186339500976948,
			0.036925552126855624,
			0.9901516715012944
		],
		"neck02": [
			0.04992026721873714,
			-9.151402191598379e-9,
			8.280129402642819e-9,
			0.9987532062130312
		],
		"neck01": [
			0.049920282027144026,
			2.5276025827913884e-8,
			1.873844148926821e-8,
			0.9987532054728686
		],
		"clavicle.L": [
			-0.0012381910974166954,
			0.0030849605786766876,
			0.09941448539855448,
			0.9950405569593506
		],
		"toe5-2.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe4-2.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"finger5-2.L": [
			0.1402555781369057,
			-0.14625330486255206,
			-0.4728755520352799,
			0.8575121316375606
		],
		"finger1-3.L": [
			0.2642574987285599,
			0.04005105369160322,
			0.10530613484539361,
			0.9578488948826115
		],
		"toe1-1.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"oculi02.L": [
			-3.4906582513371954e-8,
			-4.363322680944748e-8,
			2.6179941770010287e-8,
			0.9999999999999979
		],
		"oculi01.L": [
			-8.726646960610704e-9,
			-2.617993988263123e-8,
			-2.6179939993653468e-8,
			0.9999999999999991
		],
		"jaw": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger4-2.R": [
			0.21941443295875293,
			0.14772513600199078,
			0.36054388653354374,
			0.8944510588544631
		],
		"oculi01.R": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"oculi02.R": [
			2.6179939993653494e-8,
			8.726646960610651e-9,
			-3.490658428972892e-8,
			0.9999999999999989
		],
		"wrist.R": [
			-4.3633228585804086e-8,
			1.7453292144864463e-8,
			-8.726646960611766e-9,
			0.9999999999999989
		],
		"finger1-1.L": [
			4.363322858580413e-8,
			-3.490658440075123e-8,
			-1.6405861018266948e-15,
			0.9999999999999987
		],
		"tongue07.R": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"eye.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger2-1.R": [
			0.27322211565050614,
			0.1716904624683211,
			0.18373342734178255,
			0.9285009899262986
		],
		"finger4-3.R": [
			0.21689800971532405,
			0.13088059332199709,
			0.3684831009398326,
			0.8944527533609465
		],
		"finger2-1.L": [
			0.21138656515590448,
			-0.1328358379842577,
			-0.1421489811208074,
			0.9578434252971235
		],
		"eye.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue07.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"wrist.L": [
			-0.12537191878812484,
			0.194018804586216,
			-0.2907598209077913,
			0.9284919558035971
		],
		"finger5-3.R": [
			0.12044304768380772,
			0.1158434792037013,
			0.41476132746521066,
			0.8944533536355675
		],
		"lowerleg01.R": [
			0.28629484369294006,
			-0.02285338271631354,
			0.0060774801511181194,
			0.9578497009490945
		],
		"lowerarm02.L": [
			-0.1490937452492386,
			0.1634251261712052,
			-0.1833242252793957,
			0.9578389800426738
		],
		"oris07.L": [
			1.7453293033042876e-8,
			-2.6179940881831953e-8,
			3.4906584289728807e-8,
			0.9999999999999989
		],
		"oris07.R": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"tongue00": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"lowerarm02.R": [
			-0.10175567914710555,
			-0.11153166100336276,
			0.12511437452149776,
			0.9805880193247498
		],
		"lowerleg01.L": [
			0.2862948437720583,
			0.022853371991353955,
			-0.006077474953606121,
			0.9578497012143115
		],
		"tongue03": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"finger1-1.R": [
			8.726643407896924e-9,
			4.363322858580432e-8,
			6.108652428338221e-8,
			0.9999999999999971
		],
		"metacarpal4.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger1-2.R": [
			0.25819332945791157,
			-0.03178795209135077,
			-0.12186471525071703,
			0.9578490078828384
		],
		"pelvis.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"toe2-3.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-3.L": [
			0,
			0,
			0,
			1
		],
		"levator05.L": [
			2.7755575615628914e-16,
			1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"finger4-1.L": [
			0.1349946587224913,
			-0.07559317078767558,
			-0.24206141055999753,
			0.957845701647383
		],
		"finger4-1.R": [
			0.24170754922605844,
			0.13539013224204033,
			0.43348926211627276,
			0.8575161994787652
		],
		"levator05.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe5-3.R": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"toe2-3.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.2524271471877905,
			-0.1699537420526228,
			-0.4148100326785939,
			0.857513205562531
		],
		"toe2-1.L": [
			-0.09858696802381252,
			-0.009264034478148608,
			0.009441376551353605,
			0.9950405257123321
		],
		"finger1-2.L": [
			0.3337250080368427,
			0.041083153316803234,
			0.1575157597802669,
			0.9285087931437175
		],
		"pelvis.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"metacarpal4.R": [
			2.4369392002390255e-15,
			-3.4906584178706623e-8,
			6.981316857945753e-8,
			0.9999999999999969
		],
		"tongue04": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe3-2.L": [
			-2.617993999365348e-8,
			-1.745329247793137e-8,
			8.726646516521431e-9,
			0.9999999999999996
		],
		"levator03.R": [
			0,
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0.9999999999999991
		],
		"upperleg02.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"upperleg02.L": [
			-0.09891962541234173,
			-0.010350615949596853,
			0.0014614993691655827,
			0.9950405200178227
		],
		"levator03.L": [
			-1.7453293921221266e-8,
			-5.235987998730707e-8,
			-2.617993910547512e-8,
			0.9999999999999981
		],
		"toe3-2.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"metacarpal3.L": [
			8.72664651652144e-9,
			1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"tongue01": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"breast.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"temporalis02.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue02": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"oris04.R": [
			8.72664651652145e-9,
			-8.726646627543744e-9,
			2.6179939993653484e-8,
			0.9999999999999996
		],
		"oris04.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"temporalis02.L": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"breast.R": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"oris03.R": [
			0,
			0,
			0,
			1
		],
		"oris06.L": [
			-2.6179940881831874e-8,
			4.363322880784892e-8,
			1.7453291256686013e-8,
			0.9999999999999986
		],
		"orbicularis04.R": [
			3.490658428972882e-8,
			-8.726645850387627e-9,
			-1.7453292144864483e-8,
			0.9999999999999989
		],
		"toe1-2.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"toe1-2.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"orbicularis04.L": [
			3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"metacarpal3.R": [
			-2.284630764921893e-16,
			8.726645961409929e-9,
			2.61799399936535e-8,
			0.9999999999999996
		],
		"oris06.R": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"levator04.L": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"tongue06.L": [
			-2.220446049250313e-16,
			1.745329203384216e-8,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe2-2.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe2-2.R": [
			8.726646072432225e-9,
			-1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"tongue06.R": [
			-8.726646516521438e-9,
			1.7453292366909068e-8,
			1.7453292144864456e-8,
			0.9999999999999996
		],
		"levator04.R": [
			-8.726645628342998e-9,
			6.108652406133785e-8,
			-8.726646516521382e-9,
			0.9999999999999979
		],
		"toe4-1.L": [
			3.490658428972885e-8,
			-1.7453292144864463e-8,
			-6.052891516783062e-16,
			0.9999999999999991
		],
		"upperleg01.R": [
			-0.09978326679334232,
			-0.019252818314578146,
			-0.09626845250985629,
			0.9901540353431648
		],
		"metacarpal1.R": [
			6.092348000597591e-16,
			-1.745329203384216e-8,
			3.490658428972889e-8,
			0.9999999999999993
		],
		"levator02.R": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe3-1.L": [
			-0.0977160831259757,
			-0.010161571243265,
			0.015578263407221118,
			0.9950405153950266
		],
		"toe3-1.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"levator02.L": [
			3.4906584289728827e-8,
			-2.617994121489886e-8,
			2.61799391054727e-8,
			0.9999999999999991
		],
		"finger5-1.R": [
			0.13350943438065793,
			0.11909686008500353,
			0.4823463212172029,
			0.8575157113764628
		],
		"metacarpal1.L": [
			2.6179939993653517e-8,
			3.4906584733818136e-8,
			8.72664696061073e-9,
			0.9999999999999996
		],
		"toe4-1.R": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"upperleg01.L": [
			-0.21930270318103673,
			0.4618684224391588,
			0.11785049933949074,
			0.8512902821813991
		],
		"head": [
			-0.09241872448416774,
			0.36929211317737476,
			-0.019352716519804625,
			0.9245039680136654
		],
		"toe5-1.R": [
			3.490658428972886e-8,
			-4.440892098500626e-16,
			1.745329202975935e-8,
			0.9999999999999992
		],
		"special01": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"temporalis01.L": [
			1.7453291256686083e-8,
			-2.617993899445281e-8,
			-2.6179940881832245e-8,
			0.9999999999999991
		],
		"special04": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"metacarpal2.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal2.R": [
			8.72664474016458e-9,
			3.4906584289728926e-8,
			3.4906584289728827e-8,
			0.9999999999999988
		],
		"temporalis01.R": [
			8.726645184253878e-9,
			2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"risorius02.R": [
			-8.726645628343005e-9,
			5.235987976526246e-8,
			-8.726646516521441e-9,
			0.9999999999999984
		],
		"special05.L": [
			-2.617993999365347e-8,
			-1.745329247793137e-8,
			-8.726645628343018e-9,
			0.9999999999999994
		],
		"finger2-2.L": [
			0.42466985809223434,
			-0.26738574598693676,
			-0.27744028682449234,
			0.8192601917081497
		],
		"foot.L": [
			0.08670754259140624,
			0.14059769730124794,
			-0.042811002751123754,
			0.985333094752627
		],
		"oris06": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"levator06.R": [
			-1.7453292144864453e-8,
			2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"orbicularis03.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"levator06.L": [
			2.6179939993653494e-8,
			1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"orbicularis03.L": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"foot.R": [
			-0.10418526145302957,
			-0.0383132197662589,
			0.08528673163194447,
			0.9901533729148466
		],
		"root": [
			6.388289864437867e-10,
			-0.5143816881189687,
			-0.010832496386350754,
			0.8574929363848544
		],
		"finger2-2.R": [
			0.2749983138275158,
			0.17316525701372776,
			0.17965361814415337,
			0.9285011031997259
		],
		"risorius02.L": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"special05.R": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"lowerleg02.L": [
			0,
			0,
			0,
			1
		],
		"tongue05.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger5-1.L": [
			0.07458179847370738,
			-0.06648102386499255,
			-0.2693470051880015,
			0.9578465532633834
		],
		"toe4-3.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"oris03.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"toe4-3.L": [
			-4.363322858580418e-8,
			1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"finger3-3.L": [
			0.21508492569674215,
			-0.15645736254032605,
			-0.25913531861775235,
			0.9284979564273836
		],
		"tongue05.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"lowerleg02.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"shoulder01.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-1.L": [
			0.16278359615480056,
			-0.10800588363915509,
			-0.21064658986510137,
			0.9578435384239115
		],
		"special06.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"finger4-3.L": [
			0.1801239449376904,
			-0.1086802580741334,
			-0.3059893083944132,
			0.9285012165384237
		],
		"finger3-2.L": [
			0.2982537370901559,
			-0.22225597288853738,
			-0.35541394059674886,
			0.8575126364413626
		],
		"upperarm01.R": [
			-0.41202794577291046,
			0.39031197434028597,
			0.15549500515705894,
			0.8085238635686337
		],
		"finger3-2.R": [
			0.21528604293592604,
			0.16042842136083535,
			0.2565282134823667,
			0.9284976666767699
		],
		"upperarm01.L": [
			-0.06869835845257503,
			0.07194353708718759,
			0.0015167264055145758,
			0.9950388748980197
		],
		"special06.L": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"finger3-1.R": [
			0.21039747050766608,
			0.13960669479227794,
			0.2722720742125925,
			0.9284992152808336
		],
		"shoulder01.L": [
			-0.2545297542680855,
			0.13319776376453485,
			0.0014327127178280852,
			0.957847016623544
		],
		"lowerarm01.R": [
			-0.4270922265281577,
			0.3825170065942174,
			-0.0065169407166782165,
			0.8192865794025408
		],
		"special03": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.L": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"spine02": [
			-2.807958466831775e-7,
			-0.09838928688599469,
			-0.09960544031572825,
			0.9901506473691247
		],
		"spine03": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"spine01": [
			0.09898124698716554,
			-0.009732875555091836,
			-0.0985041144713917,
			0.9901539896957956
		],
		"upperarm02.R": [
			4.569261529843772e-16,
			8.726646072432231e-9,
			-5.235987998730683e-8,
			0.9999999999999986
		],
		"spine04": [
			-4.363322858580419e-8,
			-2.6179939660586626e-8,
			-8.7266447401649e-9,
			0.9999999999999984
		],
		"spine05": [
			-1.2091407220498728e-7,
			0.053167547315714714,
			0.08408043372638022,
			0.9950395432226804
		],
		"lowerarm01.L": [
			-0.49824311493672774,
			-0.4462313050979404,
			0.007600996005190383,
			0.7433529751258581
		],
		"finger5-3.L": [
			0.15442710338555424,
			-0.1485620510841873,
			-0.5319024547614095,
			0.8192443868201927
		],
		"oris01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"oris05": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"risorius03.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger2-3.L": [
			0.32964018186311045,
			-0.22253117467697314,
			-0.2043666691087311,
			0.8944559750795704
		],
		"toe3-3.R": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"finger3-3.R": [
			0.2590016741531312,
			0.18840750945056262,
			0.3120586664330018,
			0.8944496251173503
		],
		"finger2-3.R": [
			0.27374095283122385,
			0.18480053859776424,
			0.1697093141744706,
			0.9285006194717699
		],
		"toe3-3.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"risorius03.L": [
			8.726645628343061e-9,
			-8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		]
	},
	"tpose": {
		"toe1-1.L": [
			0,
			0,
			0,
			1
		],
		"finger5-2.R": [
			-0.02713930766239003,
			-0.033389816022924346,
			-0.07120280473252773,
			0.9965333605874831
		],
		"finger1-3.R": [
			6.108652428338194e-8,
			-1.7453293699176697e-8,
			3.490658251338867e-8,
			0.9999999999999969
		],
		"toe5-2.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe4-2.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"clavicle.R": [
			-3.482940341091577e-8,
			-2.3199824283892667e-9,
			-0.06646260431291842,
			0.9977889166692236
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"metatarsal1.R": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"clavicle.L": [
			-3.48294034109158e-8,
			2.3199823173669643e-9,
			0.06646260431291873,
			0.9977889166692238
		],
		"toe5-2.L": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"toe4-2.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			-8.726646072432226e-9,
			1
		],
		"finger5-2.L": [
			-0.02713934503693339,
			0.03338979359824257,
			0.07120280473347775,
			0.9965333603209278
		],
		"finger1-3.L": [
			-8.726645184253878e-9,
			2.6179939993653534e-8,
			2.6179939993653474e-8,
			0.9999999999999992
		],
		"toe1-1.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			-8.726645628343012e-9,
			1.745329203384216e-8,
			3.4906584289728866e-8,
			0.9999999999999993
		],
		"oculi01.L": [
			-2.6179939993653497e-8,
			-8.726646405499139e-9,
			-1.7453292144864423e-8,
			0.9999999999999994
		],
		"jaw": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			-0.036578538089969394,
			-0.03335144611310992,
			-0.06087861763130583,
			0.9969169902798661
		],
		"oculi01.R": [
			-2.6179939993653474e-8,
			8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"oculi02.R": [
			-8.726645628343013e-9,
			-1.7453292144864463e-8,
			-3.490658428972889e-8,
			0.9999999999999992
		],
		"wrist.R": [
			6.108652428338212e-8,
			-8.726645739365324e-9,
			-8.72664651652142e-9,
			0.9999999999999983
		],
		"finger1-1.L": [
			0.01073116757239942,
			-0.0315525650666183,
			0.09017133623771119,
			0.9953684784045332
		],
		"tongue07.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"eye.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger2-1.R": [
			0.07630599690180848,
			-0.09729201584011626,
			-0.03573171690092074,
			0.9916828640739437
		],
		"finger5-3.R": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"metatarsal4.L": [
			-6.981316857945734e-8,
			-8.72664507323151e-9,
			1.745329303304303e-8,
			0.9999999999999974
		],
		"metatarsal4.R": [
			-4.363322858580419e-8,
			-4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"finger2-1.L": [
			0.07630600078176969,
			0.09729199761315344,
			0.035731733315461076,
			0.9916828649721681
		],
		"metatarsal1.L": [
			-6.10865242833821e-8,
			-8.726645295276114e-9,
			1.7453293033041314e-8,
			0.9999999999999981
		],
		"eye.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"tongue07.L": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"wrist.L": [
			4.3633228585804185e-8,
			2.6179939660586626e-8,
			8.726647404700228e-9,
			0.9999999999999984
		],
		"finger3-1.R": [
			-0.020460158072647467,
			-0.0186551464707152,
			-0.03405237498712201,
			0.9990364373732991
		],
		"lowerleg01.R": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.L": [
			-4.3633228585804066e-8,
			-3.490658462279583e-8,
			1.745329392122137e-8,
			0.9999999999999983
		],
		"oris07.L": [
			-2.617994088183188e-8,
			8.7266446291423e-9,
			-5.2359879987306836e-8,
			0.9999999999999981
		],
		"oris07.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue00": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"lowerarm02.R": [
			-3.490658606608567e-8,
			3.4906582513372086e-8,
			-3.4906586066085725e-8,
			0.9999999999999981
		],
		"lowerleg01.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.010742188310171775,
			0.03161825077122027,
			-0.09014698876853186,
			0.9953684805259021
		],
		"metacarpal4.L": [
			-0.050724790471702925,
			0.016990521235243694,
			0.030603471888286153,
			0.9980990658888218
		],
		"finger1-2.R": [
			0.12977228817076256,
			-0.22097139816656164,
			-0.2327332443651365,
			0.9381716428151714
		],
		"pelvis.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe2-3.L": [
			0,
			0,
			0,
			1
		],
		"toe5-3.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			-8.726646072432226e-9,
			1
		],
		"temporalis02.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			8.726646072432235e-9,
			0.9999999999999999
		],
		"finger4-1.L": [
			-0.07838154040625106,
			-0.03403698242195119,
			0.0161202951784409,
			0.9962118017944327
		],
		"finger4-1.R": [
			-0.07838161016482753,
			0.034037000853460064,
			-0.01612023706762942,
			0.9962117966164393
		],
		"levator05.R": [
			3.046174000298796e-16,
			-3.4906584178706623e-8,
			-8.726646072432218e-9,
			0.9999999999999994
		],
		"toe5-3.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe2-3.R": [
			0,
			0,
			0,
			1
		],
		"finger4-2.L": [
			-0.03657855682915362,
			0.033351471503019536,
			0.060878530717580315,
			0.9969169940504318
		],
		"toe2-1.L": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"finger1-2.L": [
			0.12977240688888406,
			0.22097145624237802,
			0.23273321081398676,
			0.9381716210377509
		],
		"pelvis.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			-0.05072482925929742,
			-0.016990481930034718,
			-0.030603536911566434,
			0.9980990625929383
		],
		"tongue04": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"toe3-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator03.R": [
			-1.7453292144864446e-8,
			8.726646294476836e-9,
			2.6179939993653537e-8,
			0.9999999999999994
		],
		"upperleg02.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperleg02.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator03.L": [
			-1.745329214486445e-8,
			-8.726646627543744e-9,
			-2.6179939993653573e-8,
			0.9999999999999997
		],
		"toe3-2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"metacarpal3.L": [
			-0.035101815039748414,
			0.030822872227328046,
			0.0320065040244292,
			0.9983954110615227
		],
		"tongue01": [
			0.0000014486232657827584,
			1.1102230246251565e-16,
			0,
			0.9999999999989508
		],
		"breast.L": [
			0,
			0,
			0,
			1
		],
		"metatarsal3.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"tongue02": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"metatarsal5.L": [
			-2.6179939993653487e-8,
			8.726647182655256e-9,
			2.617993999365346e-8,
			0.9999999999999989
		],
		"oris04.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris04.L": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			-8.726646072432222e-9,
			0.9999999999999999
		],
		"metatarsal5.R": [
			-5.235987998730682e-8,
			8.726645295276114e-9,
			-1.745329303304291e-8,
			0.9999999999999988
		],
		"metatarsal3.L": [
			-7.853981998095989e-8,
			-1.7453290368507623e-8,
			1.745329392122154e-8,
			0.9999999999999964
		],
		"breast.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris03.R": [
			-8.726645628343023e-9,
			1.745329203384216e-8,
			2.6179939993653547e-8,
			0.9999999999999994
		],
		"oris06.L": [
			4.363322858580419e-8,
			4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"orbicularis04.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"toe1-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"toe1-2.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"orbicularis04.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"metacarpal3.R": [
			-0.035101814172184824,
			-0.030822858213560345,
			-0.032006583108552186,
			0.9983954089893862
		],
		"oris06.R": [
			5.235987998730684e-8,
			-3.3306690738754696e-16,
			8.726646049588092e-9,
			0.9999999999999987
		],
		"levator04.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"metatarsal2.L": [
			-6.981316857945734e-8,
			-8.72664507323151e-9,
			1.745329303304303e-8,
			0.9999999999999974
		],
		"toe2-2.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"toe2-2.R": [
			0,
			0,
			0,
			1
		],
		"tongue06.R": [
			0,
			0,
			0,
			1
		],
		"levator04.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"toe4-1.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperleg01.R": [
			6.104962607328282e-8,
			-2.1229044078197035e-9,
			0.034752418059352905,
			0.9993959522826896
		],
		"metacarpal1.R": [
			-0.02476261587853631,
			-0.03996223626862083,
			-0.03292668716984705,
			0.9983514740807878
		],
		"levator02.R": [
			3.490658428972884e-8,
			-8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"temporalis02.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			-8.726646072432226e-9,
			1
		],
		"toe3-1.L": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe3-1.R": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"levator02.L": [
			3.490658428972884e-8,
			8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"finger5-1.R": [
			-0.13649704297650153,
			0.019436284279485516,
			-0.09107401620831188,
			0.9862536751180024
		],
		"metacarpal1.L": [
			-0.024762589815145168,
			0.03996226983022322,
			0.032926609025111915,
			0.9983514759611318
		],
		"toe4-1.R": [
			-3.490658428972882e-8,
			2.6179939993653534e-8,
			8.726645184253818e-9,
			0.9999999999999988
		],
		"upperleg01.L": [
			6.104962601259199e-8,
			2.1229048519089133e-9,
			-0.03475242548744739,
			0.9993959520243894
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			4.363322858580418e-8,
			1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"special04": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"metacarpal2.L": [
			-0.03510182243035363,
			0.03082290099862861,
			0.032006528109337636,
			0.9983954091413296
		],
		"metacarpal2.R": [
			-0.03510185876170931,
			-0.030822904637991866,
			-0.03200657277443542,
			0.9983954063197531
		],
		"temporalis01.R": [
			-1.745329125668606e-8,
			-2.617993988263123e-8,
			-1.7453291256686063e-8,
			0.9999999999999994
		],
		"toe5-1.L": [
			8.726646516521441e-9,
			-2.6179940104675836e-8,
			-8.726646516521445e-9,
			0.9999999999999998
		],
		"finger3-3.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"risorius02.R": [
			-3.490658428972878e-8,
			-2.6179939549564324e-8,
			1.7453293033042585e-8,
			0.9999999999999991
		],
		"special05.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger2-2.L": [
			-0.05360775923169337,
			0.04577200459549724,
			0.0853460212639502,
			0.9938547119171293
		],
		"foot.L": [
			0,
			0,
			0.022712292941328455,
			0.9997420426036645
		],
		"oris06": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"levator06.R": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"orbicularis03.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"levator06.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"orbicularis03.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"foot.R": [
			1.7448789730442967e-8,
			3.9640413174169e-10,
			-0.022712285500354534,
			0.9997420427727095
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			-0.05360773872657106,
			-0.0457720345239222,
			-0.08534599921532181,
			0.9938547135382029
		],
		"risorius02.L": [
			-3.490658428972878e-8,
			2.6179939549564324e-8,
			-1.7453293033042585e-8,
			0.9999999999999991
		],
		"special05.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerleg02.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"tongue05.L": [
			0,
			0,
			0,
			1
		],
		"finger5-1.L": [
			-0.1364969995161761,
			-0.019436254976223033,
			0.09107407112259157,
			0.9862536766394017
		],
		"toe4-3.R": [
			0,
			0,
			0,
			1
		],
		"oris03.L": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"toe4-3.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-3.L": [
			1.745329214486445e-8,
			-8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"tongue05.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"lowerleg02.R": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"shoulder01.R": [
			0,
			0,
			-0.0914326454743988,
			0.9958112629115785
		],
		"finger3-1.L": [
			-0.020460122705238976,
			0.018655138115546088,
			0.03405238616722545,
			0.9990364378725607
		],
		"special06.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger4-3.L": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			-8.726645628343035e-9,
			0.9999999999999997
		],
		"finger3-2.L": [
			-0.02921526064934317,
			0.026637875343599293,
			0.048623691452506626,
			0.9980343825599906
		],
		"upperarm01.R": [
			0.009641250090009986,
			-0.0151044780196683,
			-0.24779149943979642,
			0.9686476520623133
		],
		"finger3-2.R": [
			-0.029215296016548785,
			-0.026637825908497836,
			-0.048623728515501605,
			0.9980343810384413
		],
		"upperarm01.L": [
			0.009641250090009986,
			0.0151044780196683,
			0.24779149943979642,
			0.9686476520623133
		],
		"special06.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"metatarsal2.R": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"shoulder01.L": [
			0,
			0,
			0.09143262358843446,
			0.9958112649210872
		],
		"lowerarm01.R": [
			0.23848787210455522,
			-0.2375925809334143,
			-0.0021825725269267325,
			0.9416307857762535
		],
		"temporalis01.L": [
			-1.745329125668606e-8,
			2.617993988263123e-8,
			1.7453291256686063e-8,
			0.9999999999999994
		],
		"upperarm02.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"spine02": [
			0,
			0,
			0,
			1
		],
		"spine03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"spine01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"spine04": [
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999987
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			0.23848785500358924,
			0.2375925357545552,
			0.0021825690884329767,
			0.9416308015149469
		],
		"finger5-3.L": [
			5.235987998730683e-8,
			8.726646294476836e-9,
			4.4331856927593173e-16,
			0.9999999999999987
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"risorius03.R": [
			4.3633228585804245e-8,
			1.7453293255087488e-8,
			-1.745329125668602e-8,
			0.999999999999999
		],
		"finger2-3.L": [
			-6.108652428338216e-8,
			8.726643518919275e-9,
			-4.363322858580252e-8,
			0.999999999999997
		],
		"toe3-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-3.R": [
			-1.7453293033042886e-8,
			4.363322880784892e-8,
			-1.745329303304289e-8,
			0.9999999999999986
		],
		"finger2-3.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe3-3.L": [
			0,
			0,
			0,
			1
		],
		"risorius03.L": [
			4.3633228585804245e-8,
			-1.7453293255087488e-8,
			1.745329125668602e-8,
			0.999999999999999
		],
		"levator05.L": [
			3.046174000298792e-16,
			3.490658440075123e-8,
			8.726646072432198e-9,
			0.9999999999999992
		]
	},
	"Harvey_FashionCloseup1": {
		"toe1-1.L": [
			-0.19477089363709968,
			-0.0178947388042624,
			0.01349462111570301,
			0.9805926639109007
		],
		"finger5-2.R": [
			0.027131498369240316,
			0.028265817834310147,
			0.09143241617891258,
			0.995040219594205
		],
		"finger1-3.R": [
			-1.7453291256686053e-8,
			-2.617993988263123e-8,
			1.745329303304289e-8,
			0.9999999999999994
		],
		"toe5-2.R": [
			0,
			0,
			0,
			1
		],
		"toe4-2.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"clavicle.R": [
			0.025157175612350362,
			0.0923048166452809,
			-0.10221157611166584,
			0.9901513677453865
		],
		"neck03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			0.025157177335938693,
			-0.09230480901555471,
			0.10221160530196301,
			0.9901513653995972
		],
		"toe5-2.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe4-2.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"finger5-2.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger1-3.L": [
			-1.7453291256686083e-8,
			2.617993899445281e-8,
			-2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe1-1.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			-2.617993821729672e-8,
			-5.235987843299483e-8,
			3.490658606608563e-8,
			0.999999999999998
		],
		"oculi01.L": [
			-4.363322858580419e-8,
			-4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			0.048818087271168535,
			0.032853866421261646,
			0.08020366764611236,
			0.9950400944245767
		],
		"oculi01.R": [
			-4.3633228585804e-8,
			3.490658451177353e-8,
			1.745329036850783e-8,
			0.9999999999999983
		],
		"oculi02.R": [
			-2.6179939105475045e-8,
			1.745329114566374e-8,
			-4.363322858580426e-8,
			0.9999999999999988
		],
		"wrist.R": [
			-0.12407856940282651,
			0.04066509053101819,
			-0.3775655060415342,
			0.9167306843749982
		],
		"finger1-1.L": [
			0.13690229888893182,
			0.0013408227009354956,
			0.14033366238572953,
			0.9805928951174476
		],
		"tongue07.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"eye.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger2-1.R": [
			0.06607323399523517,
			-0.06314392677409764,
			-0.03929784890917258,
			0.9950391205033448
		],
		"finger4-3.R": [
			0.09511522496060996,
			0.05737369981788487,
			0.16156257405613197,
			0.9805910907275553
		],
		"finger2-1.L": [
			3.4906586066085626e-8,
			5.235988176366391e-8,
			-3.490658251337196e-8,
			0.9999999999999974
		],
		"eye.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue07.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"wrist.L": [
			-0.08592652771956157,
			0.06605824986498376,
			0.3213144801632558,
			0.9407496714303184
		],
		"finger5-3.R": [
			0.02680226502441698,
			0.02575810620706831,
			0.09226599764130804,
			0.9950402726691219
		],
		"lowerleg01.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"lowerarm02.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"oris07.L": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"oris07.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			8.726645184253878e-9,
			2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"lowerleg01.L": [
			0.09913224247401435,
			0.007914647993908841,
			-0.002104000845250509,
			0.9950405670271181
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"metacarpal4.L": [
			-3.490658251337201e-8,
			1.745329025748532e-8,
			-5.23598799873061e-8,
			0.999999999999998
		],
		"finger1-2.R": [
			0.07254002862229095,
			0.10004372611964485,
			-0.31578703103248607,
			0.9407485041940074
		],
		"pelvis.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"toe5-3.L": [
			4.3633228585804185e-8,
			-3.3306690738754696e-16,
			8.726646077118623e-9,
			0.9999999999999991
		],
		"levator05.L": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"finger4-1.L": [
			-0.12827433962300377,
			-0.02027119962835855,
			0.0522509268180011,
			0.9901538329505011
		],
		"finger4-1.R": [
			-0.08216014389854812,
			0.04653077090981805,
			0.03130707178720971,
			0.9950399315450704
		],
		"levator05.R": [
			-4.569261529843785e-16,
			-2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"toe5-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"toe2-1.L": [
			-0.19431514383631127,
			-0.018258889431111647,
			0.01860903836540772,
			0.9805926481081384
		],
		"finger1-2.L": [
			-5.235987998730686e-8,
			-2.617994110387656e-8,
			-8.726644740164896e-9,
			0.9999999999999984
		],
		"pelvis.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			1.523087000149394e-15,
			-3.4906584178706623e-8,
			4.36332285858042e-8,
			0.9999999999999983
		],
		"tongue04": [
			0,
			0,
			0,
			1
		],
		"toe3-2.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"levator03.R": [
			3.490658428972883e-8,
			5.235987998730707e-8,
			1.6734015079435647e-15,
			0.9999999999999981
		],
		"upperleg02.R": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"upperleg02.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator03.L": [
			4.363322858580412e-8,
			-2.6179940992854256e-8,
			2.617993910547514e-8,
			0.9999999999999986
		],
		"toe3-2.R": [
			-2.6179939993653497e-8,
			-8.726646405499139e-9,
			-1.7453292144864423e-8,
			0.9999999999999994
		],
		"metacarpal3.L": [
			-8.72664607243222e-9,
			-4.3633228918871225e-8,
			3.5626088403688626e-16,
			0.9999999999999991
		],
		"tongue01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"breast.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"temporalis02.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"tongue02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris04.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"oris04.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"temporalis02.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"breast.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"oris03.R": [
			-2.7755575615628914e-16,
			-1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"oris06.L": [
			-1.745329303304289e-8,
			3.490658440075123e-8,
			2.617993910547502e-8,
			0.9999999999999988
		],
		"orbicularis04.R": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"toe1-2.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe1-2.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"orbicularis04.L": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"metacarpal3.R": [
			-8.726646516521448e-9,
			-8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"oris06.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"levator04.L": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue06.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"toe2-2.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"toe2-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue06.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator04.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe4-1.L": [
			-0.19161650791730633,
			-0.025005944479711495,
			0.033107543275038225,
			0.980592528633859
		],
		"upperleg01.R": [
			0.0021043678364679108,
			0.04494640220826396,
			0.14130621202584984,
			0.9889428431448639
		],
		"metacarpal1.R": [
			2.6179939105474995e-8,
			-4.363322880784892e-8,
			-2.617994088183188e-8,
			0.9999999999999984
		],
		"levator02.R": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"toe3-1.L": [
			-0.19259859254486292,
			-0.020028391903508025,
			0.03070497176105053,
			0.9805926016326302
		],
		"toe3-1.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator02.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"finger5-1.R": [
			-0.1110929008870997,
			0.07227265264344851,
			0.11787322963209061,
			0.9841447722710663
		],
		"metacarpal1.L": [
			1.7453292144864433e-8,
			2.617994021569814e-8,
			4.927555263958927e-16,
			0.9999999999999996
		],
		"toe4-1.R": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"upperleg01.L": [
			0.08755647904526909,
			0.10448474548427389,
			-0.031906567069626135,
			0.9901508834092472
		],
		"head": [
			-3.6514488676047054e-8,
			-0.002614674232801484,
			-0.04985183762639569,
			0.9987532016288739
		],
		"toe5-1.R": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			2.2846307649218933e-16,
			-2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"metacarpal2.R": [
			2.617993999365353e-8,
			-1.745329336610979e-8,
			1.7453291256686023e-8,
			0.9999999999999997
		],
		"temporalis01.R": [
			1.7453293033042873e-8,
			-1.7453293144065185e-8,
			4.363322858580396e-8,
			0.9999999999999986
		],
		"toe5-1.L": [
			-0.09851025659704502,
			-0.01029158464651625,
			0.009174964573503296,
			0.9950405180974905
		],
		"risorius02.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"special05.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger2-2.L": [
			2.617994088183186e-8,
			2.617994077080965e-8,
			-4.36332285858042e-8,
			0.9999999999999984
		],
		"foot.L": [
			-0.09310629138983717,
			-0.054065435577969834,
			0.0894735810897893,
			0.9901528293482597
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"levator06.R": [
			-6.092348000597591e-16,
			1.745329203384216e-8,
			3.490658428972889e-8,
			0.9999999999999993
		],
		"orbicularis03.R": [
			-4.3633228585804185e-8,
			2.6179939660586626e-8,
			-8.726647404700228e-9,
			0.9999999999999984
		],
		"levator06.L": [
			8.726646516521441e-9,
			2.6179940104675836e-8,
			-8.726645628343022e-9,
			0.9999999999999998
		],
		"orbicularis03.L": [
			-8.72664562834302e-9,
			-3.4906584289728926e-8,
			8.726646516521445e-9,
			0.9999999999999994
		],
		"foot.R": [
			0.005566695707175361,
			0.04641199412111696,
			-0.08781013986910151,
			0.9950398575116343
		],
		"root": [
			-2.2659934238242162e-8,
			0.0010514256631327656,
			-0.04990920797540352,
			0.9987532054833879
		],
		"finger2-2.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"risorius02.L": [
			8.726645628343017e-9,
			-2.6179939993653534e-8,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"special05.R": [
			-1.745329214486445e-8,
			1.7453292366909068e-8,
			8.726645628343025e-9,
			0.9999999999999999
		],
		"lowerleg02.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue05.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-1.L": [
			-0.1815283247597666,
			-0.06578287963621476,
			-0.034050202747631715,
			0.9805919965763162
		],
		"toe4-3.R": [
			-5.235987998730684e-8,
			-8.881784197001252e-16,
			-1.7453292120936186e-8,
			0.9999999999999983
		],
		"oris03.L": [
			-2.7755575615628914e-16,
			-1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe4-3.L": [
			-5.235987998730683e-8,
			8.726646294476836e-9,
			-4.4331856927593173e-16,
			0.9999999999999987
		],
		"finger3-3.L": [
			0.11357363470833771,
			-0.08260620318882428,
			-0.1368242331551763,
			0.9805898092043188
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			0,
			0,
			0,
			1
		],
		"shoulder01.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger3-1.L": [
			-0.13491908323862603,
			-0.010128950379407309,
			0.03590765437530552,
			0.9901539707033058
		],
		"special06.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"finger4-3.L": [
			0.09511521027456242,
			-0.05737367476613031,
			-0.16156252764020762,
			0.9805911012653352
		],
		"finger3-2.L": [
			-8.726644296075356e-9,
			5.235987998730707e-8,
			-3.4906584289728846e-8,
			0.9999999999999983
		],
		"upperarm01.R": [
			-0.25635587583388886,
			0.35856640126936834,
			0.2547238472021329,
			0.8607134032142867
		],
		"finger3-2.R": [
			-1.7453291256686047e-8,
			-3.4906584289728926e-8,
			1.745329303304288e-8,
			0.999999999999999
		],
		"upperarm01.L": [
			-0.3490472869457665,
			-0.32522574922058145,
			-0.38881030399143374,
			0.7881755838833122
		],
		"special06.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger3-1.R": [
			-0.03975543194376223,
			0.02387140332070592,
			0.01849520600162055,
			0.9987530170614868
		],
		"shoulder01.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerarm01.R": [
			-0.5742872218087306,
			0.545829739879329,
			-0.028461876191431184,
			0.6094702646841254
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			-2.6179939993653484e-8,
			2.6179940104675836e-8,
			-8.045503725131716e-16,
			0.9999999999999991
		],
		"spine02": [
			-1.4536483068520866e-8,
			-0.0003155912194869881,
			0.049919285143824425,
			0.998753205438116
		],
		"spine03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"spine01": [
			-2.2832253786964226e-8,
			0.004905353104103227,
			0.04967889942284172,
			0.9987531949701381
		],
		"upperarm02.R": [
			-3.490658428972884e-8,
			-3.4906584289728926e-8,
			8.726647404699887e-9,
			0.9999999999999989
		],
		"spine04": [
			0,
			0,
			0,
			1
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			-0.5231985603109663,
			-0.5937041663781466,
			0.08620183605289672,
			0.6052667781853481
		],
		"finger5-3.L": [
			-1.745329214486444e-8,
			3.490658451177353e-8,
			-4.799202690040438e-16,
			0.9999999999999992
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			2.617993910547505e-8,
			-5.235987976526246e-8,
			-8.726647404699368e-9,
			0.999999999999998
		],
		"finger2-3.L": [
			1.5230870001493917e-15,
			4.363322858580432e-8,
			-3.490658428972882e-8,
			0.9999999999999987
		],
		"toe3-3.R": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger3-3.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger2-3.R": [
			-0.07333540450882452,
			-0.0495041658734523,
			-0.04546368741752955,
			0.9950398530376068
		],
		"toe3-3.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"risorius03.L": [
			2.617993999365348e-8,
			4.363322869682662e-8,
			1.035761105051169e-15,
			0.9999999999999987
		]
	},
	"mh-rigging351-benchmark1": {
		"toe1-1.L": [
			0.1746287231708288,
			3.0478463086680563e-9,
			-1.7185110777099316e-8,
			0.9846343529674993
		],
		"finger5-2.R": [
			5.235987998730683e-8,
			1.7453293255087488e-8,
			-1.7453291256686007e-8,
			0.9999999999999984
		],
		"finger1-3.R": [
			8.72664607243222e-9,
			-4.3633228918871225e-8,
			-3.5626088403688626e-16,
			0.9999999999999991
		],
		"toe5-2.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe4-2.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"clavicle.R": [
			-0.08428028886523192,
			-0.05428695460807176,
			-0.3529348163187047,
			0.9302616701220452
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			0.024077281987792097,
			1.1102230246251565e-16,
			1.5777218104420236e-30,
			0.9997101002251004
		],
		"neck01": [
			0.039637263022145264,
			-2.220446049250313e-16,
			-4.930380657631324e-32,
			0.9992141348980772
		],
		"clavicle.L": [
			-0.08428028886523192,
			0.05428695460807176,
			0.3529348163187047,
			0.9302616701220452
		],
		"toe5-2.L": [
			0.14556015882694057,
			-8.63370253068041e-9,
			-1.2702519617082881e-9,
			0.9893494024672355
		],
		"toe4-2.L": [
			0.21036333474771718,
			-6.695605958562112e-9,
			-1.036713878897304e-8,
			0.9776232747811501
		],
		"finger5-2.L": [
			-8.726645184253779e-9,
			-2.6179939993653534e-8,
			-3.490658428972884e-8,
			0.9999999999999991
		],
		"finger1-3.L": [
			-2.617993999365347e-8,
			2.6179940437742744e-8,
			8.726645184253845e-9,
			0.9999999999999996
		],
		"toe1-1.R": [
			0.15361393122190664,
			2.681069255494606e-9,
			-1.724613836063182e-8,
			0.9881309428079617
		],
		"oculi02.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"oculi01.L": [
			-6.108652428338189e-8,
			-3.490658595506346e-8,
			-2.617993821729565e-8,
			0.999999999999997
		],
		"jaw": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			-1.745329214486445e-8,
			0.9999999999999993
		],
		"oculi01.R": [
			-6.108652428338189e-8,
			3.490658595506346e-8,
			2.617993821729565e-8,
			0.999999999999997
		],
		"oculi02.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"wrist.R": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"finger1-1.L": [
			-1.1423153030516057e-15,
			-2.617993988263123e-8,
			4.3633228585804225e-8,
			0.9999999999999984
		],
		"tongue07.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"eye.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger2-1.R": [
			7.853981998095989e-8,
			-2.617994165898807e-8,
			2.6179938217300896e-8,
			0.9999999999999961
		],
		"finger4-3.R": [
			-6.981316857945706e-8,
			2.6179936774006762e-8,
			-5.235988176364014e-8,
			0.9999999999999962
		],
		"finger2-1.L": [
			6.981316502674292e-8,
			2.617994787623701e-8,
			-1.1344639361255275e-7,
			0.9999999999999909
		],
		"eye.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue07.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"wrist.L": [
			2.617993999365347e-8,
			1.745329247793137e-8,
			-8.726645628343018e-9,
			0.9999999999999994
		],
		"finger5-3.R": [
			8.726646960610638e-9,
			1.7453292144864463e-8,
			4.3633228585804265e-8,
			0.9999999999999988
		],
		"lowerleg01.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"lowerarm02.L": [
			6.108652428338192e-8,
			5.235987998730707e-8,
			-8.726642963808368e-9,
			0.9999999999999966
		],
		"oris07.L": [
			-8.726646516521426e-9,
			8.726645739365324e-9,
			-5.2359879987306e-8,
			0.9999999999999986
		],
		"oris07.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"tongue00": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"lowerarm02.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"lowerleg01.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			4.569261529843786e-16,
			-1.745329203384216e-8,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"metacarpal4.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			2.617993999365343e-8,
			0.9999999999999992
		],
		"finger1-2.R": [
			-1.745329480939975e-8,
			-6.981316846843555e-8,
			3.490658606608566e-8,
			0.9999999999999967
		],
		"pelvis.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			0.1419900654359043,
			1.1116423115353768e-8,
			-1.603735959740477e-8,
			0.9898680827855331
		],
		"toe2-3.L": [
			0.363451573853804,
			-4.958144672606579e-9,
			-1.1301571034779955e-8,
			0.9316130921488772
		],
		"toe5-3.L": [
			0.29620858342190615,
			-1.667004623229218e-8,
			-5.169814950717569e-9,
			0.9551232774397177
		],
		"levator05.L": [
			8.726645628343e-9,
			6.108652417236016e-8,
			-8.726645628343018e-9,
			0.9999999999999979
		],
		"finger4-1.L": [
			-4.363322680944738e-8,
			-2.6179943546367213e-8,
			-7.853981998094747e-8,
			0.9999999999999956
		],
		"finger4-1.R": [
			2.5130938149442876e-15,
			2.6179939993653534e-8,
			9.599310857311078e-8,
			0.9999999999999951
		],
		"levator05.R": [
			8.726645628343e-9,
			-6.108652417236016e-8,
			8.726645628343018e-9,
			0.9999999999999979
		],
		"toe5-3.R": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"toe2-3.R": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"finger4-2.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe2-1.L": [
			0.25062763706911506,
			-1.8867061246652383e-9,
			-2.7531508265222735e-8,
			0.968083564335823
		],
		"finger1-2.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"pelvis.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal4.R": [
			8.726646516521435e-9,
			-4.363322880784892e-8,
			-8.726646516521451e-9,
			0.999999999999999
		],
		"tongue04": [
			8.726645717160763e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999962
		],
		"toe3-2.L": [
			0.10659972915095733,
			-8.676921958716832e-9,
			-9.302580847147922e-10,
			0.9943020153579809
		],
		"levator03.R": [
			-4.363322858580418e-8,
			1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"upperleg02.R": [
			0.04415688386170277,
			-3.8534153645741753e-10,
			8.71813426528171e-9,
			0.9990246091101184
		],
		"upperleg02.L": [
			-0.10680700562031312,
			-9.320669791534897e-10,
			-8.676727431278989e-9,
			0.9942797712668313
		],
		"levator03.L": [
			-4.363322858580418e-8,
			-1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"toe3-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.L": [
			3.0461740002987937e-16,
			8.726646183454534e-9,
			3.490658428972886e-8,
			0.9999999999999994
		],
		"tongue01": [
			0.0000013962633147416553,
			1.1102230246251565e-16,
			0,
			0.9999999999990252
		],
		"breast.L": [
			1.0530043090085886e-9,
			8.662882300392027e-9,
			0.12066540864769236,
			0.9926932351718153
		],
		"temporalis02.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue02": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"oris04.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris04.L": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"temporalis02.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"breast.R": [
			-2.7041653320086717e-8,
			5.503869249245952e-9,
			-0.12066540864769233,
			0.9926932351718151
		],
		"oris03.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"oris06.L": [
			6.108652428338212e-8,
			8.881784197001252e-16,
			-1.745329220342391e-8,
			0.999999999999998
		],
		"orbicularis04.R": [
			0,
			0,
			0,
			1
		],
		"toe1-2.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"toe1-2.L": [
			0.11317590666893834,
			-8.6705770341311e-9,
			-9.876460429826736e-10,
			0.9935749665473982
		],
		"orbicularis04.L": [
			0,
			0,
			0,
			1
		],
		"metacarpal3.R": [
			3.490658428972884e-8,
			-3.4906584289728926e-8,
			-8.726647404699887e-9,
			0.9999999999999989
		],
		"oris06.R": [
			7.853981998095987e-8,
			-6.661338147750939e-16,
			8.726646066520822e-9,
			0.9999999999999972
		],
		"levator04.L": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			0.14807598086293394,
			9.922649923943538e-9,
			-7.338236622257846e-9,
			0.9889759875201624
		],
		"toe2-2.R": [
			0,
			0,
			0,
			1
		],
		"tongue06.R": [
			0,
			0,
			0,
			1
		],
		"levator04.R": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"toe4-1.L": [
			0.3192667395020603,
			-1.9326000133546017e-8,
			2.6976802723215377e-9,
			0.9476648928011012
		],
		"upperleg01.R": [
			0.4727881987967042,
			0.00904604581856061,
			-0.011653033858134128,
			0.881052606224803
		],
		"metacarpal1.R": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"levator02.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe3-1.L": [
			0.2732033549788354,
			4.768298089707912e-9,
			-1.6789304424472502e-8,
			0.9619563019328417
		],
		"toe3-1.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"levator02.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"finger5-1.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"metacarpal1.L": [
			-5.235988176366344e-8,
			-3.490658262439439e-8,
			4.363323036216129e-8,
			0.9999999999999969
		],
		"toe4-1.R": [
			-1.745329214486444e-8,
			-4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"upperleg01.L": [
			-0.7312045113345239,
			0.026966148439717785,
			0.011476573449029392,
			0.6815284863483232
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"special04": [
			-8.726645717160763e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999962
		],
		"metacarpal2.L": [
			8.726646960610635e-9,
			8.726645295276114e-9,
			7.853981998095989e-8,
			0.999999999999997
		],
		"metacarpal2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"temporalis01.R": [
			-1.745329125668606e-8,
			-2.617993988263123e-8,
			-1.7453291256686063e-8,
			0.9999999999999994
		],
		"toe5-1.L": [
			0.36313749575474463,
			-1.7929818740824999e-9,
			-1.9430825126368433e-8,
			0.9317355629023573
		],
		"risorius02.R": [
			-4.569261529843784e-16,
			-1.7453292255886765e-8,
			2.6179939993653494e-8,
			0.9999999999999994
		],
		"special05.L": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"finger2-2.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"foot.L": [
			0.3541363470111519,
			3.0904226955286163e-9,
			-8.161105338401296e-9,
			0.9351938022279644
		],
		"oris06": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"orbicularis03.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"orbicularis03.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"foot.R": [
			0.3466445698006267,
			5.160519345182024e-9,
			1.1210608373139362e-8,
			0.9379965576843758
		],
		"root": [
			0.2075671232939164,
			0,
			0,
			0.9782207773951074
		],
		"finger2-2.R": [
			-2.6179939993653497e-8,
			5.551115123125783e-16,
			1.745329205570242e-8,
			0.9999999999999993
		],
		"risorius02.L": [
			-4.569261529843786e-16,
			1.745329203384216e-8,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"special05.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"lowerleg02.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"tongue05.L": [
			0,
			0,
			0,
			1
		],
		"finger5-1.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			8.726646072432235e-9,
			0.9999999999999999
		],
		"toe4-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris03.L": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			1.7453292144864443e-8,
			0.9999999999999998
		],
		"toe4-3.L": [
			0.2485022017906498,
			-6.284311848681057e-9,
			-1.0621493533300538e-8,
			0.9686313311602093
		],
		"finger3-3.L": [
			1.7453292144864427e-8,
			8.881784197001252e-16,
			-5.235988012452949e-8,
			0.9999999999999986
		],
		"tongue05.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerleg02.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"shoulder01.R": [
			-0.10095647975571247,
			0.03236224075991989,
			-0.041972400778026234,
			0.993478128667793
		],
		"finger3-1.L": [
			2.6179939105475e-8,
			8.726647626744466e-9,
			-6.981316857945817e-8,
			0.9999999999999971
		],
		"special06.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger4-3.L": [
			-3.490658428972879e-8,
			-8.726645406298417e-9,
			2.6179939993653504e-8,
			0.9999999999999992
		],
		"finger3-2.L": [
			-1.7453292144864443e-8,
			-2.6179940104675836e-8,
			-8.726645628343028e-9,
			0.9999999999999997
		],
		"upperarm01.R": [
			-0.12289177229614603,
			0.2974315781332817,
			-0.5182753398405564,
			0.7923526618521664
		],
		"finger3-2.R": [
			-2.6179939993653487e-8,
			8.726647071632954e-9,
			3.490658428972886e-8,
			0.9999999999999988
		],
		"upperarm01.L": [
			-0.12289169940220541,
			-0.2974316483165885,
			0.5182752683490149,
			0.792352693574946
		],
		"special06.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-1.R": [
			8.726644740164615e-9,
			2.6179940992854256e-8,
			-5.235987998730674e-8,
			0.9999999999999982
		],
		"shoulder01.L": [
			-0.10095645062726494,
			-0.0323622137314431,
			0.04197242701223486,
			0.9934781313999053
		],
		"lowerarm01.R": [
			2.6179939105475048e-8,
			2.6179940881831953e-8,
			-3.4906584289728846e-8,
			0.9999999999999988
		],
		"temporalis01.L": [
			-1.745329125668606e-8,
			2.617993988263123e-8,
			1.7453291256686063e-8,
			0.9999999999999994
		],
		"upperarm02.L": [
			-0.2931824722506077,
			0.3181296651728217,
			0.010147276400465923,
			0.9015179348652489
		],
		"spine02": [
			-0.10297134374678983,
			0,
			0,
			0.9946843229723592
		],
		"spine03": [
			-0.055238475072293625,
			-1.1102230246251565e-16,
			0,
			0.998473189861244
		],
		"spine01": [
			-0.10026645467278891,
			-1.1102230246251565e-16,
			-2.465190328815662e-32,
			0.994960621365162
		],
		"upperarm02.R": [
			-0.2931825265487914,
			-0.3181297107738873,
			-0.010147290152976067,
			0.9015179009603422
		],
		"spine04": [
			-0.05446430232166322,
			1.1102230246251565e-16,
			0,
			0.9985157183402845
		],
		"spine05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			8.726647404699846e-9,
			-4.363322880784892e-8,
			-2.617993999365346e-8,
			0.9999999999999984
		],
		"finger5-3.L": [
			1.7453293033042856e-8,
			-2.6179939216497417e-8,
			-4.363322858580415e-8,
			0.9999999999999984
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"oris05": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"risorius03.R": [
			3.49065842897288e-8,
			-8.726644962209207e-9,
			-2.61799399936534e-8,
			0.9999999999999991
		],
		"finger2-3.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe3-3.R": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"finger3-3.R": [
			3.4906584289728793e-8,
			1.7453291478730648e-8,
			2.617994088183205e-8,
			0.9999999999999991
		],
		"finger2-3.R": [
			-8.726645184253878e-9,
			2.6179939993653534e-8,
			2.6179939993653474e-8,
			0.9999999999999992
		],
		"toe3-3.L": [
			0.49839385129411773,
			-2.0832229274958536e-9,
			-3.139533132187128e-8,
			0.8669507304294841
		],
		"risorius03.L": [
			3.490658428972879e-8,
			8.726645406298417e-9,
			2.6179939993653504e-8,
			0.9999999999999992
		]
	},
	"sitting": {
		"toe1-1.L": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"finger5-2.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"finger1-3.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"toe5-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe4-2.R": [
			4.363322858580417e-8,
			8.726645628343022e-9,
			8.726646516520993e-9,
			0.999999999999999
		],
		"clavicle.R": [
			0,
			0,
			0,
			1
		],
		"neck03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck02": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			0,
			0,
			0,
			1
		],
		"toe5-2.L": [
			0,
			0,
			0,
			1
		],
		"toe4-2.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger5-2.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"finger1-3.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-1.R": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"oculi02.L": [
			2.6179939993653484e-8,
			-2.6179940104675836e-8,
			-8.045503725131716e-16,
			0.9999999999999991
		],
		"oculi01.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"jaw": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			1.745329214486443e-8,
			5.235987998730707e-8,
			8.662785736608193e-16,
			0.999999999999998
		],
		"oculi01.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"oculi02.R": [
			2.6179939993653484e-8,
			2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"wrist.R": [
			-0.13132828115603468,
			0.0019188538439727232,
			-0.19219843147251214,
			0.97252710168305
		],
		"finger1-1.L": [
			-0.09162784592817355,
			0.10539001838473239,
			0.23753152877338027,
			0.9612887467946397
		],
		"tongue07.R": [
			3.490658428972884e-8,
			8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"eye.R": [
			0,
			0,
			0,
			1
		],
		"finger2-1.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger4-3.R": [
			1.745329303304285e-8,
			-4.3633228918871225e-8,
			2.6179939105475048e-8,
			0.9999999999999986
		],
		"finger2-1.L": [
			-8.726646960610635e-9,
			4.363322858580432e-8,
			1.7453292144864436e-8,
			0.9999999999999989
		],
		"eye.L": [
			0,
			0,
			0,
			1
		],
		"tongue07.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"wrist.L": [
			0.03524605665082867,
			0.030438490974100008,
			0.3089085130461423,
			0.9499509167980247
		],
		"finger5-3.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"lowerleg01.R": [
			0.7517142774573309,
			2.884397402036498e-7,
			2.22916708486131e-7,
			0.6594889271751803
		],
		"lowerarm02.L": [
			-0.03823083215203702,
			0.00642292967442093,
			0.08152858883294609,
			0.9959167829945776
		],
		"oris07.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris07.R": [
			-2.617993999365347e-8,
			1.745329247793137e-8,
			8.726645628343018e-9,
			0.9999999999999994
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			-2.6179939993653474e-8,
			8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"lowerleg01.L": [
			0.7945212298097296,
			3.3033157420536696e-7,
			-1.426304132620891e-7,
			0.6072363752127383
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			8.726646072432223e-9,
			-3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"metacarpal4.L": [
			8.726645628343013e-9,
			1.7453292255886765e-8,
			2.61799399936535e-8,
			0.9999999999999997
		],
		"finger1-2.R": [
			-8.726646072432215e-9,
			-5.235988020935167e-8,
			4.624224031074066e-16,
			0.9999999999999982
		],
		"pelvis.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			5.235987998730683e-8,
			8.726646294476836e-9,
			4.4331856927593173e-16,
			0.9999999999999987
		],
		"toe2-3.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe5-3.L": [
			0,
			0,
			0,
			1
		],
		"levator05.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger4-1.L": [
			-8.726645184253878e-9,
			-2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"finger4-1.R": [
			-2.6179940881831897e-8,
			-2.6179940992854256e-8,
			-2.6179939105475064e-8,
			0.9999999999999988
		],
		"levator05.R": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"toe5-3.R": [
			6.981316857945735e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999974
		],
		"toe2-3.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.L": [
			-2.617993821729663e-8,
			-6.108652439440476e-8,
			2.6179941770010327e-8,
			0.9999999999999977
		],
		"toe2-1.L": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"finger1-2.L": [
			6.108652428338193e-8,
			3.490658440075123e-8,
			-8.726643851989352e-9,
			0.9999999999999974
		],
		"pelvis.L": [
			-0.5449585876448417,
			-1.7303118127198758e-7,
			-3.1426273252957873e-7,
			0.8384629614669991
		],
		"metacarpal4.R": [
			4.569261529843786e-16,
			-1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"tongue04": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-2.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator03.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"upperleg02.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperleg02.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"levator03.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"toe3-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"tongue01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"breast.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"temporalis02.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"oris04.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"temporalis02.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"breast.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"oris03.R": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"oris06.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"orbicularis04.R": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe1-2.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe1-2.L": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"orbicularis04.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"metacarpal3.R": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"oris06.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"levator04.L": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe2-2.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue06.R": [
			0,
			0,
			0,
			1
		],
		"levator04.R": [
			-8.726646072432225e-9,
			-2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"toe4-1.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperleg01.R": [
			-0.5319114890539569,
			-8.429568598700143e-9,
			-4.623222369148173e-8,
			0.8467999573762389
		],
		"metacarpal1.R": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"levator02.R": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe3-1.L": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"toe3-1.R": [
			0,
			0,
			0,
			1
		],
		"levator02.L": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger5-1.R": [
			1.7453290368507637e-8,
			-5.235988020935167e-8,
			-3.490658606608566e-8,
			0.9999999999999979
		],
		"metacarpal1.L": [
			-2.6179939993653497e-8,
			8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"toe4-1.R": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"upperleg01.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"head": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-1.R": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"special04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"metacarpal2.R": [
			8.726645628343025e-9,
			8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"temporalis01.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"toe5-1.L": [
			-3.4906584289728866e-8,
			5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"risorius02.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"special05.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger2-2.L": [
			-4.363322858580419e-8,
			-4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"foot.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"oris06": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			2.6179939993653517e-8,
			-3.4906584733818136e-8,
			-8.72664696061073e-9,
			0.9999999999999996
		],
		"orbicularis03.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"levator06.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"orbicularis03.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"foot.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			-8.726645628343032e-9,
			8.726645295276114e-9,
			-3.490658428972877e-8,
			0.9999999999999992
		],
		"risorius02.L": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"special05.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerleg02.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue05.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-1.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"toe4-3.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"oris03.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe4-3.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-3.L": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"tongue05.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"lowerleg02.R": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"shoulder01.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger3-1.L": [
			-2.6179939993653497e-8,
			8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"special06.R": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"finger4-3.L": [
			3.490658428972884e-8,
			2.6179941325921163e-8,
			-1.7453291256685967e-8,
			0.999999999999999
		],
		"finger3-2.L": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"upperarm01.R": [
			0.16237526440228778,
			0.4580098299413413,
			0.09029176860513961,
			0.8693150554945812
		],
		"finger3-2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"upperarm01.L": [
			-8.173464696571948e-8,
			-0.4158963481752428,
			-0.004153292274476903,
			0.9094025388890081
		],
		"special06.L": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"finger3-1.R": [
			-8.726646516521438e-9,
			-3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"shoulder01.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"lowerarm01.R": [
			2.617993999365347e-8,
			2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			0.06760502886821218,
			-0.1399945668678544,
			-0.10682146931337391,
			0.9820490084577969
		],
		"spine02": [
			0,
			0,
			0,
			1
		],
		"spine03": [
			-0.08447263673550874,
			0,
			0,
			0.9964257993663908
		],
		"spine01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.R": [
			0,
			0,
			-5.2359879987306856e-8,
			0.9999999999999987
		],
		"spine04": [
			0.07949650041154765,
			0,
			0,
			0.9968351450577558
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			0.09411667957018222,
			0.0010871880621227126,
			-0.10885362102757479,
			0.9895917126966992
		],
		"finger5-3.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"oris01": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris02": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris05": [
			0,
			0,
			0,
			1
		],
		"risorius03.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"finger2-3.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"toe3-3.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger3-3.R": [
			2.6179939993653504e-8,
			1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"finger2-3.R": [
			-3.49065842897288e-8,
			1.7453293477132092e-8,
			1.7453291256685666e-8,
			0.9999999999999992
		],
		"toe3-3.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"risorius03.L": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		]
	},
	"lie_pensive_01": {
		"toe1-1.L": [
			0.18770293459446358,
			-0.0013939646159141228,
			0.035244434807293765,
			0.9815923262854034
		],
		"finger5-2.R": [
			0.07834837459096124,
			0.08164905617957074,
			0.264058825990358,
			0.957845446948793
		],
		"finger1-3.R": [
			0.09150195977324703,
			-0.013867554293006679,
			-0.03646251126961454,
			0.9950404853911717
		],
		"toe5-2.R": [
			-2.617993999365347e-8,
			-2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"toe4-2.R": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"clavicle.R": [
			0.01518617986112712,
			-0.03491768778011295,
			-0.06028597645361177,
			0.997454628574328
		],
		"neck03": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"neck02": [
			0.09461843832906305,
			-0.02671210074988506,
			-0.007708559739376448,
			0.9951253151781646
		],
		"neck01": [
			-0.30799669831046,
			-0.16406208965539748,
			-0.03243699074760315,
			0.9365732786061108
		],
		"clavicle.L": [
			0.00009079537078201584,
			0.026105253009038543,
			0.006984379019548689,
			0.9996347962987514
		],
		"toe5-2.L": [
			-3.4906584289728866e-8,
			-8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"toe4-2.L": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"finger5-2.L": [
			1.745329214486444e-8,
			8.726646627543744e-9,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"finger1-3.L": [
			-0.016330253352456914,
			-0.000188197070964069,
			-0.032691295303116756,
			0.9993320602375926
		],
		"toe1-1.R": [
			-2.617993999365353e-8,
			-1.745329336610979e-8,
			-1.7453291256686023e-8,
			0.9999999999999997
		],
		"oculi02.L": [
			8.72664651652143e-9,
			-2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"oculi01.L": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"jaw": [
			0,
			0,
			0,
			1
		],
		"finger4-2.R": [
			0.2194142470258992,
			0.14772524391154662,
			0.3605437952058424,
			0.8944511234561111
		],
		"oculi01.R": [
			1.745329303304289e-8,
			-3.490658440075123e-8,
			2.617993910547502e-8,
			0.9999999999999988
		],
		"oculi02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"wrist.R": [
			-0.033434430869876706,
			0.13635488193305612,
			0.03245466172786765,
			0.9895636310705639
		],
		"finger1-1.L": [
			-0.09050600635958311,
			0.11148470095109664,
			-0.04961239776848711,
			0.9883918424665112
		],
		"tongue07.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"eye.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger2-1.R": [
			0.27322215053297083,
			0.1716903950870523,
			0.1837334191729565,
			0.9285009937377583
		],
		"finger4-3.R": [
			0.09511476201387004,
			0.05737388809785182,
			0.16156272435702723,
			0.9805910998524896
		],
		"finger2-1.L": [
			0.021907320630865156,
			-0.023671634525848417,
			0.0018449020357572488,
			0.9994780234493053
		],
		"eye.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue07.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"wrist.L": [
			-0.05032136448004301,
			0.06136567910129176,
			0.0695867372627229,
			0.9944142495471555
		],
		"finger5-3.R": [
			0.052825546377354815,
			0.0507743797072594,
			0.1818563385820078,
			0.9805915031922433
		],
		"lowerleg01.R": [
			0.6382431321487948,
			-0.06401381318857091,
			0.019388300199233932,
			0.7669237444500848
		],
		"lowerarm02.L": [
			4.3633228585804086e-8,
			1.7453292144864463e-8,
			8.726646960611766e-9,
			0.9999999999999989
		],
		"oris07.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oris07.R": [
			1.7453292144864443e-8,
			6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"tongue00": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm02.R": [
			-8.726646516521438e-9,
			3.490658440075123e-8,
			8.726645628343022e-9,
			0.9999999999999994
		],
		"lowerleg01.L": [
			-0.0899164474806794,
			-0.006201326298637899,
			0.00669371416539831,
			0.9959075108740086
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			0.06945905521716052,
			-0.0006772386094984206,
			-0.07119854174354662,
			0.9950405763835959
		],
		"metacarpal4.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger1-2.R": [
			0.08940236187448215,
			-0.011005483921777026,
			-0.04219581748867453,
			0.9950405067138595
		],
		"pelvis.R": [
			-1.745329214486445e-8,
			3.3306690738754696e-16,
			4.3633228449276404e-8,
			0.9999999999999991
		],
		"toe2-1.R": [
			-6.981316857945738e-8,
			-4.363322914091583e-8,
			-8.726642963806366e-9,
			0.9999999999999968
		],
		"toe2-3.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"toe5-3.L": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"levator05.L": [
			2.6179939993653477e-8,
			-2.6179940548765046e-8,
			-8.726646960610674e-9,
			0.9999999999999996
		],
		"finger4-1.L": [
			-3.490658073701534e-8,
			7.85398202030052e-8,
			-4.36332321385178e-8,
			0.9999999999999952
		],
		"finger4-1.R": [
			0.1349947935792021,
			0.07559294591492793,
			0.24206141065616943,
			0.9578457003638723
		],
		"levator05.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"toe5-3.R": [
			-8.726646516521438e-9,
			3.490658440075123e-8,
			8.726645628343022e-9,
			0.9999999999999994
		],
		"toe2-3.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"finger4-2.L": [
			1.7453291256686053e-8,
			-2.617993988263123e-8,
			-1.745329303304289e-8,
			0.9999999999999994
		],
		"toe2-1.L": [
			0.1418290272767858,
			-0.015298553742688292,
			0.036354249905917534,
			0.9891050752012552
		],
		"finger1-2.L": [
			0.17719514552061763,
			0.22472150147031122,
			-0.43775941208434876,
			0.8523314052130314
		],
		"pelvis.L": [
			-8.726646072432225e-9,
			3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"metacarpal4.R": [
			-5.235987998730683e-8,
			8.726646627543744e-9,
			8.726645628343008e-9,
			0.9999999999999987
		],
		"tongue04": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-2.L": [
			1.7453291256686047e-8,
			1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"levator03.R": [
			8.726646072432215e-9,
			5.235988020935167e-8,
			4.624224031074066e-16,
			0.9999999999999982
		],
		"upperleg02.R": [
			-0.07732783780796275,
			-0.0012917372968179741,
			0.0032194854744184848,
			0.9969996849688477
		],
		"upperleg02.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"levator03.L": [
			8.726646072432215e-9,
			-5.235988020935167e-8,
			-4.624224031074066e-16,
			0.9999999999999982
		],
		"toe3-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"metacarpal3.L": [
			-2.6179939993653487e-8,
			7.771561172376096e-16,
			2.6179939958862843e-8,
			0.9999999999999994
		],
		"tongue01": [
			0,
			0,
			0,
			1
		],
		"breast.L": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			-1.745329214486445e-8,
			0.9999999999999997
		],
		"temporalis02.R": [
			-3.490658428972886e-8,
			-1.1102230246251565e-16,
			-8.726646072432225e-9,
			0.9999999999999993
		],
		"tongue02": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oris04.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"temporalis02.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"breast.R": [
			8.726646516521448e-9,
			8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"oris03.R": [
			8.726645628343061e-9,
			-8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"oris06.L": [
			8.726644740164625e-9,
			5.235987998730707e-8,
			2.617994088183188e-8,
			0.9999999999999984
		],
		"orbicularis04.R": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"toe1-2.R": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe1-2.L": [
			0.06401895297568982,
			0.016113968416834212,
			-0.004773554068549069,
			0.9978071591561729
		],
		"orbicularis04.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"metacarpal3.R": [
			-8.726645628343032e-9,
			2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"oris06.R": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"levator04.L": [
			9.138523059687561e-16,
			3.4906584289728926e-8,
			-2.6179939993653487e-8,
			0.999999999999999
		],
		"tongue06.L": [
			8.726646072432225e-9,
			-3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"toe2-2.L": [
			8.726645628343032e-9,
			-2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"toe2-2.R": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"tongue06.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"levator04.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe4-1.L": [
			0.14182848201416973,
			-0.015298060392591184,
			0.036353586674377235,
			0.9891051853941972
		],
		"upperleg01.R": [
			0.08870203576580188,
			-0.08736210891156115,
			0.06865729028999383,
			0.9898413950060698
		],
		"metacarpal1.R": [
			2.6179940881831904e-8,
			-1.7453293255087488e-8,
			4.363322858580429e-8,
			0.9999999999999984
		],
		"levator02.R": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"toe3-1.L": [
			0.14182881972000128,
			-0.015298563391817788,
			0.03635419055526502,
			0.9891051069952319
		],
		"toe3-1.R": [
			-4.3633228585804086e-8,
			-1.7453292144864463e-8,
			8.726646960611766e-9,
			0.9999999999999989
		],
		"levator02.L": [
			1.7453292144864446e-8,
			-3.490658440075123e-8,
			8.726645628343005e-9,
			0.9999999999999993
		],
		"finger5-1.R": [
			0.07458257648329654,
			0.06648359070081633,
			0.2693462180378738,
			0.957846535871657
		],
		"metacarpal1.L": [
			-8.726646072432212e-9,
			-6.661338147750939e-16,
			-4.363322873131176e-8,
			0.9999999999999994
		],
		"toe4-1.R": [
			-6.981316857945734e-8,
			-4.363322902989353e-8,
			8.726649181055347e-9,
			0.9999999999999966
		],
		"upperleg01.L": [
			0.07514372668830213,
			0.07233121665558706,
			-0.13006891926420183,
			0.986003900437498
		],
		"head": [
			-0.1461149013715308,
			-0.21769957625585856,
			0.21097768034867712,
			0.9416717838450395
		],
		"toe5-1.R": [
			-2.6179939993653527e-8,
			-4.3633228474782015e-8,
			-8.7266447401645e-9,
			0.9999999999999987
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			-6.853892559463472e-16,
			-2.617993988263123e-8,
			-2.6179939993653514e-8,
			0.9999999999999993
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			-1.7453292144864443e-8,
			-8.726645850387627e-9,
			2.6179939993653534e-8,
			0.9999999999999996
		],
		"metacarpal2.R": [
			-4.3633228585804185e-8,
			-7.771561172376096e-16,
			-2.6179939951169008e-8,
			0.9999999999999984
		],
		"temporalis01.R": [
			-9.13852305968756e-16,
			2.6179939993653534e-8,
			3.4906584289728846e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			0.14182890409614815,
			-0.01529809386559633,
			0.036353708999524746,
			0.989105119857815
		],
		"risorius02.R": [
			-8.726646516521441e-9,
			2.6179940104675836e-8,
			8.726645628343022e-9,
			0.9999999999999998
		],
		"special05.L": [
			1.745329214486444e-8,
			4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"finger2-2.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"foot.L": [
			0.44819366351237416,
			0.10193234431486065,
			0.10356431891527078,
			0.8820468632773715
		],
		"oris06": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"orbicularis03.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"levator06.L": [
			-1.7453291256686007e-8,
			8.72664507323151e-9,
			-5.235987998730687e-8,
			0.9999999999999984
		],
		"orbicularis03.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"foot.R": [
			0.34787153874637966,
			-0.09440048949346369,
			-0.06129481508121524,
			0.9307614548087925
		],
		"root": [
			0.6285553439251521,
			0.26866443281068775,
			-0.2308272280196306,
			0.6924278973080289
		],
		"finger2-2.R": [
			0.21276080355661556,
			0.13397708172923717,
			0.13899273686468747,
			0.9578434115971799
		],
		"risorius02.L": [
			-1.7453292144864453e-8,
			-2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"special05.R": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"lowerleg02.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue05.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"finger5-1.L": [
			-0.042445782549622516,
			0.03038056754174845,
			0.04449589587781333,
			0.9976449728784396
		],
		"toe4-3.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris03.L": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"toe4-3.L": [
			8.726645628343025e-9,
			8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"finger3-3.L": [
			2.617994265818873e-8,
			5.235988198570851e-8,
			-5.235987821094996e-8,
			0.9999999999999971
		],
		"tongue05.R": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"lowerleg02.R": [
			-4.569261529843785e-16,
			-2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"shoulder01.R": [
			-0.14735869358174727,
			-0.014896234630995209,
			-0.31146022756368774,
			0.9386458566816749
		],
		"finger3-1.L": [
			1.745329303304289e-8,
			-3.490658440075123e-8,
			2.617993910547502e-8,
			0.9999999999999988
		],
		"special06.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger4-3.L": [
			-8.72664562834302e-9,
			3.4906584289728926e-8,
			-8.726646516521445e-9,
			0.9999999999999994
		],
		"finger3-2.L": [
			3.8077175003734897e-16,
			4.363322869682662e-8,
			-8.726646072432225e-9,
			0.9999999999999991
		],
		"upperarm01.R": [
			-0.6249063817863207,
			-0.16600743954749475,
			0.22377060356333106,
			0.7292875022914603
		],
		"finger3-2.R": [
			0.21528604211966498,
			0.16042848963019074,
			0.2565282776376394,
			0.9284976373452396
		],
		"upperarm01.L": [
			-0.3798945123935055,
			-0.3243261272816831,
			0.015582530904405785,
			0.8661696758409284
		],
		"special06.L": [
			0,
			0,
			0,
			1
		],
		"finger3-1.R": [
			0.210397332416203,
			0.13960675524920452,
			0.27227217802003656,
			0.9284992070417505
		],
		"shoulder01.L": [
			0.00020927347567105284,
			0.060193007767500806,
			0.016104676785817406,
			0.9980568107107625
		],
		"lowerarm01.R": [
			-0.5956567028761134,
			0.45493316500805303,
			-0.12801753791059492,
			0.6494924308118011
		],
		"special03": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-2.6179939993653613e-8,
			0.9999999999999994
		],
		"spine02": [
			-0.05253893459460895,
			0.06209050553299089,
			-0.00421122785239928,
			0.9966778291074283
		],
		"spine03": [
			0.03694450788668977,
			0.0006152443229289206,
			0.000974416417129576,
			0.999316654181286
		],
		"spine01": [
			-0.10228983072233229,
			0.000998690641026534,
			-0.0055481404101974195,
			0.994738664818951
		],
		"upperarm02.R": [
			0.22388873163256684,
			0.24996304021436777,
			-0.01108511892847643,
			0.9419498046674744
		],
		"spine04": [
			-0.02123512929742559,
			-0.00038529393392838784,
			0.00006062513435758212,
			0.9997744331382448
		],
		"spine05": [
			4.3633228585804066e-8,
			1.7453290479529926e-8,
			3.490658428972878e-8,
			0.9999999999999984
		],
		"lowerarm01.L": [
			-0.3130439060314853,
			-0.3992435410958357,
			0.4159986013009385,
			0.7546875323638726
		],
		"finger5-3.L": [
			-2.617994088183191e-8,
			1.7453293144065185e-8,
			3.490658428972874e-8,
			0.9999999999999989
		],
		"oris01": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger2-3.L": [
			1.7453292144864443e-8,
			8.726646738566046e-9,
			-3.490658428972891e-8,
			0.9999999999999996
		],
		"toe3-3.R": [
			-4.363322858580416e-8,
			-2.617994021569814e-8,
			1.1643607064032247e-15,
			0.9999999999999988
		],
		"finger3-3.R": [
			0.11357367015656608,
			0.08260617814427695,
			0.13682432735514205,
			0.9805897940644583
		],
		"finger2-3.R": [
			0.14454222174842085,
			0.09758220481784474,
			0.08960878416526713,
			0.980589376464655
		],
		"toe3-3.L": [
			1.7453292144864453e-8,
			-2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"risorius03.L": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		]
	},
	"Harvey_Super1": {
		"toe1-1.L": [
			-0.28472205953004526,
			-0.03619614016300654,
			0.013867092354055819,
			0.9578261282737665
		],
		"finger5-2.R": [
			-8.726645184253789e-9,
			3.4906584178706623e-8,
			-2.617993999365348e-8,
			0.999999999999999
		],
		"finger1-3.R": [
			-0.09224075544836863,
			0.01447497376696738,
			0.03439714515097951,
			0.9950371624086322
		],
		"toe5-2.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"toe4-2.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"clavicle.R": [
			-0.28376385841548113,
			0.04524280726719787,
			-0.0005525697213470711,
			0.9578261093301047
		],
		"neck03": [
			-0.1961165689959565,
			-1.7114398787043683e-9,
			-8.557179777234364e-9,
			0.9805805889192658
		],
		"neck02": [
			-0.09938100069537172,
			-0.014300363758561252,
			0.04758828693729748,
			0.9938079649728782
		],
		"neck01": [
			-0.09841380052497846,
			0.014175630208589252,
			-0.14693848890295985,
			0.9841355881449132
		],
		"clavicle.L": [
			0,
			0,
			0,
			1
		],
		"toe5-2.L": [
			-8.726646516521438e-9,
			-3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"toe4-2.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-2.L": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"finger1-3.L": [
			0.09224074183185865,
			0.014474970314522717,
			0.03439712088531806,
			0.9950371645599486
		],
		"toe1-1.R": [
			-0.2847221624777066,
			0.03619614113886749,
			-0.013867114440513518,
			0.9578260973150439
		],
		"oculi02.L": [
			4.569261529843784e-16,
			1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"oculi01.L": [
			-1.7453291256686083e-8,
			-2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"jaw": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"finger4-2.R": [
			3.4906584289728793e-8,
			1.7453291478730648e-8,
			2.617994088183205e-8,
			0.9999999999999991
		],
		"oculi01.R": [
			-8.726646960610626e-9,
			3.4906584178706623e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"oculi02.R": [
			2.6179939993653494e-8,
			1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"wrist.R": [
			-0.18885610454623955,
			-0.20332288692814038,
			-0.5629681136581708,
			0.7784986052851907
		],
		"finger1-1.L": [
			8.726645628343025e-9,
			8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"tongue07.R": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"eye.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger2-1.R": [
			1.7453292144864443e-8,
			-2.220446049250313e-16,
			2.6179940054284205e-8,
			0.9999999999999996
		],
		"finger4-3.R": [
			0.04836989736620531,
			0.03545515055188575,
			0.07939966537703926,
			0.9950371744141725
		],
		"finger2-1.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-2.6179939993653613e-8,
			0.9999999999999994
		],
		"eye.L": [
			2.617993999365346e-8,
			-3.4906584733818136e-8,
			-1.0095481158786604e-15,
			0.9999999999999991
		],
		"tongue07.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"wrist.L": [
			-0.054060315622325175,
			0.30179628214441456,
			0.4846189790960576,
			0.8192319155517064
		],
		"finger5-3.R": [
			0.1019677186824649,
			0.1259476721900361,
			0.3341722714519192,
			0.9284765270103867
		],
		"lowerleg01.R": [
			0.9597147360646074,
			-0.10227437164645953,
			-0.02034049110901851,
			0.26090964471672307
		],
		"lowerarm02.L": [
			-3.490658428972885e-8,
			1.7453292144864463e-8,
			-6.052891516783062e-16,
			0.9999999999999991
		],
		"oris07.L": [
			5.235987998730684e-8,
			8.881784197001252e-16,
			-1.7453292120936186e-8,
			0.9999999999999983
		],
		"oris07.R": [
			-2.6179940881831887e-8,
			1.7453293255087488e-8,
			2.6179939105475074e-8,
			0.9999999999999993
		],
		"tongue00": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"lowerarm02.R": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"lowerleg01.L": [
			0.808971768727801,
			0.08621008147553921,
			0.017145726644551426,
			0.5812387833853009
		],
		"tongue03": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"finger1-1.R": [
			-0.1386206721186621,
			0.00818659125259813,
			0.13848830094511072,
			0.9805805828621991
		],
		"metacarpal4.L": [
			8.72664696061062e-9,
			-2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"finger1-2.R": [
			0.3025418348494524,
			0.14011984527970223,
			-0.0622852168555875,
			0.9407206912181593
		],
		"pelvis.R": [
			-0.44459842800598154,
			-0.020434210097922567,
			-0.04376399673431242,
			0.8944268519348705
		],
		"toe2-1.R": [
			-0.28507233482999744,
			0.03330747983284987,
			-0.013911244558334748,
			0.9578261079009053
		],
		"toe2-3.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe5-3.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator05.L": [
			1.1423153030516055e-15,
			-4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"finger4-1.L": [
			-2.6179940881831887e-8,
			1.7453293255087488e-8,
			2.6179939105475074e-8,
			0.9999999999999993
		],
		"finger4-1.R": [
			8.726645184253789e-9,
			-3.4906584178706623e-8,
			-2.617993999365348e-8,
			0.999999999999999
		],
		"levator05.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"toe5-3.R": [
			2.6179939993653477e-8,
			8.726645517320719e-9,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"toe2-3.R": [
			-8.72664696061065e-9,
			-6.108652461644937e-8,
			-1.7453291256685984e-8,
			0.9999999999999982
		],
		"finger4-2.L": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"toe2-1.L": [
			-0.2850722837246352,
			-0.03330743059286112,
			0.013911254440149195,
			0.9578261246798523
		],
		"finger1-2.L": [
			0.07133404539584681,
			-0.2669152574760656,
			-0.0789714419974424,
			0.9578262946081573
		],
		"pelvis.L": [
			-0.5114869239732156,
			0.023508469431530066,
			0.05034815810390419,
			0.8574925897317996
		],
		"metacarpal4.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue04": [
			0,
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0.9999999999999992
		],
		"toe3-2.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"levator03.R": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"upperleg02.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"upperleg02.L": [
			-0.09840253986475171,
			-0.01463494027833856,
			-0.0019491878383837973,
			0.9950371648023941
		],
		"levator03.L": [
			-9.138523059687567e-16,
			3.4906584178706623e-8,
			2.6179939993653468e-8,
			0.9999999999999989
		],
		"toe3-2.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"metacarpal3.L": [
			-8.726644740164569e-9,
			3.4906584178706623e-8,
			-3.490658428972887e-8,
			0.9999999999999988
		],
		"tongue01": [
			-2.617993999365348e-8,
			1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"breast.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis02.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"tongue02": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"oris04.R": [
			-8.726646516521428e-9,
			5.235987998730707e-8,
			8.726645628342985e-9,
			0.9999999999999987
		],
		"oris04.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"temporalis02.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"breast.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris03.R": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"oris06.L": [
			-6.10865242833821e-8,
			-1.7453293144065185e-8,
			-1.7453291256684746e-8,
			0.9999999999999979
		],
		"orbicularis04.R": [
			-1.7453292144864453e-8,
			-2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"toe1-2.R": [
			-1.7453292144864436e-8,
			4.363322869682662e-8,
			-6.702088926697263e-16,
			0.9999999999999991
		],
		"toe1-2.L": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"orbicularis04.L": [
			-2.617993910547506e-8,
			-4.3633228918871225e-8,
			1.745329303304283e-8,
			0.9999999999999987
		],
		"metacarpal3.R": [
			2.7415568120271375e-15,
			-3.4906584178706623e-8,
			7.853981998096016e-8,
			0.9999999999999962
		],
		"oris06.R": [
			-2.6179940881831887e-8,
			-2.617994110387656e-8,
			-1.745329125668601e-8,
			0.9999999999999994
		],
		"levator04.L": [
			8.726646072432223e-9,
			-3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"tongue06.L": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe2-2.L": [
			-8.726645628343032e-9,
			2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"toe2-2.R": [
			2.6179939993653504e-8,
			1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"tongue06.R": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"levator04.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"toe4-1.L": [
			-0.28564398716790723,
			-0.03124963258298441,
			-0.00032892669535267686,
			0.9578261141070846
		],
		"upperleg01.R": [
			-0.44348101405379886,
			-0.10430872563997651,
			-0.21488669656925022,
			0.8638680382828927
		],
		"metacarpal1.R": [
			8.726645628343013e-9,
			1.7453292255886765e-8,
			2.61799399936535e-8,
			0.9999999999999997
		],
		"levator02.R": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe3-1.L": [
			-0.28560721065832534,
			-0.03147816422856986,
			0.0026025241695640743,
			0.9578261184916168
		],
		"toe3-1.R": [
			-0.1949282228346003,
			0.02148400395187633,
			-0.0017762279946036768,
			0.9805805782957622
		],
		"levator02.L": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"finger5-1.R": [
			1.745329214486444e-8,
			4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"metacarpal1.L": [
			2.6179939993653507e-8,
			4.440892098500626e-16,
			-1.745329219192525e-8,
			0.9999999999999997
		],
		"toe4-1.R": [
			-0.19495330397616534,
			0.021328016321343735,
			0.00022448536855645935,
			0.9805805803680253
		],
		"upperleg01.L": [
			-0.617373677128124,
			0.10533548897496336,
			0.17239451706001513,
			0.7602856752822247
		],
		"head": [
			8.183351662378088e-9,
			0.2897765213286029,
			0.08329858407218788,
			0.9534625915987802
		],
		"toe5-1.R": [
			-0.19496440328254527,
			0.02030031925666087,
			0.006205292938323589,
			0.9805805794682599
		],
		"special01": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"temporalis01.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"special04": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal2.L": [
			2.6179939105475045e-8,
			2.617993977160893e-8,
			1.745329303304287e-8,
			0.9999999999999997
		],
		"metacarpal2.R": [
			-1.7453292144864446e-8,
			4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"temporalis01.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-1.L": [
			-0.2856602593141116,
			-0.029743826206886204,
			-0.009091961534019947,
			0.9578261101508109
		],
		"risorius02.R": [
			-1.745329214486444e-8,
			-3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"special05.L": [
			8.726646072432223e-9,
			-3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"finger2-2.L": [
			2.6179939993653507e-8,
			-8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"foot.L": [
			0.4445974045258838,
			0.0473786550770704,
			0.009422578235484645,
			0.8944269819003293
		],
		"oris06": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"levator06.R": [
			8.726646516521443e-9,
			1.7453291811797556e-8,
			-2.6179939993653554e-8,
			0.9999999999999993
		],
		"orbicularis03.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"levator06.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"orbicularis03.L": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"foot.R": [
			-0.3692183409169675,
			0.039345812001092106,
			0.007824985358701162,
			0.9284764366491125
		],
		"root": [
			0.19611655550815552,
			1.1102230246251565e-16,
			0,
			0.9805805916168322
		],
		"finger2-2.R": [
			-5.23598799873068e-8,
			-3.4906584733818136e-8,
			8.726647848788919e-9,
			0.9999999999999982
		],
		"risorius02.L": [
			-8.72664651652143e-9,
			4.363322880784892e-8,
			8.726645628342965e-9,
			0.9999999999999992
		],
		"special05.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerleg02.L": [
			-1.745329303304284e-8,
			5.235988009832937e-8,
			8.726645184253813e-9,
			0.9999999999999986
		],
		"tongue05.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"finger5-1.L": [
			2.6179939993653487e-8,
			-8.726645295276114e-9,
			-3.4906584289728926e-8,
			0.9999999999999988
		],
		"toe4-3.R": [
			-3.490658428972885e-8,
			-1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"oris03.L": [
			2.6179939993653477e-8,
			8.726645517320719e-9,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"toe4-3.L": [
			-8.72664651652143e-9,
			-4.363322880784892e-8,
			-8.726645628342965e-9,
			0.9999999999999992
		],
		"finger3-3.L": [
			0.11544471103059957,
			-0.09275129856397923,
			-0.12857444927153416,
			0.9805806067347437
		],
		"tongue05.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"lowerleg02.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"shoulder01.R": [
			-0.0068544769291048495,
			0.002304067198113824,
			0.099240864705738,
			0.9950371642269611
		],
		"finger3-1.L": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"special06.R": [
			0,
			-5.235987998730684e-8,
			-1.1102230246251565e-16,
			0.9999999999999987
		],
		"finger4-3.L": [
			0.1396830950015074,
			-0.1023876898222491,
			-0.22929121960190893,
			0.9578261483991402
		],
		"finger3-2.L": [
			1.7453291256686043e-8,
			1.745329114566374e-8,
			4.363322858580395e-8,
			0.9999999999999986
		],
		"upperarm01.R": [
			-0.032186631088589386,
			0.13943423363997864,
			0.19006857643477107,
			0.9712857723247357
		],
		"finger3-2.R": [
			1.7453293033042873e-8,
			-1.7453293144065185e-8,
			4.363322858580396e-8,
			0.9999999999999986
		],
		"upperarm01.L": [
			-0.042031385220862146,
			-0.270174258897692,
			-0.08836327071924588,
			0.9578262707157782
		],
		"special06.L": [
			8.726646516521441e-9,
			-2.6179940104675836e-8,
			8.726645628343022e-9,
			0.9999999999999998
		],
		"finger3-1.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"shoulder01.L": [
			-0.14038238582746942,
			-0.25024239334302556,
			0.015505879553936845,
			0.95782623581869
		],
		"lowerarm01.R": [
			0.14460574245551305,
			-0.13183551863750032,
			0.013047582715260707,
			0.9805806116071026
		],
		"special03": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"upperarm02.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"spine02": [
			0.09950396300933954,
			-1.1102230246251565e-16,
			0,
			0.995037165811125
		],
		"spine03": [
			0.09950396300933954,
			-1.1102230246251565e-16,
			0,
			0.995037165811125
		],
		"spine01": [
			0,
			0,
			0,
			1
		],
		"upperarm02.R": [
			0.1935841215039203,
			0.2123537972014773,
			0.00020964177181881437,
			0.9578261892253712
		],
		"spine04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			0.07336883363088934,
			0.06688955517551409,
			-0.006620001434296494,
			0.9950371737985848
		],
		"finger5-3.L": [
			0.07889324983872682,
			-0.09744668518629618,
			-0.2585517793158341,
			0.9578261721673211
		],
		"oris01": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"oris02": [
			-2.617993999365348e-8,
			-1.745329247793137e-8,
			8.726646516521431e-9,
			0.9999999999999996
		],
		"oris05": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"risorius03.R": [
			-3.490658428972882e-8,
			-2.6179939993653534e-8,
			-8.726645184253818e-9,
			0.9999999999999988
		],
		"finger2-3.L": [
			0.21502932206529177,
			-0.1499366268185508,
			-0.11768775668584971,
			0.9578261796989407
		],
		"toe3-3.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger3-3.R": [
			-4.363323036216088e-8,
			-1.7453295031444327e-8,
			-5.2359879987306935e-8,
			0.999999999999998
		],
		"finger2-3.R": [
			0.1467584958725643,
			0.10233237344770918,
			0.08032244477769342,
			0.9805806107091428
		],
		"toe3-3.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"risorius03.L": [
			-3.490658428972882e-8,
			2.6179939993653534e-8,
			8.726645184253818e-9,
			0.9999999999999988
		]
	},
	"Harvey_Super2": {
		"toe1-1.L": [
			-4.36332285858041e-8,
			-8.726647071632954e-9,
			-1.7453292144865118e-8,
			0.9999999999999989
		],
		"finger5-2.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger1-3.R": [
			0.3442816905487777,
			-0.05402679209366523,
			-0.12838474793509397,
			0.928476483162921
		],
		"toe5-2.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"toe4-2.R": [
			-2.6179939993653527e-8,
			-4.3633228474782015e-8,
			-8.7266447401645e-9,
			0.9999999999999987
		],
		"clavicle.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"neck03": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"neck02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-2.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"toe4-2.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger5-2.L": [
			0.027543657249595,
			-0.035470812392371154,
			-0.08879303813725895,
			0.9950371675429499
		],
		"finger1-3.L": [
			0.26637352599450564,
			0.04180091245291884,
			0.09933227687941253,
			0.9578261466139405
		],
		"toe1-1.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"oculi02.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oculi01.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			0.049095758852794935,
			0.040134873637545754,
			0.07668003549351317,
			0.9950371704300699
		],
		"oculi01.R": [
			-8.726645628343007e-9,
			1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"oculi02.R": [
			5.235987998730683e-8,
			1.7453293255087488e-8,
			-1.7453291256686007e-8,
			0.9999999999999984
		],
		"wrist.R": [
			-0.0940462943054617,
			-0.13102762743898666,
			0.2378151275739997,
			0.957826195336128
		],
		"finger1-1.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			2.617993999365343e-8,
			0.9999999999999992
		],
		"tongue07.R": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"eye.R": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"finger2-1.R": [
			-0.06495926585799534,
			0.06685169323625928,
			0.03481617239304356,
			0.9950371746977761
		],
		"finger4-3.R": [
			0.21739556835656637,
			0.15935075254249853,
			0.3568567432169261,
			0.8944270620591
		],
		"finger2-1.L": [
			-0.06495930485941365,
			-0.06685165616204258,
			-0.03481618729642259,
			0.9950371741210045
		],
		"eye.L": [
			-2.6179939993653484e-8,
			-2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"tongue07.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"wrist.L": [
			-0.0940463350170057,
			0.13102759813730847,
			-0.23781508850289337,
			0.9578262050479714
		],
		"finger5-3.R": [
			0.05384493975180548,
			0.06650792187414811,
			0.17646279040810894,
			0.9805805945420758
		],
		"lowerleg01.R": [
			0.09892173373854492,
			-0.010541795257721587,
			-0.0020965921656999776,
			0.995037167872736
		],
		"lowerarm02.L": [
			-0.2251133344360241,
			0.21514894271031548,
			-0.3209908400667941,
			0.8944270790304498
		],
		"oris07.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"oris07.R": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue00": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm02.R": [
			-0.1446419441656835,
			-0.13823962693828384,
			0.20624619821891482,
			0.9578261946993198
		],
		"lowerleg01.L": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			-1.745329303304289e-8,
			1.7453293144065185e-8,
			2.6179939993653494e-8,
			0.9999999999999993
		],
		"metacarpal4.L": [
			-2.6179939993653524e-8,
			-8.72664507323151e-9,
			3.4906584289729124e-8,
			0.999999999999999
		],
		"finger1-2.R": [
			2.617994088183186e-8,
			-4.363322880784892e-8,
			2.617993910547505e-8,
			0.9999999999999986
		],
		"pelvis.R": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe2-1.R": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"toe2-3.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"toe5-3.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator05.L": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"finger4-1.L": [
			1.7453290368507637e-8,
			5.235988020935167e-8,
			3.490658606608566e-8,
			0.9999999999999979
		],
		"finger4-1.R": [
			1.745329125668605e-8,
			-2.617993899445281e-8,
			-4.3633228585803e-8,
			0.9999999999999988
		],
		"levator05.R": [
			8.726645628343017e-9,
			1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"toe5-3.R": [
			2.6179939105474995e-8,
			-4.363322880784892e-8,
			-2.617994088183188e-8,
			0.9999999999999984
		],
		"toe2-3.R": [
			-3.046174000298792e-16,
			-3.490658440075123e-8,
			-8.726646072432198e-9,
			0.9999999999999992
		],
		"finger4-2.L": [
			0.0967649199255904,
			-0.07910345789903461,
			-0.15113199298145738,
			0.9805806004187838
		],
		"toe2-1.L": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"finger1-2.L": [
			0.3446576116424203,
			0.13040147514583666,
			-0.12941928902464644,
			0.9205744041874548
		],
		"pelvis.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"metacarpal4.R": [
			-1.7453292144864433e-8,
			2.617994021569814e-8,
			-4.927555263958927e-16,
			0.9999999999999996
		],
		"tongue04": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe3-2.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator03.R": [
			-2.6179939105475045e-8,
			-1.745329158975295e-8,
			2.6179940881831907e-8,
			0.9999999999999996
		],
		"upperleg02.R": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"upperleg02.L": [
			0.0023299147470715407,
			-0.0024205840790513244,
			-0.0994472276247368,
			0.9950371657318843
		],
		"levator03.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"toe3-2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"metacarpal3.L": [
			-2.6179936440939776e-8,
			5.235987821095023e-8,
			-6.108652428338168e-8,
			0.9999999999999962
		],
		"tongue01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"breast.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis02.R": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"tongue02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris04.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"oris04.L": [
			6.092348000597591e-16,
			-1.745329203384216e-8,
			3.490658428972889e-8,
			0.9999999999999993
		],
		"temporalis02.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"breast.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris03.R": [
			3.490658428972883e-8,
			-1.3322676295501878e-15,
			3.4906584292733954e-8,
			0.999999999999999
		],
		"oris06.L": [
			-2.617993999365347e-8,
			-1.745329247793137e-8,
			-8.726645628343018e-9,
			0.9999999999999994
		],
		"orbicularis04.R": [
			-2.6179939993653504e-8,
			-1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"toe1-2.R": [
			-8.726645628343007e-9,
			1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"toe1-2.L": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"orbicularis04.L": [
			-6.108652428338209e-8,
			-2.6179939993653534e-8,
			1.6135134219578416e-15,
			0.999999999999998
		],
		"metacarpal3.R": [
			-3.0461740002987947e-16,
			8.726645961409929e-9,
			3.490658428972888e-8,
			0.9999999999999993
		],
		"oris06.R": [
			-2.617993999365347e-8,
			-2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"levator04.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue06.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"toe2-2.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-2.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"tongue06.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator04.R": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"toe4-1.L": [
			-3.490658428972885e-8,
			-1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"upperleg01.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"metacarpal1.R": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"levator02.R": [
			2.6179939105475025e-8,
			3.4906584289728926e-8,
			2.6179940881831904e-8,
			0.9999999999999988
		],
		"toe3-1.L": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe3-1.R": [
			0,
			0,
			0,
			1
		],
		"levator02.L": [
			8.726645628343023e-9,
			-1.745329203384216e-8,
			-2.6179939993653547e-8,
			0.9999999999999994
		],
		"finger5-1.R": [
			0.09181765745977075,
			-0.03550282700365959,
			-0.014494915982841966,
			0.9950371673781833
		],
		"metacarpal1.L": [
			-2.6179940881831877e-8,
			2.6179940992854256e-8,
			3.4906584289728846e-8,
			0.9999999999999988
		],
		"toe4-1.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"upperleg01.L": [
			-0.005172658129396219,
			0.03020824715972903,
			0.09466648041663935,
			0.995037166590746
		],
		"head": [
			-0.09950397754293931,
			1.1102230246251565e-16,
			2.465190328815662e-32,
			0.9950371643577614
		],
		"toe5-1.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			1.745329303304289e-8,
			1.745329292202058e-8,
			-2.6179939993653487e-8,
			0.9999999999999993
		],
		"special04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-3.490658428972884e-8,
			2.6179941325921163e-8,
			1.7453291256685967e-8,
			0.999999999999999
		],
		"metacarpal2.R": [
			-4.569261529843786e-16,
			1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"temporalis01.R": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"toe5-1.L": [
			-1.7453292144864443e-8,
			-2.6179940104675836e-8,
			-8.726645628343028e-9,
			0.9999999999999997
		],
		"risorius02.R": [
			-6.092348000597588e-16,
			-3.490658440075123e-8,
			-1.7453292144864443e-8,
			0.9999999999999992
		],
		"special05.L": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"finger2-2.L": [
			0.21575955557236845,
			-0.14295594790411537,
			-0.1248215038774184,
			0.9578261863761242
		],
		"foot.L": [
			0.011926399578702335,
			0.3395065037422612,
			-0.0398854003199802,
			0.9396819939485433
		],
		"oris06": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator06.R": [
			-1.7453291256686053e-8,
			3.4906584178706623e-8,
			-2.6179940881831874e-8,
			0.9999999999999988
		],
		"orbicularis03.R": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"levator06.L": [
			-1.745329214486444e-8,
			-3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"orbicularis03.L": [
			-4.363322858580416e-8,
			-2.617994021569814e-8,
			1.1643607064032247e-15,
			0.9999999999999988
		],
		"foot.R": [
			-0.11959006365575982,
			-0.20567050246367435,
			0.0013105803185993917,
			0.9712858196588579
		],
		"root": [
			2.2830923974207256e-10,
			-0.19406467619590484,
			0.0282917861425222,
			0.980580683212679
		],
		"finger2-2.R": [
			0.21575955544541667,
			0.14295594394372702,
			0.12482151861145321,
			0.9578261850757078
		],
		"risorius02.L": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"special05.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"lowerleg02.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue05.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger5-1.L": [
			0.09181763910465479,
			0.03550285692670352,
			0.014494917986303629,
			0.9950371679750764
		],
		"toe4-3.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oris03.L": [
			8.726646516521438e-9,
			-1.7453292366909068e-8,
			1.7453292144864456e-8,
			0.9999999999999996
		],
		"toe4-3.L": [
			2.6179939993653527e-8,
			8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"finger3-3.L": [
			0.11544467456718463,
			-0.09275129115531167,
			-0.12857449286558534,
			0.9805806060123038
		],
		"tongue05.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"lowerleg02.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"shoulder01.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger3-1.L": [
			-0.07855548635785824,
			-0.05106928208929895,
			-0.03349617397458428,
			0.9950371703202995
		],
		"special06.R": [
			4.3633228585804086e-8,
			-1.7453292144864463e-8,
			-8.726646960611766e-9,
			0.9999999999999989
		],
		"finger4-3.L": [
			0.09533433705211242,
			-0.06988010759775287,
			-0.15649221029461557,
			0.9805806049775133
		],
		"finger3-2.L": [
			0.1155452057661438,
			-0.09448866757097629,
			-0.12721183496820476,
			0.9805806168638778
		],
		"upperarm01.R": [
			0.14696134030904134,
			-0.11718668081881956,
			0.11085516359935314,
			0.9758999841154824
		],
		"finger3-2.R": [
			0.11554520522411611,
			0.09448866373240594,
			0.12721186787750088,
			0.9805806130282703
		],
		"upperarm01.L": [
			0.1469613302457562,
			0.11718667296811602,
			-0.11085521107580973,
			0.9758999811806532
		],
		"special06.L": [
			6.108652428338212e-8,
			-8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"finger3-1.R": [
			-0.07855548641336192,
			0.051069295263113546,
			0.03349611709008376,
			0.9950371715546994
		],
		"shoulder01.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerarm01.R": [
			-0.2543135000082755,
			-0.11575856195352818,
			0.2592760329291823,
			0.9245001556497966
		],
		"special03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperarm02.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"spine02": [
			-2.652102812434577e-9,
			0.09826320984822778,
			-0.01566292701421515,
			0.9950371924243184
		],
		"spine03": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"spine01": [
			-0.09901503015597428,
			0.09490278198583568,
			0.028238050731874888,
			0.9901475133864771
		],
		"upperarm02.R": [
			-0.06703494796850316,
			-0.07353451000679245,
			-0.00007259870532833877,
			0.9950371783598586
		],
		"spine04": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.28078638331543554,
			0.009294439432009471,
			-0.19004555801706868,
			0.9407206313344381
		],
		"finger5-3.L": [
			0.1019677173960623,
			-0.12594763399562037,
			-0.33417235312852167,
			0.9284765029361212
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris05": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"risorius03.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger2-3.L": [
			0.21502935445807725,
			-0.14993660789232344,
			-0.11768780236537812,
			0.9578261697769039
		],
		"toe3-3.R": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"finger3-3.R": [
			0.21862071673343825,
			0.17564562276088358,
			0.24348484703501125,
			0.928476562269741
		],
		"finger2-3.R": [
			0.2150293296527586,
			0.149936584671438,
			0.11768778246567847,
			0.9578261814256596
		],
		"toe3-3.L": [
			3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"risorius03.L": [
			-3.490658428972882e-8,
			2.6179939993653534e-8,
			8.726645184253818e-9,
			0.9999999999999988
		]
	},
	"Harvey_selfie1": {
		"toe1-1.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"finger5-2.R": [
			0.05347440894361295,
			0.055717123066460816,
			0.1802132790418955,
			0.9805912827688689
		],
		"finger1-3.R": [
			-0.09150222892471851,
			0.013863054057034474,
			0.03646260556115456,
			0.995040519893392
		],
		"toe5-2.R": [
			1.745329214486445e-8,
			1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"toe4-2.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"clavicle.R": [
			-0.002440629598071123,
			-0.006080514727683006,
			-0.19594589661259545,
			0.9805928187930493
		],
		"neck03": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"neck02": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"neck01": [
			1.7453292144864453e-8,
			2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"clavicle.L": [
			-8.726646516521433e-9,
			8.726646405499139e-9,
			4.3633228585804245e-8,
			0.9999999999999992
		],
		"toe5-2.L": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe4-2.L": [
			3.8077175003734897e-16,
			4.363322869682662e-8,
			-8.726646072432225e-9,
			0.9999999999999991
		],
		"finger5-2.L": [
			0.10125851936345999,
			-0.10554750565296933,
			-0.3413086858591591,
			0.9285013824781577
		],
		"finger1-3.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe1-1.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oculi02.L": [
			4.569261529843771e-16,
			-5.235987998730707e-8,
			8.726646072432165e-9,
			0.9999999999999986
		],
		"oculi01.L": [
			-1.7453291256686047e-8,
			-1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"jaw": [
			0,
			0,
			0,
			1
		],
		"finger4-2.R": [
			0.09621844051419556,
			0.06476075726287733,
			0.15808188983115906,
			0.9805907261090961
		],
		"oculi01.R": [
			-8.726645184253792e-9,
			1.745329203384216e-8,
			-4.363322858580425e-8,
			0.9999999999999988
		],
		"oculi02.R": [
			-2.6179939993653494e-8,
			-6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"wrist.R": [
			0.08109751592559929,
			0.28817071641794934,
			-0.34159996798229425,
			0.8908929750449034
		],
		"finger1-1.L": [
			0.13690227682875242,
			0.0013408272405897037,
			0.14033364435349213,
			0.980592900771713
		],
		"tongue07.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"eye.R": [
			0,
			0,
			0,
			1
		],
		"finger2-1.R": [
			0.0660732061850054,
			-0.06314400103989892,
			-0.03929778365716578,
			0.9950391202142459
		],
		"finger4-3.R": [
			0.13936293556851395,
			0.08407557072851324,
			0.2367319420507227,
			0.9578451118052926
		],
		"finger2-1.L": [
			0.06607326365645345,
			0.06314396375365139,
			0.03929784641473428,
			0.9950391162855993
		],
		"eye.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"tongue07.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"wrist.L": [
			0.066799823235439,
			-0.020949035421874762,
			-0.48729763849593105,
			0.8704251449992106
		],
		"finger5-3.R": [
			0.052825560658227584,
			0.05077434521497737,
			0.18185627330142606,
			0.9805915163155612
		],
		"lowerleg01.R": [
			0,
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0.9999999999999991
		],
		"lowerarm02.L": [
			-0.05162734916198186,
			0.05658476875995655,
			-0.06347775943299495,
			0.9950393735025044
		],
		"oris07.L": [
			2.6179940881831877e-8,
			-2.6179940992854256e-8,
			3.4906584289728846e-8,
			0.9999999999999988
		],
		"oris07.R": [
			-8.726644740164625e-9,
			5.235987998730707e-8,
			-2.617994088183188e-8,
			0.9999999999999984
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			1.7453292144864436e-8,
			4.363322869682662e-8,
			6.702088926697263e-16,
			0.9999999999999991
		],
		"lowerleg01.L": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.06945905517671212,
			-0.000677238145428527,
			-0.07119854911407529,
			0.9950405758593484
		],
		"metacarpal4.L": [
			-5.2359879987306876e-8,
			-8.726647626744466e-9,
			-2.6179939105475504e-8,
			0.9999999999999984
		],
		"finger1-2.R": [
			-2.6179940881831907e-8,
			-3.490658451177353e-8,
			-1.7453291256686053e-8,
			0.9999999999999991
		],
		"pelvis.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"toe2-1.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-3.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe5-3.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator05.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"finger4-1.L": [
			-1.74532930330429e-8,
			-1.7453292810998278e-8,
			-4.3633228585803696e-8,
			0.9999999999999984
		],
		"finger4-1.R": [
			-0.08216018067506127,
			0.046530748437738634,
			0.03130708676497091,
			0.9950399290880517
		],
		"levator05.R": [
			6.092348000597589e-16,
			-3.4906584178706623e-8,
			1.745329214486445e-8,
			0.9999999999999991
		],
		"toe5-3.R": [
			1.7453292144864443e-8,
			-1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe2-3.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.14097945226445127,
			-0.09489904324948606,
			-0.23163177973720847,
			0.9578442901877742
		],
		"toe2-1.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger1-2.L": [
			0.2581933292348276,
			0.03178795025180614,
			0.12186472265573986,
			0.957849007061898
		],
		"pelvis.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"metacarpal4.R": [
			-3.490658428972881e-8,
			2.1094237467877974e-15,
			5.235987984666416e-8,
			0.9999999999999981
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-1.7453292144864436e-8,
			-3.490658440075123e-8,
			8.726646516521445e-9,
			0.9999999999999993
		],
		"levator03.R": [
			8.72664207562928e-9,
			8.726645717160864e-8,
			4.363322858580404e-8,
			0.9999999999999953
		],
		"upperleg02.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"upperleg02.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator03.L": [
			4.363323036216087e-8,
			-5.235988043139628e-8,
			1.7453289480329435e-8,
			0.9999999999999978
		],
		"toe3-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"tongue01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"breast.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"temporalis02.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"oris04.L": [
			-8.726646072432222e-9,
			-2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"temporalis02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"breast.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris03.R": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"oris06.L": [
			-2.6179940881831897e-8,
			2.6179940992854256e-8,
			2.6179939105475064e-8,
			0.9999999999999988
		],
		"orbicularis04.R": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"toe1-2.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe1-2.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"orbicularis04.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"metacarpal3.R": [
			-1.7453293033042916e-8,
			2.617994110387656e-8,
			2.6179939105475286e-8,
			0.9999999999999992
		],
		"oris06.R": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"levator04.L": [
			8.7266478487891e-9,
			6.108652428338246e-8,
			-2.6179939105475074e-8,
			0.9999999999999977
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue06.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"levator04.R": [
			3.046174000298796e-16,
			-3.4906584178706623e-8,
			8.726646072432218e-9,
			0.9999999999999994
		],
		"toe4-1.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"upperleg01.R": [
			0.0011314569016430164,
			0.02416149386283961,
			0.07596263196268249,
			0.9968172453187685
		],
		"metacarpal1.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"levator02.R": [
			1.1423153030516055e-15,
			4.363322869682662e-8,
			-2.617993999365348e-8,
			0.9999999999999989
		],
		"toe3-1.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"toe3-1.R": [
			-3.490658428972885e-8,
			1.7453292144864463e-8,
			-6.052891516783062e-16,
			0.9999999999999991
		],
		"levator02.L": [
			1.7453293033042916e-8,
			-2.617994110387656e-8,
			2.6179939105475286e-8,
			0.9999999999999992
		],
		"finger5-1.R": [
			-0.18152831801842226,
			0.06578285919982763,
			0.034050227210988326,
			0.9805919983457839
		],
		"metacarpal1.L": [
			-2.284630764921893e-16,
			8.726645961409929e-9,
			2.61799399936535e-8,
			0.9999999999999996
		],
		"toe4-1.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"upperleg01.L": [
			0.0011314384360046788,
			-0.024161504111685606,
			-0.07596263929210616,
			0.9968172445327698
		],
		"head": [
			-2.862764174864814e-7,
			-0.20002502879575712,
			-0.08720843733579267,
			0.9759019808938928
		],
		"toe5-1.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			1.5230870001493993e-16,
			-8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			2.617993910547502e-8,
			-2.617993899445281e-8,
			-3.490658428972884e-8,
			0.9999999999999989
		],
		"metacarpal2.R": [
			-3.807717500373487e-16,
			8.726645961409929e-9,
			4.3633228585804185e-8,
			0.999999999999999
		],
		"temporalis01.R": [
			8.726645628343025e-9,
			8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"toe5-1.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"risorius02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"special05.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger2-2.L": [
			0.07367196005803121,
			-0.046391043715055647,
			-0.04812727859840493,
			0.9950397371054824
		],
		"foot.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"levator06.R": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"orbicularis03.R": [
			0,
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0.9999999999999992
		],
		"levator06.L": [
			0,
			0,
			0,
			1
		],
		"orbicularis03.L": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"foot.R": [
			-0.006003527334728779,
			-0.08766046433708796,
			-0.04668137467381342,
			0.9950379138054538
		],
		"root": [
			8.161953728257245e-10,
			0.19607266175857052,
			0.004129148089005899,
			0.9805806756442677
		],
		"finger2-2.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"risorius02.L": [
			-3.490658428972884e-8,
			-2.6179941325921163e-8,
			-1.7453291256685967e-8,
			0.999999999999999
		],
		"special05.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"lowerleg02.L": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"tongue05.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger5-1.L": [
			8.726647404699876e-9,
			-2.617994065978735e-8,
			5.2359879987306756e-8,
			0.9999999999999984
		],
		"toe4-3.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"oris03.L": [
			-8.726645628343e-9,
			-8.726645628343022e-9,
			6.108652428338217e-8,
			0.9999999999999979
		],
		"toe4-3.L": [
			-4.363322858580417e-8,
			-8.726645628343022e-9,
			8.726646516520993e-9,
			0.999999999999999
		],
		"finger3-3.L": [
			0.05762340104994045,
			-0.04190858121362362,
			-0.06941854469614872,
			0.9950398384609375
		],
		"tongue05.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"lowerleg02.R": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"shoulder01.R": [
			-0.08464807867032573,
			-0.046567616572908754,
			-0.19559412998415351,
			0.9759144922481077
		],
		"finger3-1.L": [
			-7.615435000746988e-16,
			-4.363322858580432e-8,
			-1.7453292144864436e-8,
			0.9999999999999989
		],
		"special06.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger4-3.L": [
			0.32449131140106796,
			-0.19572703260643176,
			-0.5512760834602424,
			0.7432973814948041
		],
		"finger3-2.L": [
			0.21528601841894612,
			-0.1604284529201775,
			-0.2565282455097758,
			0.928497658059853
		],
		"upperarm01.R": [
			-0.19138635583607966,
			-0.2033745499741918,
			-0.19236680206778423,
			0.9407470800830554
		],
		"finger3-2.R": [
			-2.617993999365348e-8,
			-1.745329247793137e-8,
			8.726646516521431e-9,
			0.9999999999999996
		],
		"upperarm01.L": [
			-0.003613698362847342,
			0.0006814808269470785,
			-0.19602077054540834,
			0.980592848374293
		],
		"special06.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger3-1.R": [
			-0.03975543376032456,
			0.02387141355031075,
			0.018495230238930176,
			0.9987530162958447
		],
		"shoulder01.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerarm01.R": [
			-0.7346562300401578,
			0.45469440980243403,
			0.1770128796664698,
			0.4713805869886704
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"spine02": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"spine03": [
			-0.09947006743840667,
			-1.6498693189426206e-8,
			1.0419447015416116e-8,
			0.995040554793521
		],
		"spine01": [
			-1.0269086853830795e-7,
			0.009774389224756597,
			0.09898893251558964,
			0.9950405280965676
		],
		"upperarm02.R": [
			-0.13077580456568452,
			-0.14596269793061556,
			0.006467242766250558,
			0.9805869438882086
		],
		"spine04": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"spine05": [
			0.09946981449274779,
			-1.1102230246251565e-16,
			0,
			0.9950405800794149
		],
		"lowerarm01.L": [
			-0.42466280447906024,
			-0.4040506989744399,
			-0.3566268878370226,
			0.7274763212792056
		],
		"finger5-3.L": [
			0.07739786016641188,
			-0.07440650385529324,
			-0.2664664012394104,
			0.9578459690556778
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			2.6179939993653477e-8,
			-2.6179940548765046e-8,
			-8.726646960610674e-9,
			0.9999999999999996
		],
		"finger2-3.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-3.R": [
			3.490658428972885e-8,
			-1.7453292144864463e-8,
			-6.052891516783062e-16,
			0.9999999999999991
		],
		"finger3-3.R": [
			5.235987998730673e-8,
			8.726647182655256e-9,
			-1.745329125668265e-8,
			0.9999999999999986
		],
		"finger2-3.R": [
			-2.6179939993653534e-8,
			4.3633228474782015e-8,
			-8.726647404699778e-9,
			0.9999999999999987
		],
		"toe3-3.L": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"risorius03.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		]
	},
	"fight04": {
		"toe1-1.L": [
			2.6179939993653497e-8,
			-8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"finger5-2.R": [
			0.1689669651484682,
			0.20487582702888152,
			0.5613630558548579,
			0.7838032787052138
		],
		"finger1-3.R": [
			0.4936019574117956,
			-0.08374239410132733,
			-0.19180165282125486,
			0.8441305853032792
		],
		"toe5-2.R": [
			-5.2359879987306836e-8,
			-5.551115123125783e-16,
			-8.726646040608206e-9,
			0.9999999999999987
		],
		"toe4-2.R": [
			-1.7453293033042893e-8,
			6.108652428338246e-8,
			8.72664518425366e-9,
			0.9999999999999979
		],
		"clavicle.R": [
			0.025814077350230648,
			0.11960358217468126,
			-0.015134422829174902,
			0.9923706796289218
		],
		"neck03": [
			0.060099967199610506,
			-0.10176379468025798,
			-0.01014849680269655,
			0.992939641694059
		],
		"neck02": [
			2.0681443091957663e-8,
			-0.0062735184987661174,
			0.00008119418359453802,
			0.9999803179928841
		],
		"neck01": [
			3.849329376952332e-7,
			-0.31703454930356345,
			-0.021134643401411756,
			0.9481784754971153
		],
		"clavicle.L": [
			0.06619367487410965,
			0.18627035241729284,
			-0.02209125892496715,
			0.980017208775493
		],
		"toe5-2.L": [
			8.72664784878909e-9,
			2.6179940992854256e-8,
			-6.108652428338182e-8,
			0.9999999999999977
		],
		"toe4-2.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-2.L": [
			0.1689667920442725,
			-0.20487604615936972,
			-0.5613629019336416,
			0.7838033689829432
		],
		"finger1-3.L": [
			0.4936019640693959,
			0.08374246797097451,
			0.19180161169550838,
			0.8441305834265037
		],
		"toe1-1.R": [
			1.745329303304288e-8,
			-1.7453293144065185e-8,
			3.490658428972881e-8,
			0.9999999999999989
		],
		"oculi02.L": [
			-2.6179940881831947e-8,
			-6.981316869048015e-8,
			-1.745329036850794e-8,
			0.9999999999999971
		],
		"oculi01.L": [
			6.108652428338185e-8,
			4.363322680944748e-8,
			1.7453294809398597e-8,
			0.999999999999997
		],
		"jaw": [
			-1.7453293921221236e-8,
			-4.363322869682662e-8,
			-3.490658428972883e-8,
			0.9999999999999984
		],
		"finger4-2.R": [
			0.3185265433748312,
			0.2437418832334869,
			0.5100489183049004,
			0.7609079027447907
		],
		"oculi01.R": [
			4.363322680944721e-8,
			4.3633227031492083e-8,
			2.6179941770010135e-8,
			0.999999999999998
		],
		"oculi02.R": [
			8.726644296075359e-9,
			-3.4906584178706623e-8,
			-5.235987998730692e-8,
			0.999999999999998
		],
		"oris03.L": [
			5.235987998730666e-8,
			-2.617993932751972e-8,
			-8.726647404699014e-9,
			0.9999999999999984
		],
		"finger1-1.L": [
			0.1035506008566901,
			0.044748500688594484,
			0.13696630243922653,
			0.9841316358823489
		],
		"tongue07.R": [
			-3.4906584289728793e-8,
			-8.726647293677559e-9,
			-2.61799399936534e-8,
			0.999999999999999
		],
		"eye.R": [
			8.726645628343032e-9,
			2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"finger2-1.R": [
			0.4750260107279647,
			0.3081395623492844,
			0.30090298332166054,
			0.7673706365734823
		],
		"finger4-3.R": [
			0.27649618032354384,
			0.18711479545400778,
			0.46421701199882137,
			0.8203904444589667
		],
		"finger2-1.L": [
			0.4750260269187364,
			-0.3081395422162153,
			-0.3009029492533118,
			0.7673706479943316
		],
		"eye.L": [
			-3.490658606608563e-8,
			4.363323047318346e-8,
			4.363322680944733e-8,
			0.9999999999999974
		],
		"tongue07.L": [
			6.108652428338212e-8,
			-8.726646405499139e-9,
			8.726645628342997e-9,
			0.999999999999998
		],
		"wrist.L": [
			-0.08402270422250514,
			0.08378765155653989,
			-0.282134060681984,
			0.9520085012356094
		],
		"finger5-3.R": [
			0.15021023969572847,
			0.16993748852200818,
			0.5110302433629668,
			0.8290996467577173
		],
		"lowerleg01.R": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"lowerarm02.L": [
			8.726645184253797e-9,
			8.726645295276114e-9,
			7.853981998095983e-8,
			0.999999999999997
		],
		"oris07.L": [
			-4.363322858580419e-8,
			8.881784197001252e-16,
			1.74532921206064e-8,
			0.9999999999999988
		],
		"oris07.R": [
			1.745329125668599e-8,
			-8.726644962209207e-9,
			-6.108652428338222e-8,
			0.999999999999998
		],
		"tongue00": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"lowerarm02.R": [
			-0.08159354650296714,
			-0.08289835819732227,
			0.10850478216254178,
			0.9872674752189072
		],
		"lowerleg01.L": [
			0.10817390452914655,
			0.009861083159827366,
			0.000690437727925925,
			0.9940828379534465
		],
		"tongue03": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"finger1-1.R": [
			0.16403675090320552,
			-0.008237834527527133,
			-0.1724952557020196,
			0.9712206078928266
		],
		"metacarpal4.L": [
			0.041487579110946686,
			-0.05657600126000528,
			-0.08453665731398519,
			0.9939474284040973
		],
		"finger1-2.R": [
			0.14371613598103394,
			-0.020777198062504665,
			-0.0672891454488338,
			0.9871099995462097
		],
		"pelvis.R": [
			-0.010299525424906069,
			0.18879937455689688,
			-0.06127381699510971,
			0.9800480780521924
		],
		"toe2-1.R": [
			8.72664562834302e-9,
			-3.4906584289728926e-8,
			-8.726646516521445e-9,
			0.9999999999999994
		],
		"toe2-3.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe5-3.L": [
			1.74532930330429e-8,
			1.7453292810998278e-8,
			-4.3633228585803696e-8,
			0.9999999999999984
		],
		"levator05.L": [
			-4.569261529843784e-16,
			-1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"finger4-1.L": [
			0.2627311442404995,
			-0.1677164205975692,
			-0.46897212247406583,
			0.8263828994178107
		],
		"finger4-1.R": [
			0.2627310871941135,
			0.16771640003893395,
			0.4689721035858232,
			0.8263829324460108
		],
		"levator05.R": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe5-3.R": [
			-8.726645628343005e-9,
			-5.235987976526246e-8,
			8.726646516521441e-9,
			0.9999999999999984
		],
		"toe2-3.R": [
			-2.617994265818873e-8,
			5.235988198570851e-8,
			5.235987821094996e-8,
			0.9999999999999971
		],
		"finger4-2.L": [
			0.31852635649387606,
			-0.24374215979170155,
			-0.51004888921137,
			0.7609079118875426
		],
		"toe2-1.L": [
			-1.745329214486445e-8,
			3.3306690738754696e-16,
			4.3633228449276404e-8,
			0.9999999999999991
		],
		"finger1-2.L": [
			0.1437162289784594,
			0.020777183739128402,
			0.06728919876575168,
			0.9871099826734329
		],
		"pelvis.L": [
			0.0012242725086083002,
			0.0224417771127412,
			-0.007283378697971838,
			0.9997208711393339
		],
		"metacarpal4.R": [
			-8.726645184253779e-9,
			-2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"tongue04": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"toe3-2.L": [
			3.807717500373487e-16,
			-8.726645961409929e-9,
			4.3633228585804185e-8,
			0.999999999999999
		],
		"levator03.R": [
			2.6179941770010353e-8,
			-7.853982031402751e-8,
			1.7453290368507392e-8,
			0.9999999999999966
		],
		"upperleg02.R": [
			-0.014734756295560808,
			0.15736773841626062,
			-0.023959851533556,
			0.9871394062528104
		],
		"upperleg02.L": [
			-0.08580927533159496,
			-0.010659860481850414,
			-0.000782482459128195,
			0.99625424634617
		],
		"levator03.L": [
			-3.49065842897289e-8,
			-1.7453293699176697e-8,
			-4.363322858580413e-8,
			0.999999999999998
		],
		"toe3-2.R": [
			-1.7453291256686033e-8,
			2.6179938772408207e-8,
			-3.49065842897288e-8,
			0.999999999999999
		],
		"metacarpal3.L": [
			0.03246531246072145,
			-0.044272620050717526,
			-0.06615261928972561,
			0.9962980324992022
		],
		"tongue01": [
			3.490658428972884e-8,
			3.4906584289728926e-8,
			8.726647404699887e-9,
			0.9999999999999989
		],
		"breast.L": [
			0.004637296285085243,
			-0.000016469449700573513,
			-0.0013657495927716678,
			0.9999883149017151
		],
		"temporalis02.R": [
			3.490657896065849e-8,
			-7.853981631722462e-8,
			-6.10865278360958e-8,
			0.9999999999999942
		],
		"tongue02": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"oris04.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"oris04.L": [
			3.4906584289728793e-8,
			-1.7453291478730648e-8,
			-2.617994088183205e-8,
			0.9999999999999991
		],
		"temporalis02.L": [
			3.490658251337198e-8,
			-3.490658262439439e-8,
			-4.3633230362160965e-8,
			0.9999999999999979
		],
		"breast.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"oris03.R": [
			0,
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0.9999999999999992
		],
		"oris06.L": [
			2.617994177001025e-8,
			2.6179941770010373e-8,
			-6.98131685794569e-8,
			0.9999999999999969
		],
		"orbicularis04.R": [
			8.726646960610633e-9,
			7.853982053607211e-8,
			-8.726645184253805e-9,
			0.9999999999999972
		],
		"toe1-2.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe1-2.L": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"orbicularis04.L": [
			-2.617994088183186e-8,
			4.363322880784892e-8,
			2.617993910547505e-8,
			0.9999999999999986
		],
		"metacarpal3.R": [
			-4.363322858580416e-8,
			2.617994021569814e-8,
			-1.1643607064032247e-15,
			0.9999999999999988
		],
		"oris06.R": [
			2.6179939993653517e-8,
			-3.4906584733818136e-8,
			-8.72664696061073e-9,
			0.9999999999999996
		],
		"levator04.L": [
			2.6179939993653477e-8,
			-2.6179940548765046e-8,
			-8.726646960610674e-9,
			0.9999999999999996
		],
		"tongue06.L": [
			-2.617994177001034e-8,
			-2.6179941770010373e-8,
			-5.235987998730672e-8,
			0.999999999999998
		],
		"toe2-2.L": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"toe2-2.R": [
			3.4906580737015366e-8,
			5.235987843299483e-8,
			6.108652783609697e-8,
			0.9999999999999962
		],
		"tongue06.R": [
			8.726646516521448e-9,
			8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"levator04.R": [
			8.726645184253837e-9,
			5.235988020935167e-8,
			1.7453293033042836e-8,
			0.9999999999999986
		],
		"toe4-1.L": [
			8.726645184253779e-9,
			2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"upperleg01.R": [
			-0.3592529992211797,
			-0.2257908110792849,
			-0.4008434783898935,
			0.8119607736923236
		],
		"metacarpal1.R": [
			-2.6179938217296784e-8,
			-3.490658262439439e-8,
			4.363323036216037e-8,
			0.9999999999999981
		],
		"levator02.R": [
			5.2359874658236285e-8,
			-1.2217304878880952e-7,
			-4.363323569123113e-8,
			0.9999999999999903
		],
		"toe3-1.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"toe3-1.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"levator02.L": [
			6.108652428338173e-8,
			-6.108652417236016e-8,
			-8.726649625147647e-9,
			0.9999999999999963
		],
		"finger5-1.R": [
			0.2016194092378028,
			0.11523257991138058,
			0.5200010287861276,
			0.8219914819552182
		],
		"metacarpal1.L": [
			2.6179940881831864e-8,
			-3.490658440075123e-8,
			2.6179939105475068e-8,
			0.9999999999999987
		],
		"toe4-1.R": [
			8.72664607243222e-9,
			4.3633228918871225e-8,
			3.5626088403688626e-16,
			0.9999999999999991
		],
		"upperleg01.L": [
			0.2541141632917496,
			0.012762848870451093,
			0.12260586388747655,
			0.9592866640601494
		],
		"head": [
			0.029323273018797308,
			0.016497215389845832,
			-0.00016462579436125606,
			0.9994338199411673
		],
		"toe5-1.R": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"special01": [
			1.7453290368507604e-8,
			-6.981316869048015e-8,
			-2.6179940881831867e-8,
			0.9999999999999971
		],
		"temporalis01.L": [
			1.7453287703972192e-8,
			-7.85398198699383e-8,
			-6.1086524283382e-8,
			0.9999999999999949
		],
		"special04": [
			-2.617993999365348e-8,
			-8.726646738566046e-9,
			-2.6179939993653468e-8,
			0.9999999999999991
		],
		"metacarpal2.L": [
			0.03056453364685719,
			-0.028688065983717648,
			-0.05181150358821513,
			0.9977767146255678
		],
		"metacarpal2.R": [
			-4.363322858580419e-8,
			2.6179939660586626e-8,
			8.7266447401649e-9,
			0.9999999999999984
		],
		"temporalis01.R": [
			1.7453289480329277e-8,
			-2.6179938217296694e-8,
			-8.726645717160371e-8,
			0.9999999999999958
		],
		"toe5-1.L": [
			1.745329303304289e-8,
			1.745329292202058e-8,
			-2.6179939993653487e-8,
			0.9999999999999993
		],
		"risorius02.R": [
			-6.108652073066812e-8,
			5.2359876323571086e-8,
			-6.98131721321708e-8,
			0.9999999999999943
		],
		"special05.L": [
			8.726647404699816e-9,
			4.363322836375971e-8,
			-3.4906584289728793e-8,
			0.9999999999999982
		],
		"finger2-2.L": [
			0.24841927894605006,
			-0.16187545897222788,
			-0.1523474671503729,
			0.9428013825209004
		],
		"foot.L": [
			-0.05051893131505516,
			-0.004604920159564818,
			-0.0003223751527741848,
			0.9987124352702181
		],
		"toe3-3.R": [
			4.363322858580411e-8,
			8.726647404699861e-9,
			-2.617993999365284e-8,
			0.9999999999999986
		],
		"levator06.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"orbicularis03.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"levator06.L": [
			8.726645184253779e-9,
			-2.6179939993653534e-8,
			-3.490658428972884e-8,
			0.9999999999999991
		],
		"orbicularis03.L": [
			-5.2359879987306664e-8,
			3.4906586510174975e-8,
			1.7453290368507233e-8,
			0.9999999999999982
		],
		"foot.R": [
			0.2168949152995223,
			-0.01977083295582327,
			-0.0013848782431127625,
			0.9759937458783726
		],
		"root": [
			-0.2254028088112018,
			-0.05526111497960584,
			-0.18863250391992384,
			0.9542313982552298
		],
		"finger2-2.R": [
			0.2484192720409324,
			0.1618754937621959,
			0.1523474562061324,
			0.9428013801355082
		],
		"risorius02.L": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"special05.R": [
			-1.218469600119515e-15,
			-3.4906584289728926e-8,
			-3.4906584289728807e-8,
			0.9999999999999988
		],
		"lowerleg02.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue05.L": [
			2.617993910547509e-8,
			1.745329014646302e-8,
			6.108652428338099e-8,
			0.9999999999999972
		],
		"finger5-1.L": [
			0.2016192666647375,
			-0.11523279748105164,
			-0.5200010826844206,
			0.8219914523286088
		],
		"toe4-3.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"wrist.R": [
			-0.07707374502834992,
			-0.06459801883317873,
			0.29546268858412617,
			0.950046595407179
		],
		"toe4-3.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"finger3-3.L": [
			0.32817018093462436,
			-0.2549243547942416,
			-0.38233698580686554,
			0.8253098417940965
		],
		"tongue05.R": [
			-8.726645628343018e-9,
			-8.726645628343022e-9,
			5.235987998730709e-8,
			0.9999999999999986
		],
		"lowerleg02.R": [
			0.004124191788219714,
			0.04512529449657776,
			0.0016592184030021842,
			0.9989714439527195
		],
		"shoulder01.R": [
			2.831068712794149e-15,
			5.235987998730707e-8,
			-5.235987998730679e-8,
			0.9999999999999973
		],
		"finger3-1.L": [
			0.3470154729429924,
			-0.24756645460985072,
			-0.4378581423045335,
			0.791562606056958
		],
		"special06.R": [
			4.3633226809447214e-8,
			-5.2359878544017135e-8,
			-3.4906586066085587e-8,
			0.9999999999999972
		],
		"finger4-3.L": [
			0.2764961908482319,
			-0.1871149553061301,
			-0.46421700987860276,
			0.8203904056524385
		],
		"finger3-2.L": [
			0.411691870954773,
			-0.3287105842499861,
			-0.4723852200158518,
			0.7066196707581573
		],
		"upperarm01.R": [
			-0.14278854704816785,
			0.12937928206862181,
			-0.01076680254697405,
			0.9812015634752097
		],
		"finger3-2.R": [
			0.4116917597822982,
			0.3287106129517291,
			0.4723852142004407,
			0.7066197260656238
		],
		"upperarm01.L": [
			0.28128854559197497,
			0.0981064133411439,
			-0.03716881252620934,
			0.9538712518759959
		],
		"special06.L": [
			6.092348000597549e-16,
			8.726646183454534e-9,
			-6.98131685794573e-8,
			0.9999999999999977
		],
		"finger3-1.R": [
			0.3470154371385883,
			0.2475664152865853,
			0.43785812375398603,
			0.7915626443133249
		],
		"shoulder01.L": [
			-0.09567976692494379,
			-0.15834122142607532,
			0.007556481081980932,
			0.9827086747312982
		],
		"lowerarm01.R": [
			-0.36930508129152845,
			0.3272285818416154,
			-0.02770610973852044,
			0.86934894239387
		],
		"special03": [
			1.7453291256686053e-8,
			-3.4906584178706623e-8,
			-2.6179940881831874e-8,
			0.9999999999999988
		],
		"upperarm02.L": [
			-3.4906584289728886e-8,
			4.363322880784892e-8,
			1.7453290368507557e-8,
			0.9999999999999981
		],
		"spine02": [
			0.05861533528281898,
			0.0007705623825414731,
			0.07360622692947402,
			0.9955630427353678
		],
		"spine03": [
			0.004588367100609382,
			0.00006030099365306185,
			0.005761907892741074,
			0.999972871466309
		],
		"spine01": [
			0.022589797638827843,
			0.0002969231593088484,
			0.02836722931366113,
			0.9993422402662366
		],
		"upperarm02.R": [
			-2.6179939105474995e-8,
			-4.363322880784892e-8,
			2.617994088183188e-8,
			0.9999999999999984
		],
		"spine04": [
			0.018731766048831207,
			0.00024625392155641634,
			0.023522450252062125,
			0.9995477750632216
		],
		"spine05": [
			-5.539933174547033e-7,
			0.18031664600239006,
			-0.08718241413316133,
			0.9797372779679538
		],
		"lowerarm01.L": [
			0.002761054080917106,
			0.0024468747979826677,
			-0.00020679521216906288,
			0.9999931732866104
		],
		"finger5-3.L": [
			0.15021018132407765,
			-0.1699377109916651,
			-0.5110301756797296,
			0.8290996534520113
		],
		"oris01": [
			2.6179939105475104e-8,
			-6.981316891252476e-8,
			-1.7453293921221593e-8,
			0.9999999999999972
		],
		"oris02": [
			2.6179939993653494e-8,
			1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"oris05": [
			1.2184696001195153e-15,
			-6.981316846843555e-8,
			1.745329214486441e-8,
			0.9999999999999974
		],
		"risorius03.R": [
			-8.72664696061062e-9,
			-2.6179939993653534e-8,
			-3.490658428972884e-8,
			0.9999999999999991
		],
		"finger2-3.L": [
			0.5240617160590134,
			-0.36216393233589006,
			-0.30449772432916855,
			0.7081509300669205
		],
		"oris06": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger3-3.R": [
			0.32817018179118923,
			0.25492436356058457,
			0.38233691820074717,
			0.825309870065252
		],
		"finger2-3.R": [
			0.5240617802005326,
			0.3621637819085014,
			0.304497615118926,
			0.7081510064906117
		],
		"toe3-3.L": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"risorius03.L": [
			-5.235988176366349e-8,
			-4.363323058420576e-8,
			-3.490658251337249e-8,
			0.9999999999999972
		]
	},
	"fight01": {
		"toe1-1.L": [
			-0.1806916323614074,
			-0.0938800716641196,
			0.012327438239918009,
			0.9789714502503895
		],
		"finger5-2.R": [
			0.19240642960145452,
			0.17670671177456376,
			0.65715055780262,
			0.7070414756162101
		],
		"finger4-2.R": [
			0.31027399497056213,
			0.19322217614710646,
			0.5156438600106831,
			0.7749236403177202
		],
		"toe5-2.R": [
			1.745329214486444e-8,
			-8.726646183454534e-9,
			3.490658428972891e-8,
			0.9999999999999996
		],
		"toe4-2.R": [
			-1.7453293033042846e-8,
			8.726647071632954e-9,
			5.235987998730684e-8,
			0.9999999999999984
		],
		"clavicle.R": [
			-0.036690584722506726,
			-0.13940798833831836,
			-0.03419932382992552,
			0.9889639124001235
		],
		"neck03": [
			-3.305775110617611e-8,
			-0.04598501208401895,
			-0.005834088454131522,
			0.9989250933255913
		],
		"neck02": [
			3.526592839468444e-8,
			-0.048806817444597805,
			-0.0036334657932585975,
			0.9988016282011448
		],
		"neck01": [
			-1.5278212639359194e-7,
			-0.10519902580968754,
			-0.016309733233742428,
			0.9943174330014101
		],
		"clavicle.L": [
			-0.03669058295547231,
			0.13940795564563535,
			0.03419937259603916,
			0.9889639153877812
		],
		"toe5-2.L": [
			-9.599310857311006e-8,
			8.72664329687467e-9,
			-2.6179940881831818e-8,
			0.9999999999999949
		],
		"toe4-2.L": [
			8.726645184253845e-9,
			-1.745329114566374e-8,
			-6.108652428338177e-8,
			0.999999999999998
		],
		"finger5-2.L": [
			8.726644296075423e-9,
			-6.108652406133785e-8,
			-2.6179940881831907e-8,
			0.9999999999999978
		],
		"finger1-3.L": [
			3.490658428972885e-8,
			1.7453292144864463e-8,
			6.052891516783062e-16,
			0.9999999999999991
		],
		"toe1-1.R": [
			0.008001828275617726,
			0.08591788405762979,
			0.017060276109169714,
			0.9961240057956571
		],
		"oculi02.L": [
			-4.3633228585804126e-8,
			-2.6179940992854256e-8,
			-1.7453291256686043e-8,
			0.9999999999999988
		],
		"oculi01.L": [
			2.6179940881831897e-8,
			2.6179940992854256e-8,
			-2.6179939105475064e-8,
			0.9999999999999988
		],
		"jaw": [
			2.6179939993653477e-8,
			2.6179940548765046e-8,
			8.726646960610674e-9,
			0.9999999999999996
		],
		"finger1-3.R": [
			0.4190486889594918,
			-0.0566362488958112,
			-0.16840226680765144,
			0.8904106963229872
		],
		"oculi01.R": [
			1.7453296585756585e-8,
			-9.599310868413369e-8,
			4.3633226809447545e-8,
			0.9999999999999943
		],
		"oculi02.R": [
			-2.617993821729672e-8,
			5.235987843299483e-8,
			-3.490658606608563e-8,
			0.999999999999998
		],
		"wrist.R": [
			-0.04304392318259212,
			-0.06630776491618351,
			0.09458986369000298,
			0.9923725402669997
		],
		"finger1-1.L": [
			-3.4906582513372e-8,
			5.2359878099927926e-8,
			-4.3633230362160436e-8,
			0.9999999999999968
		],
		"tongue07.R": [
			-8.726648292878226e-9,
			-6.981316857945785e-8,
			-3.4906584289728793e-8,
			0.9999999999999968
		],
		"eye.R": [
			3.490658251337195e-8,
			6.108652406133785e-8,
			2.617994177001026e-8,
			0.999999999999997
		],
		"finger2-1.R": [
			0.4342394484239336,
			0.25662796039145797,
			0.2985762929782932,
			0.8102039179423522
		],
		"finger4-3.R": [
			0.29935508172487174,
			0.15800380463397556,
			0.5183434570546657,
			0.7853288440489764
		],
		"finger2-1.L": [
			0.01048126416283342,
			0.009755914451560543,
			0.006858969401112567,
			0.9998739519427021
		],
		"eye.L": [
			4.36332285858041e-8,
			8.726647071632954e-9,
			-1.7453292144865118e-8,
			0.9999999999999989
		],
		"tongue07.L": [
			-8.726645628343012e-9,
			8.726645406298417e-9,
			-4.363322858580416e-8,
			0.9999999999999992
		],
		"wrist.L": [
			4.363323213851784e-8,
			8.726646072432231e-8,
			-4.363322503309051e-8,
			0.9999999999999942
		],
		"finger5-3.R": [
			0.126492231223394,
			0.10504930781546584,
			0.4411614183011992,
			0.8822363409937798
		],
		"lowerleg01.R": [
			0.48275047049515074,
			-0.0790949826704388,
			-0.002647763659880091,
			0.8721748427354887
		],
		"lowerarm02.L": [
			-4.363321970402056e-8,
			-5.2359872659835105e-8,
			1.5707963996182726e-7,
			0.9999999999999851
		],
		"oris07.L": [
			1.7453291256686076e-8,
			6.981316835741325e-8,
			8.726647404699983e-9,
			0.9999999999999972
		],
		"oris07.R": [
			-1.903858591368061e-15,
			-4.363322869682662e-8,
			-4.363322858580416e-8,
			0.9999999999999984
		],
		"tongue00": [
			-1.745329214486445e-8,
			3.3306690738754696e-16,
			3.490658449484121e-8,
			0.9999999999999994
		],
		"lowerarm02.R": [
			-0.1631016529475511,
			-0.18397798463421444,
			0.20163049776269207,
			0.9481007828008995
		],
		"lowerleg01.L": [
			0.22141395520288512,
			0.0019183013410367655,
			0.014444524118674452,
			0.9750710416602292
		],
		"tongue03": [
			-2.617993999365351e-8,
			8.726644518119997e-9,
			-4.363322858580391e-8,
			0.9999999999999987
		],
		"finger1-1.R": [
			0.15396746995867988,
			0.006402903760764134,
			-0.16196457901027028,
			0.9746899487344574
		],
		"metacarpal4.L": [
			2.6179941770010294e-8,
			6.108652428338246e-8,
			-3.490658251337185e-8,
			0.9999999999999971
		],
		"finger1-2.R": [
			0.16317388184472187,
			-0.01684616809333317,
			-0.07816454924063583,
			0.9833518160588833
		],
		"pelvis.R": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe2-1.R": [
			-2.6179939993653434e-8,
			-6.108652450542706e-8,
			1.5739905687674017e-15,
			0.999999999999998
		],
		"toe2-3.L": [
			-0.12731548252221372,
			-0.011683776433997206,
			0.0029957740892462194,
			0.9917889304766322
		],
		"toe5-3.L": [
			1.7453292144864476e-8,
			-8.726646960610651e-9,
			4.363322858580359e-8,
			0.9999999999999989
		],
		"levator05.L": [
			8.726646516521438e-9,
			-1.7453292366909068e-8,
			1.7453292144864456e-8,
			0.9999999999999996
		],
		"finger4-1.L": [
			8.726649625145859e-9,
			-4.363322858580432e-8,
			7.85398199809603e-8,
			0.999999999999996
		],
		"finger4-1.R": [
			0.2328833003989757,
			0.1118666356272433,
			0.42708143344776694,
			0.8665175551787295
		],
		"levator05.R": [
			-8.726647404699853e-9,
			6.981316857945785e-8,
			1.745329125668601e-8,
			0.9999999999999976
		],
		"toe5-3.R": [
			-1.7453292144864453e-8,
			-2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"toe2-3.R": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger4-2.L": [
			1.7453292144864436e-8,
			8.726646072432231e-9,
			1.7453292144864443e-8,
			0.9999999999999999
		],
		"toe2-1.L": [
			-5.235987998730673e-8,
			8.726647182655256e-9,
			1.745329125668265e-8,
			0.9999999999999986
		],
		"finger1-2.L": [
			-4.3633232138517825e-8,
			4.3633232138517997e-8,
			9.599310502039953e-8,
			0.9999999999999936
		],
		"pelvis.L": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"metacarpal4.R": [
			0.014976137513481366,
			0.08076939576747821,
			0.14641252700299137,
			0.9858069749951721
		],
		"tongue04": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"toe3-2.L": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"levator03.R": [
			-2.6179939993653434e-8,
			6.108652450542706e-8,
			-1.5739905687674017e-15,
			0.999999999999998
		],
		"upperleg02.R": [
			-0.2011544029895345,
			0.024734499121259024,
			0.004004956269343653,
			0.9792390265080461
		],
		"upperleg02.L": [
			0.14868813247942905,
			0.01828318001812068,
			0.0029604631288892777,
			0.9887106757015761
		],
		"levator03.L": [
			1.745329214486444e-8,
			3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"toe3-2.R": [
			-8.726644740164569e-9,
			3.4906584178706623e-8,
			-3.490658428972887e-8,
			0.9999999999999988
		],
		"metacarpal3.L": [
			-5.23598799873068e-8,
			-3.4906584733818136e-8,
			8.726647848788919e-9,
			0.9999999999999982
		],
		"tongue01": [
			3.4906584289728654e-8,
			1.0471976019665874e-7,
			3.711412361251355e-15,
			0.9999999999999942
		],
		"breast.L": [
			-8.72664651652144e-9,
			-1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"temporalis02.R": [
			6.108652428338202e-8,
			-5.235987998730707e-8,
			-3.1505396764713425e-15,
			0.9999999999999967
		],
		"tongue02": [
			-3.4906584289728774e-8,
			-3.490658451177353e-8,
			-1.7453291256686083e-8,
			0.9999999999999987
		],
		"oris04.R": [
			5.2359879987306604e-8,
			1.745328981339611e-8,
			4.3633230362161356e-8,
			0.9999999999999977
		],
		"oris04.L": [
			2.6179939105475068e-8,
			-3.4906584289728926e-8,
			-1.7453293033042906e-8,
			0.999999999999999
		],
		"temporalis02.L": [
			2.617993910547522e-8,
			3.4906582846438994e-8,
			3.4906586066085765e-8,
			0.9999999999999987
		],
		"breast.R": [
			-2.6179941770010446e-8,
			5.235988231877542e-8,
			3.4906582513371954e-8,
			0.9999999999999979
		],
		"oris03.R": [
			-8.726648736967438e-9,
			5.235987998730707e-8,
			5.2359879987306776e-8,
			0.9999999999999973
		],
		"oris06.L": [
			-9.599310857311006e-8,
			8.726647959811373e-9,
			1.7453291256685964e-8,
			0.9999999999999952
		],
		"orbicularis04.R": [
			-2.617993999365348e-8,
			4.363322869682662e-8,
			-1.035761105051169e-15,
			0.9999999999999987
		],
		"toe1-2.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe1-2.L": [
			-0.21604776369668255,
			-0.022073288590636064,
			0.03028903285933257,
			0.9756632145473678
		],
		"orbicularis04.L": [
			2.2846306061032016e-15,
			-8.726645717160864e-8,
			2.6179939993653388e-8,
			0.9999999999999959
		],
		"metacarpal3.R": [
			0.0316473201378685,
			0.04696020340647267,
			0.12390552165259322,
			0.9906768434399343
		],
		"oris06.R": [
			-4.363322858580407e-8,
			-8.726644740164602e-9,
			3.490658428972865e-8,
			0.9999999999999986
		],
		"levator04.L": [
			-7.61543500074698e-16,
			1.745329203384216e-8,
			4.363322858580423e-8,
			0.9999999999999989
		],
		"tongue06.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"toe2-2.L": [
			-0.18949753644947182,
			-0.01794251276252279,
			0.008504122151818236,
			0.9816804112448076
		],
		"toe2-2.R": [
			4.3633228585804e-8,
			-3.490658451177353e-8,
			1.745329036850783e-8,
			0.9999999999999983
		],
		"tongue06.R": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"levator04.R": [
			-3.490658428972883e-8,
			8.726647515722163e-9,
			3.490658428972884e-8,
			0.9999999999999987
		],
		"toe4-1.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"upperleg01.R": [
			-0.23184096774989754,
			-0.043060235013184456,
			-0.17525859362481735,
			0.9558661031724325
		],
		"metacarpal1.R": [
			0.01514697067906443,
			-0.02021583166136065,
			-0.0055590480995991644,
			0.9996654372407366
		],
		"levator02.R": [
			7.853981998095916e-8,
			-8.726639966205596e-9,
			-7.853981998095929e-8,
			0.9999999999999937
		],
		"toe3-1.L": [
			-2.6179939993653464e-8,
			8.726645295276114e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"toe3-1.R": [
			-1.7453291256686023e-8,
			-2.617993932751972e-8,
			3.4906584289728926e-8,
			0.999999999999999
		],
		"levator02.L": [
			2.6179939105475058e-8,
			-2.617993943854202e-8,
			-2.6179940881831917e-8,
			0.9999999999999991
		],
		"finger5-1.R": [
			0.10328156021008579,
			0.07874676783328882,
			0.3773580871576182,
			0.9169147942601451
		],
		"metacarpal1.L": [
			-1.7453290368507584e-8,
			2.6179939216497417e-8,
			-5.235987998730692e-8,
			0.9999999999999979
		],
		"toe4-1.R": [
			-2.6179941770010476e-8,
			-4.363323080625037e-8,
			-3.490658251337224e-8,
			0.9999999999999982
		],
		"upperleg01.L": [
			0.13473315109434408,
			-0.002713069598049178,
			0.16511252473429794,
			0.9770248059416969
		],
		"head": [
			1.7108222887788627e-8,
			-0.016268886114594316,
			-0.0007804838354428759,
			0.9998673482965492
		],
		"toe5-1.R": [
			-8.72664918105665e-9,
			-3.490658395666202e-8,
			-8.726645717160828e-8,
			0.9999999999999951
		],
		"special01": [
			1.7453292144864473e-8,
			4.363322880784892e-8,
			8.726646960610506e-9,
			0.9999999999999988
		],
		"temporalis01.L": [
			5.235988176366352e-8,
			4.363323036216116e-8,
			-2.6179937329117888e-8,
			0.9999999999999971
		],
		"special04": [
			-2.6179939105475058e-8,
			-2.617993943854202e-8,
			2.6179940881831917e-8,
			0.9999999999999991
		],
		"metacarpal2.L": [
			8.72664562834302e-9,
			3.4906584289728926e-8,
			8.726646516521445e-9,
			0.9999999999999994
		],
		"metacarpal2.R": [
			0.018219092892088885,
			0.016411374618529817,
			0.05340072452227403,
			0.9982720541304438
		],
		"temporalis01.R": [
			6.981316857945738e-8,
			2.617993899445281e-8,
			8.726647848791145e-9,
			0.9999999999999969
		],
		"toe5-1.L": [
			3.49065842897288e-8,
			-1.7453293477132092e-8,
			1.7453291256685666e-8,
			0.9999999999999992
		],
		"risorius02.R": [
			8.726645628343013e-9,
			-3.4906584178706623e-8,
			-1.745329214486445e-8,
			0.9999999999999992
		],
		"special05.L": [
			1.7453292144864436e-8,
			-3.490658440075123e-8,
			-8.726646516521445e-9,
			0.9999999999999993
		],
		"finger2-2.L": [
			-0.06649609733064105,
			0.039609810896472974,
			0.04440077575452282,
			0.9960109954377689
		],
		"foot.L": [
			-6.108652428338218e-8,
			-8.72664329687467e-9,
			4.363322858580178e-8,
			0.9999999999999969
		],
		"toe3-3.R": [
			-1.7453293033042916e-8,
			-2.617994110387656e-8,
			-2.6179939105475286e-8,
			0.9999999999999992
		],
		"levator06.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"orbicularis03.R": [
			8.726646516521416e-9,
			6.108652428338246e-8,
			-8.726645628342962e-9,
			0.9999999999999981
		],
		"levator06.L": [
			1.7453292144864446e-8,
			3.490658440075123e-8,
			-8.726645628343005e-9,
			0.9999999999999993
		],
		"orbicularis03.L": [
			-1.7453292144864433e-8,
			-2.617994021569814e-8,
			4.927555263958927e-16,
			0.9999999999999996
		],
		"foot.R": [
			-0.006771811424681662,
			-0.10027025885025476,
			0.1593071816210326,
			0.982100422382607
		],
		"root": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger2-2.R": [
			0.39525131244609824,
			0.23543979892656453,
			0.26392894749896706,
			0.847753508847438
		],
		"risorius02.L": [
			-3.490658428972883e-8,
			-2.6179939993653534e-8,
			1.0341496537059884e-15,
			0.9999999999999992
		],
		"special05.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"lowerleg02.L": [
			8.72664651652143e-9,
			-2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"tongue05.L": [
			-3.49065860660857e-8,
			4.363323047318346e-8,
			2.6179938217296602e-8,
			0.999999999999998
		],
		"finger5-1.L": [
			0.10772339503318805,
			0.03895935706928,
			0.021355931244352665,
			0.9931876775614761
		],
		"toe4-3.R": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"oris03.L": [
			-1.7453293033042833e-8,
			-8.726646960610651e-9,
			-5.2359879987304315e-8,
			0.9999999999999987
		],
		"toe4-3.L": [
			-1.7453292144864443e-8,
			-2.6179940104675836e-8,
			-8.726645628343028e-9,
			0.9999999999999997
		],
		"finger3-3.L": [
			2.6179934664583032e-8,
			-6.108652061964648e-8,
			-8.726645717160668e-8,
			0.9999999999999941
		],
		"tongue05.R": [
			-5.23598799873067e-8,
			6.108652450542706e-8,
			-3.384421543835748e-15,
			0.999999999999997
		],
		"lowerleg02.R": [
			1.745329214486445e-8,
			-1.7453292366909068e-8,
			8.726645628343025e-9,
			0.9999999999999999
		],
		"shoulder01.R": [
			0.003011084095781141,
			0.003534231955725109,
			-0.0525718886693281,
			0.9986063484170278
		],
		"finger3-1.L": [
			-6.108652428338159e-8,
			-1.3089969297386261e-7,
			8.726654066037814e-9,
			0.9999999999999897
		],
		"special06.R": [
			-5.33080502991848e-16,
			6.108652428338246e-8,
			8.726646072432205e-9,
			0.9999999999999981
		],
		"finger4-3.L": [
			2.6179939105475025e-8,
			3.4906584289728926e-8,
			2.6179940881831904e-8,
			0.9999999999999988
		],
		"finger3-2.L": [
			1.3089969286283674e-7,
			3.490658073701525e-8,
			2.6179944434535852e-8,
			0.9999999999999903
		],
		"upperarm01.R": [
			0.03865232160642999,
			-0.24278480830386062,
			-0.11438039902497557,
			0.9625376144391333
		],
		"finger3-2.R": [
			0.36228090331403473,
			0.25192983665441504,
			0.439328826828135,
			0.7824794479186408
		],
		"upperarm01.L": [
			-0.08029587342307272,
			0.102398891797984,
			0.1404499814983453,
			0.9814992829171529
		],
		"special06.L": [
			8.726646072432223e-9,
			3.490658451177353e-8,
			3.180207328966892e-16,
			0.9999999999999998
		],
		"finger3-1.R": [
			0.2811925784078561,
			0.1689201366254709,
			0.37094580280343126,
			0.8687899243622087
		],
		"shoulder01.L": [
			0.0030110522944590355,
			-0.0035341257694023742,
			0.05257181100239185,
			0.9986063529775157
		],
		"lowerarm01.R": [
			-0.3450067827061318,
			0.3067924138289966,
			0.0008451454787317625,
			0.8870445425303406
		],
		"special03": [
			1.7453292144864436e-8,
			4.363322869682662e-8,
			6.702088926697263e-16,
			0.9999999999999991
		],
		"upperarm02.L": [
			8.726646960610626e-9,
			3.490658440075123e-8,
			-2.61799399936535e-8,
			0.999999999999999
		],
		"spine02": [
			-4.363322858580404e-8,
			8.726645761569785e-8,
			-3.731731566931179e-15,
			0.9999999999999956
		],
		"spine03": [
			-3.663343454044385e-8,
			-0.04881294551014104,
			-0.005532496257095891,
			0.9987926150286597
		],
		"spine01": [
			-1.7453292144864466e-8,
			4.3633228918871225e-8,
			8.726645184253712e-9,
			0.9999999999999988
		],
		"upperarm02.R": [
			-1.7453293921221352e-8,
			-2.6179941881032676e-8,
			-7.853981998095827e-8,
			0.9999999999999964
		],
		"spine04": [
			-1.2313162931767883e-7,
			-0.06718717871300595,
			-0.022161838229760072,
			0.9974942285260848
		],
		"spine05": [
			1.2992109620783485e-7,
			-0.10484570386865211,
			0.03983784223674873,
			0.9936902559179043
		],
		"lowerarm01.L": [
			-4.363322858580412e-8,
			-2.6179940992854256e-8,
			-2.617993910547514e-8,
			0.9999999999999986
		],
		"finger5-3.L": [
			-6.1086531388809e-8,
			6.981317557386291e-8,
			1.2217304146133756e-7,
			0.9999999999999883
		],
		"oris01": [
			-1.745329214486445e-8,
			8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"oris02": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"oris05": [
			-6.108652428338188e-8,
			6.981316857945785e-8,
			-1.745329658575686e-8,
			0.9999999999999953
		],
		"risorius03.R": [
			5.235988354002032e-8,
			6.981317246523844e-8,
			-6.108652073066799e-8,
			0.9999999999999947
		],
		"finger2-3.L": [
			-0.052428146174776744,
			0.03343853805605834,
			0.03350446698572314,
			0.9975021826308719
		],
		"oris06": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"finger3-3.R": [
			0.3814443860033192,
			0.25644615189128206,
			0.4685576433033641,
			0.7544463443272171
		],
		"finger2-3.R": [
			0.4672994523729038,
			0.29804410433238215,
			0.2986513542236882,
			0.7769223270733367
		],
		"toe3-3.L": [
			-0.1896852912096258,
			-0.01680446903194499,
			-0.006364633172186997,
			0.9816804936250172
		],
		"risorius03.L": [
			-4.3633228585804047e-8,
			-8.726647848789071e-9,
			-4.363322858580405e-8,
			0.9999999999999981
		]
	},
	"Harvey_Fightpose1": {
		"toe1-1.L": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"finger5-2.R": [
			0.14241782955548354,
			0.18340544020920524,
			0.45911395779997516,
			0.8574928454976263
		],
		"finger1-3.R": [
			0.5316028907775064,
			-0.08342266536831022,
			-0.19823809682775143,
			0.8192317635357879
		],
		"toe5-2.R": [
			0,
			0,
			0,
			1
		],
		"toe4-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"clavicle.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck03": [
			-0.09950394847573953,
			1.1102230246251565e-16,
			1.232595164407831e-32,
			0.9950371672644883
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0.09950394847573953,
			-1.1102230246251565e-16,
			-1.232595164407831e-32,
			0.9950371672644883
		],
		"clavicle.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe5-2.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"toe4-2.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"finger5-2.L": [
			0.1424178957289729,
			-0.18340538644708682,
			-0.4591139764840006,
			0.8574928360023625
		],
		"finger1-3.L": [
			0.5316028971939397,
			0.08342262743251783,
			0.19823809705645273,
			0.8192317631798105
		],
		"toe1-1.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			8.726646072432228e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oculi01.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"jaw": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.R": [
			0.2538552479904895,
			0.20752151480501102,
			0.39648253975421466,
			0.8574928160811429
		],
		"oculi01.R": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"oculi02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"wrist.R": [
			2.617993999365347e-8,
			-1.745329247793137e-8,
			8.726645628343018e-9,
			0.9999999999999994
		],
		"finger1-1.L": [
			0.06727668256976232,
			0.02523718702190969,
			-0.0688329076350225,
			0.9950371667431006
		],
		"tongue07.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"eye.R": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"finger2-1.R": [
			0.38413999627109935,
			0.2535084809263868,
			0.22994809643317377,
			0.8574927325114747
		],
		"finger4-3.R": [
			0.13968306519104362,
			0.10238768090274242,
			0.22929118715018942,
			0.9578261614684838
		],
		"finger2-1.L": [
			0.38414001695452443,
			-0.2535084215924658,
			-0.2299480675694721,
			0.8574927485273214
		],
		"eye.L": [
			2.6179939993653504e-8,
			1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"tongue07.L": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"wrist.L": [
			5.2359879987306816e-8,
			1.745329158975295e-8,
			1.745329303304285e-8,
			0.9999999999999987
		],
		"finger5-3.R": [
			0.07889320618512169,
			0.09744674232356088,
			0.25855176504544797,
			0.9578261738020324
		],
		"lowerleg01.R": [
			0.57010704198927,
			-0.06075485286477156,
			-0.012083210537689695,
			0.8192318380963515
		],
		"lowerarm02.L": [
			-0.09871876237002737,
			0.09434920683940806,
			-0.14076395121851812,
			0.9805806153306595
		],
		"oris07.L": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"oris07.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"tongue00": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm02.R": [
			-0.09871875147672626,
			-0.09434923665001405,
			0.14076393705166262,
			0.9805806155926966
		],
		"lowerleg01.L": [
			0.44459728462848763,
			0.04737955381287451,
			0.009423018962957018,
			0.8944269892479165
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			0.06727666807614134,
			-0.02523717656073443,
			0.0688328559077247,
			0.9950371715666715
		],
		"metacarpal4.L": [
			1.3707785118926925e-15,
			-5.235987998730707e-8,
			2.617993999365348e-8,
			0.9999999999999981
		],
		"finger1-2.R": [
			0.4054084463921671,
			-0.05490189796321043,
			-0.1806381183160112,
			0.8944269916573275
		],
		"pelvis.R": [
			0.09892195296917071,
			0.0045465334803233,
			0.00973737517127495,
			0.9950371650239256
		],
		"toe2-1.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe2-3.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe5-3.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"levator05.L": [
			8.72664651652143e-9,
			-2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"finger4-1.L": [
			0.2414498566057147,
			-0.16941412350054463,
			-0.42155293564458085,
			0.8574928244324014
		],
		"finger4-1.R": [
			0.24144982308514215,
			0.1694141668867729,
			0.42155294359399453,
			0.857492821391207
		],
		"levator05.R": [
			8.726646516521438e-9,
			2.6179939660586626e-8,
			-1.7453292144864443e-8,
			0.9999999999999991
		],
		"toe5-3.R": [
			2.6179939993653494e-8,
			8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe2-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.L": [
			0.25385524458961406,
			-0.2075215113979445,
			-0.3964825806160927,
			0.8574927990190143
		],
		"toe2-1.L": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger1-2.L": [
			0.4054084166956616,
			0.054901880965227856,
			0.18063812152646022,
			0.894427005512573
		],
		"pelvis.L": [
			0.09892195296917071,
			-0.0045465334803233,
			-0.00973737517127495,
			0.9950371650239256
		],
		"metacarpal4.R": [
			2.6179940881831864e-8,
			2.617994077080965e-8,
			-3.490658428972883e-8,
			0.9999999999999988
		],
		"tongue04": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-2.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"levator03.R": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"upperleg02.R": [
			-6.108652428338212e-8,
			-8.726645739365324e-9,
			8.72664651652142e-9,
			0.9999999999999983
		],
		"upperleg02.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			1.7453292144864403e-8,
			0.9999999999999988
		],
		"levator03.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"toe3-2.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"metacarpal3.L": [
			-2.617994177001032e-8,
			-2.6179941547965768e-8,
			-7.853981998096171e-8,
			0.9999999999999959
		],
		"tongue01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"breast.L": [
			0,
			0,
			0,
			1
		],
		"temporalis02.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"oris04.L": [
			-1.7453292144864436e-8,
			-8.726646072432231e-9,
			1.7453292144864443e-8,
			0.9999999999999999
		],
		"temporalis02.L": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"breast.R": [
			0,
			0,
			0,
			1
		],
		"oris03.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"oris06.L": [
			-2.6179939993653497e-8,
			-8.726646405499139e-9,
			-1.7453292144864423e-8,
			0.9999999999999994
		],
		"orbicularis04.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"toe1-2.R": [
			2.6179939993653507e-8,
			-8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"toe1-2.L": [
			2.6179939993653504e-8,
			-3.4906584733818136e-8,
			8.726645184253808e-9,
			0.9999999999999991
		],
		"orbicularis04.L": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"metacarpal3.R": [
			-8.726644740164582e-9,
			-2.617993988263123e-8,
			4.363322858580427e-8,
			0.9999999999999987
		],
		"oris06.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"levator04.L": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"tongue06.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-2.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe2-2.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue06.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator04.R": [
			4.569261529843785e-16,
			2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"toe4-1.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"upperleg01.R": [
			-0.3786204082966277,
			0.0377446476883021,
			-0.0881181360844047,
			0.9205743435949056
		],
		"metacarpal1.R": [
			1.7453291256686083e-8,
			2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"levator02.R": [
			2.6179939993653494e-8,
			1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"toe3-1.L": [
			2.6179939993653527e-8,
			8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe3-1.R": [
			-3.4906584289728906e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999994
		],
		"levator02.L": [
			2.6179939993653494e-8,
			-1.745329158975295e-8,
			-1.745329303304287e-8,
			0.9999999999999994
		],
		"finger5-1.R": [
			0.13717588779953419,
			0.16365465026728132,
			0.46808758172767745,
			0.8574928262584112
		],
		"metacarpal1.L": [
			-1.599241508975541e-15,
			-6.108652395031555e-8,
			-2.617993999365344e-8,
			0.9999999999999974
		],
		"toe4-1.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"upperleg01.L": [
			-0.2019764742586079,
			0.09684215788982642,
			0.2546995298261025,
			0.9407206013517861
		],
		"head": [
			-0.099504013876938,
			1.1102230246251565e-16,
			-1.9721522630525295e-31,
			0.9950371607243511
		],
		"toe5-1.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"special01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			4.569261529843784e-16,
			1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			-1.745329303304289e-8,
			-1.745329292202058e-8,
			-2.6179939993653487e-8,
			0.9999999999999993
		],
		"metacarpal2.R": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"temporalis01.R": [
			4.569261529843786e-16,
			-1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"toe5-1.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"risorius02.R": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"special05.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"finger2-2.L": [
			0.3863167447900535,
			-0.2559623024796346,
			-0.22349243612522018,
			0.8574927424759674
		],
		"foot.L": [
			-0.1860346324829889,
			-0.01909511057163593,
			-0.21816426819824955,
			0.9578261033980534
		],
		"oris06": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			8.72664651652144e-9,
			1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"orbicularis03.R": [
			8.726646072432225e-9,
			-1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"levator06.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"orbicularis03.L": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"foot.R": [
			-0.1968689146966622,
			-0.023208488092820057,
			0.09123196148715478,
			0.9758999568141247
		],
		"root": [
			-0.09950399934333867,
			1.1102230246251565e-16,
			0,
			0.9950371621777151
		],
		"finger2-2.R": [
			0.38631675656547004,
			0.2559622771926857,
			0.2234924192452392,
			0.8574927491186034
		],
		"risorius02.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"special05.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"lowerleg02.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue05.L": [
			0,
			0,
			0,
			1
		],
		"finger5-1.L": [
			0.13717589170095976,
			-0.16365469272688404,
			-0.4680875634130955,
			0.8574928275283165
		],
		"toe4-3.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"oris03.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"toe4-3.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"finger3-3.L": [
			0.1691485801311556,
			-0.1358984298338637,
			-0.18838622918088052,
			0.9578261863528862
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"shoulder01.R": [
			0.006854448394909679,
			-0.0023040771204697608,
			-0.09924084655330952,
			0.9950371662109945
		],
		"finger3-1.L": [
			0.2959342249031023,
			-0.21980123741669622,
			-0.35891000874751133,
			0.857492831563011
		],
		"special06.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger4-3.L": [
			0.13968304761365694,
			-0.10238769622279875,
			-0.22929118796417758,
			0.9578261621993446
		],
		"finger3-2.L": [
			0.3031238599962644,
			-0.2478834822567214,
			-0.33373001938923064,
			0.8574928448002996
		],
		"upperarm01.R": [
			-0.3606930188323886,
			0.2673209727589675,
			0.2284123370334418,
			0.8638679574910153
		],
		"finger3-2.R": [
			0.30312387542013863,
			0.24788350358072786,
			0.3337300354122568,
			0.8574928269475803
		],
		"upperarm01.L": [
			-0.3606930188323886,
			-0.2673209727589675,
			-0.2284123370334418,
			0.8638679574910153
		],
		"special06.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-1.R": [
			0.29593417060963534,
			0.2198012533421837,
			0.35891003230427054,
			0.8574928363584967
		],
		"shoulder01.L": [
			0.006854448394909679,
			0.0023040771204697608,
			0.09924084655330952,
			0.9950371662109945
		],
		"lowerarm01.R": [
			-0.31330907264996977,
			0.2087646995210154,
			0.2882040260643986,
			0.8804505463621382
		],
		"special03": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.L": [
			-0.13212203237919212,
			0.14493230543799496,
			0.0001429908785507868,
			0.9805806315413474
		],
		"spine02": [
			0.09950396300933954,
			-1.1102230246251565e-16,
			0,
			0.995037165811125
		],
		"spine03": [
			0.09950396300933954,
			-1.1102230246251565e-16,
			0,
			0.995037165811125
		],
		"spine01": [
			0,
			0,
			0,
			1
		],
		"upperarm02.R": [
			-0.13212203237919212,
			-0.14493230543799496,
			-0.0001429908785507868,
			0.9805806315413474
		],
		"spine04": [
			0.09950394120893946,
			-1.1102230246251565e-16,
			-1.232595164407831e-32,
			0.99503716799117
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			-0.3133091484326263,
			-0.2087647551102786,
			-0.2882040403079693,
			0.8804505015515239
		],
		"finger5-3.L": [
			0.0788931630259041,
			-0.09744678082510738,
			-0.2585517647737032,
			0.9578261735132295
		],
		"oris01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris02": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris05": [
			0,
			0,
			0,
			1
		],
		"risorius03.R": [
			-5.235987998730683e-8,
			8.726646294476836e-9,
			-4.4331856927593173e-16,
			0.9999999999999987
		],
		"finger2-3.L": [
			0.21502933386430498,
			-0.14993661492018118,
			-0.11768779017346565,
			0.9578261747980356
		],
		"toe3-3.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger3-3.R": [
			0.16914859424497738,
			0.13589841731013863,
			0.18838625709490525,
			0.9578261801471708
		],
		"finger2-3.R": [
			0.21502929665667458,
			0.14993660153207422,
			0.11768774923997595,
			0.9578261902762822
		],
		"toe3-3.L": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"risorius03.L": [
			-5.235987998730683e-8,
			-8.726646294476836e-9,
			4.4331856927593173e-16,
			0.9999999999999987
		]
	},
	"fight03": {
		"toe1-1.L": [
			-0.3287341489196925,
			-0.03292560639521336,
			0.024965349688246673,
			0.9435181477282227
		],
		"finger5-2.R": [
			0.1689684251456601,
			0.20487105973169428,
			0.561364146348411,
			0.7838034290450178
		],
		"finger4-2.R": [
			0.3185267158250233,
			0.24373831170872506,
			0.5100503650923528,
			0.7609080048075869
		],
		"toe5-2.R": [
			-4.569261529843785e-16,
			-2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"toe4-2.R": [
			-8.72664696061062e-9,
			2.6179939993653534e-8,
			3.490658428972884e-8,
			0.9999999999999991
		],
		"clavicle.R": [
			0.025814432742465993,
			0.11960362388571799,
			-0.015134511209715845,
			0.9923706640091853
		],
		"neck03": [
			-0.10614413683834974,
			-2.5105761247701253e-8,
			1.1456194298766163e-8,
			0.9943507541179023
		],
		"neck02": [
			-0.1041008634220172,
			-0.08134265110750849,
			-0.007479905812721718,
			0.9912065548384076
		],
		"neck01": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"clavicle.L": [
			0.0661948205239435,
			0.1862704904035597,
			-0.022091288522006033,
			0.9800171044997419
		],
		"toe5-2.L": [
			1.7453293033042916e-8,
			2.617994110387656e-8,
			-2.6179939105475286e-8,
			0.9999999999999992
		],
		"toe4-2.L": [
			4.363322858580413e-8,
			2.617993943854202e-8,
			2.6179940881831894e-8,
			0.9999999999999987
		],
		"finger5-2.L": [
			0.16896839594832594,
			-0.204871189804551,
			-0.5613639889021624,
			0.7838035141045042
		],
		"finger1-3.L": [
			0.4936039605268198,
			0.08374276328373753,
			0.19180329461816223,
			0.8441290043135942
		],
		"toe1-1.R": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"oculi02.L": [
			-8.72664571716076e-8,
			-8.72664374096388e-9,
			2.6179940881844394e-8,
			0.9999999999999957
		],
		"oculi01.L": [
			7.853981998095924e-8,
			2.6179944989657145e-8,
			-6.108652073066871e-8,
			0.9999999999999951
		],
		"jaw": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"finger1-3.R": [
			0.4936038837491474,
			-0.08374284844841595,
			-0.19180320361708972,
			0.8441290614377193
		],
		"oculi01.R": [
			6.108652428338193e-8,
			8.726641187450923e-9,
			7.853981998096142e-8,
			0.9999999999999951
		],
		"oculi02.R": [
			-7.853981998095932e-8,
			4.3633227142514386e-8,
			-1.7453295697572024e-8,
			0.9999999999999958
		],
		"wrist.R": [
			-0.07707480320279791,
			-0.06459579610526978,
			0.2954659075182466,
			0.9500456596033664
		],
		"finger1-1.L": [
			0.10355202271420628,
			0.04474809621326059,
			0.13696844411339565,
			0.9841312065950563
		],
		"tongue07.R": [
			3.4906584289728807e-8,
			-8.726644851186904e-9,
			-3.49065842897288e-8,
			0.9999999999999984
		],
		"eye.R": [
			3.046174000298796e-16,
			-3.4906584178706623e-8,
			8.726646072432218e-9,
			0.9999999999999994
		],
		"finger2-1.R": [
			0.47502667208915844,
			0.3081380203390437,
			0.300906408515946,
			0.7673695032638895
		],
		"finger4-3.R": [
			0.27649768979836126,
			0.18711064391812204,
			0.46421876249334065,
			0.820389892074413
		],
		"finger2-1.L": [
			0.47502681262573454,
			-0.30813811863373575,
			-0.3009064515860322,
			0.767369359907861
		],
		"eye.L": [
			8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"tongue07.L": [
			5.2359879987306816e-8,
			6.108652428338246e-8,
			8.726649181056767e-9,
			0.9999999999999966
		],
		"wrist.L": [
			-0.08402383706907846,
			0.0837852980322219,
			-0.2821371239209142,
			0.9520077005694201
		],
		"finger5-3.R": [
			0.15021229473733416,
			0.16993248782924053,
			0.5110320392854649,
			0.8290991924454206
		],
		"lowerleg01.R": [
			0.34057217162496617,
			-0.03786837199544746,
			0.03726459867063385,
			0.9387161083112323
		],
		"lowerarm02.L": [
			-1.7453292144864446e-8,
			8.726646294476836e-9,
			2.6179939993653537e-8,
			0.9999999999999994
		],
		"oris07.L": [
			3.1984830179510653e-15,
			1.2217304834472031e-7,
			-2.6179939993653322e-8,
			0.999999999999992
		],
		"oris07.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue00": [
			7.853981998095983e-8,
			-8.726647293677559e-9,
			1.745329125668274e-8,
			0.9999999999999964
		],
		"lowerarm02.R": [
			-0.08159467601609957,
			-0.08289792764679538,
			0.10850646405906819,
			0.9872672331719978
		],
		"lowerleg01.L": [
			0.0713884389006525,
			0.006508192842409666,
			0.00045797766783342456,
			0.9974272527225784
		],
		"tongue03": [
			-4.363322858580417e-8,
			1.7453292255886765e-8,
			8.726645184253984e-9,
			0.9999999999999989
		],
		"finger1-1.R": [
			0.16403883928541543,
			-0.008237122908441363,
			-0.17249762218881812,
			0.9712198408966369
		],
		"metacarpal4.L": [
			0.0497614873622736,
			-0.03490221879034883,
			-0.11055854647151937,
			0.9920092929509833
		],
		"finger1-2.R": [
			0.14371826875504912,
			-0.020776972258058413,
			-0.06729017011745642,
			0.9871096239300893
		],
		"pelvis.R": [
			-0.010299662918314453,
			0.18879926139456915,
			-0.061274629800462554,
			0.9800480475892241
		],
		"toe2-1.R": [
			1.745329214486445e-8,
			8.726646627543744e-9,
			-2.6179939993653573e-8,
			0.9999999999999997
		],
		"toe2-3.L": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"toe5-3.L": [
			-2.6179945322723953e-8,
			5.235988176366391e-8,
			9.599310857311274e-8,
			0.9999999999999938
		],
		"levator05.L": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"finger4-1.L": [
			0.26273290289395856,
			-0.16771208853714725,
			-0.4689737783198676,
			0.826382279785699
		],
		"finger4-1.R": [
			0.26273273820723914,
			0.16771192083896236,
			0.4689736973514927,
			0.8263824121283694
		],
		"levator05.R": [
			8.726646960610676e-9,
			5.235988043139628e-8,
			-1.745329125668601e-8,
			0.9999999999999988
		],
		"toe5-3.R": [
			-3.4906584289728807e-8,
			2.6179939993653534e-8,
			-8.72664696061079e-9,
			0.999999999999999
		],
		"toe2-3.R": [
			-8.726646072432222e-9,
			-2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"finger4-2.L": [
			0.3185266725437417,
			-0.24373851011358483,
			-0.5100503277813523,
			0.7609079843817893
		],
		"toe2-1.L": [
			-0.30554922764295867,
			-0.03048904825501597,
			0.022730047013808295,
			0.9514165398951423
		],
		"finger1-2.L": [
			0.14371832250350058,
			0.020776995483665184,
			0.06729016798579478,
			0.9871096157610334
		],
		"pelvis.L": [
			0.0012242489243162844,
			0.02244175848964447,
			-0.007283501417739646,
			0.9997208706921955
		],
		"metacarpal4.R": [
			0.05222230808198131,
			0.006767337516339733,
			0.06552894700917417,
			0.9964602304083191
		],
		"tongue04": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe3-2.L": [
			-0.1890156093214088,
			-0.017643111399870404,
			0.003033561146039223,
			0.981810886861498
		],
		"levator03.R": [
			8.726645628343061e-9,
			-8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"upperleg02.R": [
			-0.14243525146901612,
			-0.12218914722159557,
			-0.013364896609111856,
			0.9821422457968322
		],
		"upperleg02.L": [
			2.6179940881831824e-8,
			8.726647626744466e-9,
			-6.981316857945608e-8,
			0.9999999999999973
		],
		"levator03.L": [
			8.726644296075356e-9,
			5.235988009832937e-8,
			3.4906584289728846e-8,
			0.9999999999999984
		],
		"toe3-2.R": [
			2.617993910547522e-8,
			-3.4906582846438994e-8,
			-3.4906586066085765e-8,
			0.9999999999999987
		],
		"metacarpal3.L": [
			0.04085343327346028,
			-0.03602789341446799,
			-0.08334085245418814,
			0.9950313011147419
		],
		"tongue01": [
			-7.85398199809599e-8,
			8.726646627543744e-9,
			8.726645184253795e-9,
			0.9999999999999967
		],
		"breast.L": [
			0.004637401286048681,
			-0.000016451771638115176,
			-0.001365767054507339,
			0.999988314391225
		],
		"temporalis02.R": [
			1.745329303304287e-8,
			-3.490658440075123e-8,
			1.7453291256686037e-8,
			0.999999999999999
		],
		"tongue02": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"oris04.R": [
			3.490658428972882e-8,
			-8.726645850387627e-9,
			-1.7453292144864483e-8,
			0.9999999999999989
		],
		"oris04.L": [
			2.6179939993653497e-8,
			8.726646405499139e-9,
			-1.7453292144864423e-8,
			0.9999999999999994
		],
		"temporalis02.L": [
			2.617993999365353e-8,
			-1.745329336610979e-8,
			1.7453291256686023e-8,
			0.9999999999999997
		],
		"breast.R": [
			-6.981316857945727e-8,
			-3.4906584733818136e-8,
			2.663987862210689e-15,
			0.9999999999999971
		],
		"oris03.R": [
			-4.264644023934739e-15,
			6.108652428338246e-8,
			6.98131685794572e-8,
			0.9999999999999958
		],
		"oris06.L": [
			-4.3633228585804066e-8,
			-1.7453290479529926e-8,
			3.490658428972878e-8,
			0.9999999999999984
		],
		"orbicularis04.R": [
			4.363322858580413e-8,
			-2.617993943854202e-8,
			-2.6179940881831894e-8,
			0.9999999999999987
		],
		"toe1-2.R": [
			1.599241508975541e-15,
			6.108652395031555e-8,
			-2.617993999365344e-8,
			0.9999999999999974
		],
		"toe1-2.L": [
			3.490658251337199e-8,
			2.6179938217296694e-8,
			5.2359881763663814e-8,
			0.9999999999999973
		],
		"orbicularis04.L": [
			2.6179939993653494e-8,
			-8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"metacarpal3.R": [
			0.017336996744552035,
			0.01840822395742725,
			0.04692694815901462,
			0.9985782029320959
		],
		"oris06.R": [
			-2.6179939105475035e-8,
			-8.7266446291423e-9,
			5.235987998730851e-8,
			0.9999999999999981
		],
		"levator04.L": [
			1.7453293033042797e-8,
			-9.599310868413369e-8,
			8.72664429607514e-9,
			0.9999999999999954
		],
		"tongue06.L": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"toe2-2.L": [
			5.235988176366363e-8,
			3.490658617710807e-8,
			-3.490658251337178e-8,
			0.9999999999999977
		],
		"toe2-2.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"tongue06.R": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"levator04.R": [
			3.490658428972879e-8,
			6.108652439440476e-8,
			8.72664829287832e-9,
			0.9999999999999977
		],
		"toe4-1.L": [
			-0.11794206599106447,
			-0.01203138968509998,
			0.01674706755875956,
			0.9928063509366704
		],
		"upperleg01.R": [
			-0.13738431664516343,
			-0.239674775118488,
			-0.12897985969428527,
			0.9523894935923469
		],
		"metacarpal1.R": [
			2.6179940881831887e-8,
			-1.7453293255087488e-8,
			2.6179939105475074e-8,
			0.9999999999999993
		],
		"levator02.R": [
			2.6179941770010237e-8,
			-6.981316891252476e-8,
			2.6179938217296602e-8,
			0.9999999999999973
		],
		"toe3-1.L": [
			-0.1716063671693906,
			-0.025302271118799236,
			0.034955970920133084,
			0.9842200617342575
		],
		"toe3-1.R": [
			-1.5230870001493993e-16,
			8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"levator02.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger5-1.R": [
			0.20162215703387604,
			0.1152279618448887,
			0.5200017402593871,
			0.8219910052605739
		],
		"metacarpal1.L": [
			-5.2359881763663464e-8,
			-3.4906586066085765e-8,
			-2.617993821729546e-8,
			0.9999999999999978
		],
		"toe4-1.R": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"upperleg01.L": [
			0.07542632910885946,
			0.039045876384464884,
			0.16445391391262343,
			0.9827213229666643
		],
		"head": [
			-3.474126602281191e-8,
			-0.12849695865580446,
			0.005054191786538284,
			0.9916970236728514
		],
		"toe5-1.R": [
			1.7453291256685974e-8,
			-8.726644518119997e-9,
			-7.853981998096083e-8,
			0.9999999999999969
		],
		"special01": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"temporalis01.L": [
			-5.2359878210949824e-8,
			-6.108652106373569e-8,
			3.490658784244232e-8,
			0.9999999999999964
		],
		"special04": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"metacarpal2.L": [
			0.016693425022190653,
			-0.01026685240025027,
			-0.03163449398794686,
			0.9993073501645762
		],
		"metacarpal2.R": [
			0.01237524733543857,
			0.0016761050192627414,
			0.011353890898684387,
			0.9998575563983163
		],
		"temporalis01.R": [
			-8.72664696061064e-9,
			-8.726647071632954e-9,
			-7.853981998095982e-8,
			0.9999999999999969
		],
		"toe5-1.L": [
			-0.11912385616786286,
			-0.011364161094473801,
			0.003981771763929712,
			0.9928063800298309
		],
		"risorius02.R": [
			-2.6179940881831864e-8,
			-3.490658440075123e-8,
			-2.6179939105475068e-8,
			0.9999999999999987
		],
		"special05.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger2-2.L": [
			0.3797033084589266,
			-0.2848825679975219,
			-0.18361127644621358,
			0.8607869766430453
		],
		"foot.L": [
			8.726643851986146e-9,
			-6.108652428338246e-8,
			-3.4906584289728807e-8,
			0.9999999999999976
		],
		"toe3-3.R": [
			7.615435000746974e-16,
			1.7453292255886765e-8,
			-4.363322858580417e-8,
			0.999999999999999
		],
		"levator06.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"orbicularis03.R": [
			-1.745329214486444e-8,
			-8.726646627543744e-9,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"levator06.L": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"orbicularis03.L": [
			-1.7453291256686023e-8,
			-2.6179939105475114e-8,
			4.3633228585804576e-8,
			0.9999999999999986
		],
		"foot.R": [
			-0.009526925136499395,
			0.0024195170909099284,
			0.06512691285942157,
			0.9978285768887819
		],
		"root": [
			0.07333480799236669,
			0.18194342168628252,
			0.003938387608576652,
			0.9805626376447631
		],
		"finger2-2.R": [
			0.24842196826982338,
			0.16187491555690692,
			0.15234985586973038,
			0.9428003812106057
		],
		"risorius02.L": [
			-3.49065825133719e-8,
			-3.490658262439439e-8,
			6.108652428338225e-8,
			0.999999999999997
		],
		"special05.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"lowerleg02.L": [
			-8.72664651652143e-9,
			-4.363322880784892e-8,
			-8.726645628342965e-9,
			0.9999999999999992
		],
		"tongue05.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger5-1.L": [
			0.20162203389324287,
			-0.11522815894092198,
			-0.5200017878315145,
			0.8219909777411591
		],
		"toe4-3.R": [
			8.726646072432225e-9,
			-3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"oris03.L": [
			-7.853981998095983e-8,
			-8.726647293677559e-9,
			-1.745329125668274e-8,
			0.9999999999999964
		],
		"toe4-3.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"finger3-3.L": [
			0.3281712882862707,
			-0.25492115310224783,
			-0.3823398000481368,
			0.825309086672806
		],
		"tongue05.R": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"lowerleg02.R": [
			-0.014237375424519272,
			-0.15578151817193742,
			-0.005728194094040574,
			0.9876723158666993
		],
		"shoulder01.R": [
			-1.745329214486445e-8,
			-8.726645850387627e-9,
			3.490658428972894e-8,
			0.9999999999999992
		],
		"finger3-1.L": [
			0.34701623734159326,
			-0.24756314373724142,
			-0.43786038332622523,
			0.7915620668005935
		],
		"special06.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger4-3.L": [
			0.27649780140067715,
			-0.18711060050102946,
			-0.4642185618300935,
			0.82038997790876
		],
		"finger3-2.L": [
			0.41169025854102553,
			-0.3287085588485198,
			-0.47238835084158715,
			0.7066194593636089
		],
		"upperarm01.R": [
			-0.14279082204983817,
			0.129379244493522,
			-0.01076718112800857,
			0.9812012332050817
		],
		"finger3-2.R": [
			0.4116900525347049,
			0.32870847770335865,
			0.47238844214488945,
			0.7066195560963746
		],
		"upperarm01.L": [
			0.28129172150468607,
			0.09810721101394038,
			-0.037168288351041204,
			0.9538702537038514
		],
		"special06.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"finger3-1.R": [
			0.3470162243874104,
			0.24756320528891607,
			0.43786038782570463,
			0.7915620507402484
		],
		"shoulder01.L": [
			-0.0956812677550553,
			-0.1583413053952063,
			0.0075566704039705624,
			0.9827085136188314
		],
		"lowerarm01.R": [
			-0.3693087166582038,
			0.3272298177437448,
			-0.02770923051886616,
			0.8693468333891362
		],
		"special03": [
			-1.7453291256686003e-8,
			-5.235987976526246e-8,
			8.726646960611257e-9,
			0.9999999999999984
		],
		"upperarm02.L": [
			-6.98131685794573e-8,
			8.726647626744466e-9,
			1.7453291256686354e-8,
			0.9999999999999976
		],
		"spine02": [
			0.1424804159049506,
			0.05203117410145597,
			0.0924599672251845,
			0.9840951389301208
		],
		"spine03": [
			0.05571894414146325,
			-0.09308537394666094,
			-0.007612715143797389,
			0.9940686892710733
		],
		"spine01": [
			-0.05250173719585274,
			-0.08318854949422605,
			-0.01575275845769405,
			0.9950251672321851
		],
		"upperarm02.R": [
			2.6179939993653487e-8,
			-8.726647182655256e-9,
			2.617993999365346e-8,
			0.9999999999999989
		],
		"spine04": [
			4.363322858580418e-8,
			-1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"spine05": [
			-2.6179939993653527e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.18860430685727536,
			-0.16711478701437632,
			0.014151291046959589,
			0.9676263764272505
		],
		"finger5-3.L": [
			0.15021228475881065,
			-0.1699324778515343,
			-0.5110320293064311,
			0.8290992024490954
		],
		"oris01": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"oris02": [
			-4.36332285858042e-8,
			-8.726645184253812e-9,
			1.7453292144864443e-8,
			0.9999999999999989
		],
		"oris05": [
			-4.363322858580418e-8,
			-1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"risorius03.R": [
			1.7453292144864436e-8,
			-4.363322869682662e-8,
			-6.702088926697263e-16,
			0.9999999999999991
		],
		"finger2-3.L": [
			0.524061475941336,
			-0.3621626894095873,
			-0.30450217552013586,
			0.7081498294409933
		],
		"oris06": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-3.R": [
			0.3281712880685237,
			0.25492108122915624,
			0.3823398950969484,
			0.8253090649263813
		],
		"finger2-3.R": [
			0.5240615023259878,
			0.3621626370025245,
			0.30450212460648773,
			0.7081498586099845
		],
		"toe3-3.L": [
			6.108652428338189e-8,
			-3.490658595506346e-8,
			2.617993821729565e-8,
			0.999999999999997
		],
		"risorius03.L": [
			-6.981316857945724e-8,
			1.745328970237381e-8,
			-3.4906586066085924e-8,
			0.999999999999997
		]
	},
	"fight02": {
		"toe1-1.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger5-2.R": [
			0.07851829615118079,
			0.09520326704697901,
			0.26086133005222956,
			0.9574563079307997
		],
		"finger1-3.R": [
			0.3275044159157543,
			-0.05556254147578643,
			-0.12726164246795052,
			0.9345898222732751
		],
		"toe5-2.R": [
			-1.745329214486445e-8,
			1.7453292366909068e-8,
			8.726645628343025e-9,
			0.9999999999999999
		],
		"toe4-2.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"clavicle.R": [
			0.15350277780497978,
			0.053686414226380874,
			-0.16396089897679758,
			0.9729704464886838
		],
		"neck03": [
			-0.21164821103129924,
			1.2309928831832906e-7,
			-8.799803801732553e-9,
			0.9773459135675736
		],
		"neck02": [
			-0.10688504015760658,
			5.1127183042787294e-8,
			-1.4273142401611037e-8,
			0.9942713855836863
		],
		"neck01": [
			-0.0536294203032614,
			2.6142264908379786e-8,
			-1.404014995812575e-9,
			0.9985609071448449
		],
		"clavicle.L": [
			-0.00836468239304899,
			0.03218952680067966,
			0.26865681319600015,
			0.962661614055625
		],
		"toe5-2.L": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"toe4-2.L": [
			-4.363322858580413e-8,
			3.490658440075123e-8,
			-1.6405861018266948e-15,
			0.9999999999999987
		],
		"finger5-2.L": [
			0.07851830713985868,
			-0.09520327574117882,
			-0.2608612782384046,
			0.9574563202819569
		],
		"finger1-3.L": [
			0.3275044160456745,
			0.05556248756015536,
			0.12726166214138102,
			0.9345898227541976
		],
		"toe1-1.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"oculi02.L": [
			1.7453291256686056e-8,
			-1.745329114566374e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"oculi01.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"jaw": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.R": [
			0.13037049933216624,
			0.0997602270692114,
			0.20875758987564624,
			0.9640911257076755
		],
		"oculi01.R": [
			2.617993999365353e-8,
			-1.745329336610979e-8,
			1.7453291256686023e-8,
			0.9999999999999997
		],
		"oculi02.R": [
			-2.6179939105475054e-8,
			-1.7453291367708346e-8,
			4.363322858580434e-8,
			0.9999999999999986
		],
		"oris03.L": [
			1.7453293033042826e-8,
			-1.7453293144065185e-8,
			5.2359879987306406e-8,
			0.9999999999999981
		],
		"finger1-1.L": [
			5.235987998730683e-8,
			8.726646627543744e-9,
			-8.726645628343008e-9,
			0.9999999999999987
		],
		"tongue07.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"eye.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger2-1.R": [
			-0.07685893760329661,
			-0.049855881633725674,
			-0.048686071618465804,
			0.9946038212310353
		],
		"finger4-3.R": [
			0.18512764190457323,
			0.12527947824356656,
			0.3108130049652387,
			0.9238117148414768
		],
		"finger2-1.L": [
			0,
			-6.981316857945734e-8,
			2.220446049250313e-16,
			0.9999999999999974
		],
		"eye.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue07.L": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"wrist.L": [
			-4.363322858580418e-8,
			1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"finger5-3.R": [
			0.0919080567862738,
			0.10397390707045484,
			0.3126727358849581,
			0.9396691417624029
		],
		"lowerleg01.R": [
			0.9076701038439612,
			-0.0827424670716711,
			-0.005790717335463701,
			0.41140628862904743
		],
		"lowerarm02.L": [
			-0.24140000925248406,
			0.24526007670116345,
			-0.3210174841607727,
			0.8823385434018667
		],
		"oris07.L": [
			4.569261529843784e-16,
			1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"oris07.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"tongue00": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm02.R": [
			-0.24139998938737392,
			-0.24526016757655644,
			0.32101753228786983,
			0.8823385060666354
		],
		"lowerleg01.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"metacarpal4.L": [
			4.3633230362160886e-8,
			6.981316857945785e-8,
			-3.490658073701492e-8,
			0.9999999999999958
		],
		"finger1-2.R": [
			-3.490658428972882e-8,
			-2.6179939993653534e-8,
			-8.726645184253818e-9,
			0.9999999999999988
		],
		"pelvis.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			-2.7755575615628914e-16,
			-1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe2-3.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"toe5-3.L": [
			8.726647404699846e-9,
			-4.363322880784892e-8,
			2.617993999365346e-8,
			0.9999999999999984
		],
		"levator05.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger4-1.L": [
			-0.16403328994881308,
			0.10470614081965579,
			0.2927958129941264,
			0.9361625477214587
		],
		"finger4-1.R": [
			-0.16403335726307733,
			-0.1047061131565038,
			-0.29279574666988756,
			0.9361625597644267
		],
		"levator05.R": [
			-8.72664562834302e-9,
			-3.4906584289728926e-8,
			8.726646516521445e-9,
			0.9999999999999994
		],
		"toe5-3.R": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"toe2-3.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.130370447899922,
			-0.09976024812403084,
			-0.20875755771918103,
			0.9640911374469368
		],
		"toe2-1.L": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"finger1-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"pelvis.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"metacarpal4.R": [
			4.363322858580412e-8,
			1.7453291367708346e-8,
			2.6179940881832073e-8,
			0.9999999999999987
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"levator03.R": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"upperleg02.R": [
			-0.310735448132048,
			0.09236769095214947,
			0.14702068217692027,
			0.9345034028587464
		],
		"upperleg02.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator03.L": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"toe3-2.R": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"metacarpal3.L": [
			6.108652428338193e-8,
			8.726648959012095e-9,
			-5.235987998730657e-8,
			0.9999999999999964
		],
		"tongue01": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"breast.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis02.R": [
			-8.72664607243222e-9,
			-4.3633228918871225e-8,
			3.5626088403688626e-16,
			0.9999999999999991
		],
		"tongue02": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"oris04.L": [
			8.72664651652144e-9,
			1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"temporalis02.L": [
			1.745329303304289e-8,
			-2.6179940104675836e-8,
			1.745329125668605e-8,
			0.9999999999999996
		],
		"breast.R": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"oris03.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"oris06.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"orbicularis04.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"toe1-2.R": [
			2.6179939993653494e-8,
			1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"toe1-2.L": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"orbicularis04.L": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"metacarpal3.R": [
			-4.363322680944723e-8,
			-3.4906582846438994e-8,
			2.617994177001014e-8,
			0.9999999999999983
		],
		"oris06.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"levator04.L": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"tongue06.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"toe2-2.L": [
			-8.726645628343013e-9,
			-1.7453292255886765e-8,
			2.61799399936535e-8,
			0.9999999999999997
		],
		"toe2-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue06.R": [
			1.7453292144864446e-8,
			5.551115123125783e-16,
			-3.490658429686185e-8,
			0.9999999999999992
		],
		"levator04.R": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"toe4-1.L": [
			4.363322858580418e-8,
			-1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"upperleg01.R": [
			-0.2904674097148861,
			0.008839637106639708,
			0.008981846094545814,
			0.9568018975472831
		],
		"metacarpal1.R": [
			-0.020561713650384724,
			-0.013287527191345405,
			-0.009910953411082992,
			0.9996511544310756
		],
		"levator02.R": [
			1.7453292144864443e-8,
			6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"toe3-1.L": [
			8.72664562834302e-9,
			-3.4906584289728926e-8,
			-8.726646516521445e-9,
			0.9999999999999994
		],
		"toe3-1.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator02.L": [
			-3.490658428972881e-8,
			1.745329158975295e-8,
			-1.7453293033042366e-8,
			0.9999999999999991
		],
		"finger5-1.R": [
			-0.08866231325291075,
			-0.09556987826221008,
			-0.3168085299550578,
			0.9394880243650282
		],
		"metacarpal1.L": [
			4.3633228585804126e-8,
			-8.726644740164602e-9,
			-2.6179939993652468e-8,
			0.9999999999999986
		],
		"toe4-1.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperleg01.L": [
			0.11394181188987144,
			0.0034675574649342122,
			0.003523306364490036,
			0.9934751259396194
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			2.6179939993653517e-8,
			-3.4906584733818136e-8,
			-8.72664696061073e-9,
			0.9999999999999996
		],
		"special04": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"metacarpal2.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"metacarpal2.R": [
			8.726646516521443e-9,
			1.7453291811797556e-8,
			-2.6179939993653554e-8,
			0.9999999999999993
		],
		"temporalis01.R": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe5-1.L": [
			1.7453292144864433e-8,
			-2.617994021569814e-8,
			-4.927555263958927e-16,
			0.9999999999999996
		],
		"risorius02.R": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"special05.L": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"finger2-2.L": [
			0.19389144005260672,
			-0.1263416828672682,
			-0.11890847125467305,
			0.9655592494034064
		],
		"foot.L": [
			0.427954305096812,
			0.10027661553856981,
			-0.04300700261851777,
			0.897190119679773
		],
		"toe3-3.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator06.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"orbicularis03.R": [
			0,
			0,
			0,
			1
		],
		"levator06.L": [
			-8.726645628343007e-9,
			1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"orbicularis03.L": [
			8.726646072432225e-9,
			-1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"foot.R": [
			0.3903075973546969,
			-0.035580013589074144,
			-0.0024900460839893408,
			0.919993392232088
		],
		"root": [
			0.47299554174135316,
			0,
			0,
			0.8810648202560375
		],
		"finger2-2.R": [
			0.1938914314054644,
			0.12634178348374026,
			0.11890861357588553,
			0.965559220447482
		],
		"risorius02.L": [
			-8.72664607243222e-9,
			-4.3633228918871225e-8,
			3.5626088403688626e-16,
			0.9999999999999991
		],
		"special05.R": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"lowerleg02.L": [
			-0.012899254241355315,
			0.14114131862822943,
			0.005189888050805495,
			0.9898918135220237
		],
		"tongue05.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger5-1.L": [
			-0.0886622729173451,
			0.09556988468820848,
			0.3168085309199277,
			0.9394880271925611
		],
		"toe4-3.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"wrist.R": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe4-3.L": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"finger3-3.L": [
			0.2629496555578068,
			-0.20425806230769306,
			-0.3063506504550313,
			0.8917877559095083
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"shoulder01.R": [
			0.01043169182929633,
			-0.0036786579226980587,
			-0.18248662815033997,
			0.9831461121459952
		],
		"finger3-1.L": [
			-0.16674505847981197,
			0.11895419071652724,
			0.2103943674901465,
			0.9559185091376571
		],
		"special06.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"finger4-3.L": [
			0.18512762196821628,
			-0.12527940764673673,
			-0.3108129484627892,
			0.9238117474204061
		],
		"finger3-2.L": [
			0.165359020678409,
			-0.132027772709563,
			-0.1897356635052421,
			0.9587624520744722
		],
		"upperarm01.R": [
			-0.5071569411403553,
			0.028422403164259702,
			-0.4158679020374829,
			0.754346002910116
		],
		"finger3-2.R": [
			0.16535890155155525,
			0.1320277926634862,
			0.18973571416276389,
			0.9587624598477024
		],
		"upperarm01.L": [
			-0.3774463095927163,
			-0.07269057098791964,
			0.4682468638784787,
			0.7956099790300893
		],
		"special06.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger3-1.R": [
			-0.16674502966339194,
			-0.11895414498648127,
			-0.21039432991466395,
			0.9559185281250957
		],
		"shoulder01.L": [
			0.01043166201686389,
			0.0036786885770112576,
			0.18248660241342077,
			0.9831461171247772
		],
		"lowerarm01.R": [
			0.15894022850867348,
			-0.14083050228749583,
			0.01192512778972106,
			0.9771195242723694
		],
		"special03": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperarm02.L": [
			-0.1703725533171651,
			0.059349552166194086,
			0.01696521847517597,
			0.9834444595888223
		],
		"spine02": [
			-0.07506347750975062,
			-1.1102230246251565e-16,
			0,
			0.9971787574673577
		],
		"spine03": [
			-0.03701543126561384,
			0,
			0,
			0.9993146941020236
		],
		"spine01": [
			1.3129175373677086e-8,
			0.006076075995877228,
			-0.04492208406337224,
			0.9989720154558362
		],
		"upperarm02.R": [
			-0.170372501934747,
			-0.05934953203450277,
			-0.01696525279738434,
			0.9834444691131781
		],
		"spine04": [
			-0.0829432391053487,
			0,
			0,
			0.9965542730261674
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			0.15894020536743536,
			0.14083047990131214,
			-0.011925140864981967,
			0.9771195311034744
		],
		"finger5-3.L": [
			0.09190805066947225,
			-0.10397389858027528,
			-0.31267269651491186,
			0.9396691564004058
		],
		"oris01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			6.108652428338212e-8,
			8.726646405499139e-9,
			4.661919405738096e-16,
			0.9999999999999984
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			-4.569261529843784e-16,
			-1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"finger2-3.L": [
			0.3569549966341872,
			-0.246681612661786,
			-0.20740371385303857,
			0.8767639430499152
		],
		"oris06": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-3.R": [
			0.2629496212277165,
			0.20425791824779782,
			0.3063507477865867,
			0.8917877655921695
		],
		"finger2-3.R": [
			0.3569550183565636,
			0.24668165275760445,
			0.20740366213443823,
			0.8767639351593256
		],
		"toe3-3.L": [
			-1.7453291256686053e-8,
			-3.4906584178706623e-8,
			2.6179940881831874e-8,
			0.9999999999999988
		],
		"risorius03.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		]
	},
	"standing02": {
		"toe1-1.L": [
			-5.235987998730683e-8,
			-8.726646627543744e-9,
			-8.726645628343008e-9,
			0.9999999999999987
		],
		"finger5-2.R": [
			0.02384329531309948,
			0.02891022246714925,
			0.07921388855481354,
			0.9961530284878615
		],
		"finger1-3.R": [
			-1.4835298145498702e-7,
			1.134463939456154e-7,
			-2.6179956868924937e-8,
			0.9999999999999826
		],
		"toe5-2.R": [
			-4.3633230362161e-8,
			1.745329469837742e-8,
			6.108652428338094e-8,
			0.9999999999999971
		],
		"toe4-2.R": [
			-1.745329214486445e-8,
			8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"clavicle.R": [
			-0.02909325588335801,
			-0.13479779021387162,
			0.017056505830961615,
			0.9902990527231664
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"neck01": [
			0.034581879095405985,
			1.1102230246251565e-16,
			1.1832913578315177e-30,
			0.9994018679381336
		],
		"clavicle.L": [
			-0.02909326227666523,
			0.13479781155378434,
			-0.01705650747485495,
			0.9902990496022762
		],
		"toe5-2.L": [
			-1.745329214486441e-8,
			-1.1102230246251565e-15,
			-7.853981998115686e-8,
			0.9999999999999968
		],
		"toe4-2.L": [
			-2.617993910547522e-8,
			-3.4906582846438994e-8,
			3.4906586066085765e-8,
			0.9999999999999987
		],
		"finger5-2.L": [
			0.05284908273228402,
			-0.06408284786898466,
			-0.17557864961047145,
			0.9809548923698376
		],
		"finger1-3.L": [
			-2.5307275564043565e-7,
			-6.5503158452884236e-15,
			-2.617993999376353e-8,
			0.9999999999999676
		],
		"toe1-1.R": [
			4.363322858580412e-8,
			-1.5543122344752192e-15,
			4.3633228586164466e-8,
			0.999999999999998
		],
		"oculi02.L": [
			-8.72663941109397e-9,
			6.981316880150246e-8,
			-9.599310857311047e-8,
			0.9999999999999928
		],
		"oculi01.L": [
			-3.490658251337201e-8,
			1.745329014646302e-8,
			-6.108652428338315e-8,
			0.9999999999999973
		],
		"jaw": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			5.235987821094984e-8,
			5.235987787788332e-8,
			2.617994265818816e-8,
			0.9999999999999968
		],
		"oculi01.R": [
			-1.7453293033042846e-8,
			8.726647071632954e-9,
			5.235987998730684e-8,
			0.9999999999999984
		],
		"oculi02.R": [
			7.853981998095975e-8,
			-4.218847493575595e-15,
			5.235987992701905e-8,
			0.9999999999999957
		],
		"oris03.L": [
			1.745329303304277e-8,
			-8.726645728263094e-8,
			8.726644740164559e-9,
			0.9999999999999961
		],
		"finger1-1.L": [
			-0.06419655183268605,
			-0.028313471028957427,
			0.2493314745260067,
			0.9658731624296087
		],
		"tongue07.R": [
			-8.726648292878309e-9,
			-2.6179940992854256e-8,
			-7.853981998095838e-8,
			0.9999999999999964
		],
		"eye.R": [
			-1.7453292144864436e-8,
			1.1102230246251565e-15,
			5.2359879927727643e-8,
			0.9999999999999986
		],
		"finger2-1.R": [
			0.08148109060759169,
			-0.08019722128147666,
			-0.04650590391446794,
			0.9923539884906124
		],
		"finger4-3.R": [
			-8.72664296380771e-9,
			3.4906584178706623e-8,
			-8.726645717160819e-8,
			0.9999999999999956
		],
		"finger2-1.L": [
			-8.726645361889314e-8,
			-5.2359873103924315e-8,
			7.853982353367216e-8,
			0.9999999999999917
		],
		"eye.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"tongue07.L": [
			5.235987998730684e-8,
			-3.3306690738754696e-16,
			8.726646049588092e-9,
			0.9999999999999987
		],
		"wrist.L": [
			0.082251445160241,
			0.040045359574991446,
			0.000921018854220521,
			0.9958063168457166
		],
		"finger5-3.R": [
			-4.363323036216091e-8,
			-4.363323047318346e-8,
			-2.6179938217296526e-8,
			0.9999999999999981
		],
		"lowerleg01.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"lowerarm02.L": [
			0.0457151205718622,
			-0.04644671673281009,
			0.060793533603965076,
			0.9960205703336581
		],
		"oris07.L": [
			-5.235987110552229e-8,
			9.599310524244231e-8,
			-8.726646072432102e-8,
			0.9999999999999903
		],
		"oris07.R": [
			6.108652073066812e-8,
			-6.108652095271339e-8,
			-4.363323213851738e-8,
			0.9999999999999954
		],
		"tongue00": [
			1.7453291434320933e-7,
			1.1102230246251565e-16,
			0,
			0.9999999999999849
		],
		"lowerarm02.R": [
			1.0471975286918616e-7,
			-3.4906563084469155e-8,
			-2.094395270548307e-7,
			0.9999999999999719
		],
		"lowerleg01.L": [
			0,
			0,
			0,
			1
		],
		"tongue03": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger1-1.R": [
			-7.853981998095938e-8,
			-9.599310879515599e-8,
			-1.7453285039437966e-8,
			0.9999999999999925
		],
		"metacarpal4.L": [
			6.108653849423774e-8,
			1.9198622447369473e-7,
			-6.98131579213134e-8,
			0.9999999999999775
		],
		"finger1-2.R": [
			-0.027607659000188252,
			-0.09452725882365731,
			-0.02977874166801362,
			0.9946937423390603
		],
		"pelvis.R": [
			6.981316857945728e-8,
			-8.726644740164602e-9,
			-2.617994088183179e-8,
			0.9999999999999974
		],
		"toe2-1.R": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe2-3.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe5-3.L": [
			0,
			0,
			4.3633228585804205e-8,
			0.9999999999999991
		],
		"levator05.L": [
			3.426946015033916e-15,
			7.85398199809606e-8,
			-4.363322858580405e-8,
			0.9999999999999959
		],
		"finger4-1.L": [
			0.07391533050624739,
			-0.04718584427322314,
			-0.13193761691425732,
			0.9873715031635061
		],
		"finger4-1.R": [
			0.02988312363494569,
			0.08183193628945329,
			0.1447720490167017,
			0.9856224363053241
		],
		"levator05.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"toe5-3.R": [
			-3.4906584289728674e-8,
			3.1086244689504383e-15,
			9.5993108598738e-8,
			0.9999999999999946
		],
		"toe2-3.R": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger4-2.L": [
			0.1445792797556628,
			-0.11064071791946717,
			-0.23150625695142812,
			0.955646543653007
		],
		"toe2-1.L": [
			-5.2359878210949904e-8,
			-2.617993755116288e-8,
			4.363323036216089e-8,
			0.9999999999999973
		],
		"finger1-2.L": [
			0.12053357974195325,
			0.01742444147796096,
			0.056434803783796214,
			0.9909506334402619
		],
		"pelvis.L": [
			-3.4906584289728906e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999994
		],
		"metacarpal4.R": [
			1.7453293033042833e-8,
			8.726646960610651e-9,
			-5.2359879987304315e-8,
			0.9999999999999987
		],
		"tongue04": [
			-7.853981998095985e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"toe3-2.L": [
			8.726646072432215e-9,
			-4.440892098500626e-16,
			6.108652437680207e-8,
			0.9999999999999982
		],
		"levator03.R": [
			8.726645628343017e-9,
			1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"upperleg02.R": [
			6.108652428338206e-8,
			-2.617994165898807e-8,
			3.4906582513371855e-8,
			0.9999999999999969
		],
		"upperleg02.L": [
			5.235987998730683e-8,
			8.726646627543744e-9,
			-8.726645628343008e-9,
			0.9999999999999987
		],
		"levator03.L": [
			-4.363322680944721e-8,
			4.3633227031492083e-8,
			-2.6179941770010135e-8,
			0.999999999999998
		],
		"toe3-2.R": [
			-2.617994177001034e-8,
			-2.6179941770010373e-8,
			-5.235987998730672e-8,
			0.999999999999998
		],
		"metacarpal3.L": [
			-1.2184696001195143e-15,
			3.4906584178706623e-8,
			3.4906584289728846e-8,
			0.9999999999999988
		],
		"tongue01": [
			0,
			0,
			0,
			1
		],
		"breast.L": [
			-5.2359878210950016e-8,
			-8.726645717160864e-8,
			1.7453296585756085e-8,
			0.9999999999999944
		],
		"temporalis02.R": [
			5.2359881763664e-8,
			-1.396263374919826e-7,
			1.745328503943907e-8,
			0.9999999999999886
		],
		"tongue02": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			3.490658961879958e-8,
			-3.490658950777714e-8,
			1.3962633715889066e-7,
			0.999999999999989
		],
		"oris04.L": [
			1.7453292144864453e-8,
			2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"temporalis02.L": [
			1.134463936125464e-7,
			2.6179931000847034e-8,
			7.853982353365631e-8,
			0.9999999999999899
		],
		"breast.R": [
			-5.235988709273409e-8,
			1.2217304856676492e-7,
			5.235987288187946e-8,
			0.9999999999999899
		],
		"oris03.R": [
			5.940039618219929e-15,
			1.1344639727628447e-7,
			-5.235987998730654e-8,
			0.9999999999999922
		],
		"oris06.L": [
			-6.981316857945728e-8,
			2.9976021664879227e-15,
			4.363322855816734e-8,
			0.9999999999999967
		],
		"orbicularis04.R": [
			-8.726646072432225e-9,
			-2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"toe1-2.R": [
			8.726645628343025e-9,
			8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"toe1-2.L": [
			2.6179939993653497e-8,
			-8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"orbicularis04.L": [
			8.726645717160759e-8,
			2.617993943854202e-8,
			8.72664829287866e-9,
			0.9999999999999959
		],
		"metacarpal3.R": [
			-3.49065718552316e-8,
			7.853981309757785e-8,
			-1.6580627004710779e-7,
			0.9999999999999822
		],
		"oris06.R": [
			-6.981316857945706e-8,
			2.6179942769211095e-8,
			4.363322680944984e-8,
			0.9999999999999962
		],
		"levator04.L": [
			7.853981998095937e-8,
			-1.1344639705423987e-7,
			-8.831922556259788e-15,
			0.9999999999999905
		],
		"tongue06.L": [
			-1.745329303304289e-8,
			-2.617994077080965e-8,
			-3.4906584289728476e-8,
			0.9999999999999987
		],
		"toe2-2.L": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"toe2-2.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"tongue06.R": [
			1.745329303304279e-8,
			8.726647404699861e-9,
			-8.726645717160776e-8,
			0.999999999999996
		],
		"levator04.R": [
			1.7453293921221044e-8,
			1.570796399619212e-7,
			-8.726643407897075e-9,
			0.9999999999999877
		],
		"toe4-1.L": [
			-3.490658428972883e-8,
			8.726647515722163e-9,
			3.490658428972884e-8,
			0.9999999999999987
		],
		"upperleg01.R": [
			6.981316857945731e-8,
			2.6179940104675836e-8,
			1.7679558070943898e-15,
			0.9999999999999971
		],
		"metacarpal1.R": [
			1.2217304856676082e-7,
			8.726655842394848e-9,
			-7.853981998080424e-8,
			0.9999999999999893
		],
		"levator02.R": [
			1.7453278822188343e-8,
			-1.7453291445423957e-7,
			-7.853982353367169e-8,
			0.9999999999999816
		],
		"toe3-1.L": [
			-1.7453292144864453e-8,
			-2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"toe3-1.R": [
			-2.617993910547503e-8,
			-2.6179939216497417e-8,
			3.490658428972883e-8,
			0.9999999999999989
		],
		"levator02.L": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"finger5-1.R": [
			-0.04741890912381537,
			0.09821336049468288,
			0.16380620858468076,
			0.9804453625301929
		],
		"metacarpal1.L": [
			-3.490658606608563e-8,
			-6.981316869048015e-8,
			-2.6179937329118136e-8,
			0.9999999999999966
		],
		"toe4-1.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"upperleg01.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			-3.490657540794398e-8,
			4.363322159139926e-8,
			-2.007128614422873e-7,
			0.9999999999999782
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			3.4906582513372053e-8,
			-7.85398198699383e-8,
			-1.745329480939791e-8,
			0.9999999999999961
		],
		"special04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-2.4434609713350654e-7,
			3.490659838956134e-8,
			6.10865171779226e-8,
			0.9999999999999677
		],
		"metacarpal2.R": [
			-1.745329036850763e-8,
			6.108652417236016e-8,
			-2.6179940881831788e-8,
			0.9999999999999974
		],
		"temporalis01.R": [
			-8.726643407896923e-9,
			7.85398198699383e-8,
			-3.490658428972874e-8,
			0.9999999999999962
		],
		"toe5-1.L": [
			8.726644740164582e-9,
			-2.6179939993653534e-8,
			-4.363322858580427e-8,
			0.9999999999999988
		],
		"risorius02.R": [
			-5.23598799873068e-8,
			3.4906584733818136e-8,
			-8.726647848788919e-9,
			0.9999999999999982
		],
		"special05.L": [
			8.726646072432198e-9,
			8.726645672751943e-8,
			8.16224901721429e-16,
			0.9999999999999961
		],
		"finger2-2.L": [
			0.048091495853094086,
			-0.03133790599041386,
			-0.029491696933879274,
			0.997915519213279
		],
		"foot.L": [
			8.726646072432215e-9,
			-4.440892098500626e-16,
			6.108652437680207e-8,
			0.9999999999999982
		],
		"toe3-3.R": [
			-8.726646516521423e-9,
			-8.726646294476836e-9,
			-5.235987998730662e-8,
			0.9999999999999984
		],
		"levator06.R": [
			8.726646072432212e-9,
			6.661338147750939e-16,
			-4.363322873131176e-8,
			0.9999999999999994
		],
		"orbicularis03.R": [
			-8.726645628343061e-9,
			8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"levator06.L": [
			4.363322858580414e-8,
			1.7453293810199e-8,
			-4.3633228585804126e-8,
			0.9999999999999982
		],
		"orbicularis03.L": [
			1.745329303304289e-8,
			-2.6179940104675836e-8,
			1.745329125668605e-8,
			0.9999999999999996
		],
		"foot.R": [
			4.363323036216091e-8,
			-2.6179941881032676e-8,
			4.363322680944725e-8,
			0.9999999999999978
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			7.853981642824635e-8,
			2.61799294465348e-8,
			1.3089969286281315e-7,
			0.9999999999999882
		],
		"risorius02.L": [
			8.72664651652143e-9,
			-3.490658451177353e-8,
			1.745329214486445e-8,
			0.9999999999999992
		],
		"special05.R": [
			-8.72664562834299e-9,
			-6.981316835741325e-8,
			8.726646516521431e-9,
			0.9999999999999971
		],
		"lowerleg02.L": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"tongue05.L": [
			-3.490658428972886e-8,
			-4.440892098500626e-16,
			-1.7453292072804558e-8,
			0.9999999999999993
		],
		"finger5-1.L": [
			0.06657915646613774,
			-0.0717748228122862,
			-0.2379118312284291,
			0.9663402875261166
		],
		"toe4-3.R": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"wrist.R": [
			0.1300094450964138,
			-0.03302983545381433,
			-0.011384576963621494,
			0.9908970509406998
		],
		"toe4-3.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"finger3-3.L": [
			0.05294297277569233,
			-0.041126076788211896,
			-0.06167723377313597,
			0.9958421593183209
		],
		"tongue05.R": [
			-3.490658428972884e-8,
			-8.726645517320719e-9,
			1.7453292144864436e-8,
			0.9999999999999991
		],
		"lowerleg02.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"shoulder01.R": [
			-0.0015296201266894083,
			0.0005393533646340654,
			0.02675703545871724,
			0.9996406506408575
		],
		"finger3-1.L": [
			0.05971172659062661,
			-0.0426004192115661,
			-0.07534095542158728,
			0.9944563612480577
		],
		"special06.R": [
			-8.72664651652144e-9,
			-1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"finger4-3.L": [
			0.1349317182386293,
			-0.09131511782291124,
			-0.22652949722448884,
			0.9602808795125413
		],
		"finger3-2.L": [
			0.14830719864793576,
			-0.11841819116471264,
			-0.17016382921269702,
			0.9669676199636421
		],
		"upperarm01.R": [
			-0.000005148833728146426,
			-0.0000022141510939155395,
			0.2271831122910168,
			0.9738520593284972
		],
		"finger3-2.R": [
			-6.981316857945715e-8,
			-2.6179937440140577e-8,
			3.4906586066083515e-8,
			0.9999999999999967
		],
		"upperarm01.L": [
			-0.000004743897332721034,
			0.0000022284154077567564,
			-0.21437684864004336,
			0.9767510259731972
		],
		"special06.L": [
			-1.745329303304288e-8,
			1.7453293144065185e-8,
			3.490658428972881e-8,
			0.9999999999999989
		],
		"finger3-1.R": [
			0.05029205700394448,
			0.03587873559021426,
			0.06345669675413784,
			0.9960706164583981
		],
		"shoulder01.L": [
			-4.8913828459258096e-8,
			0.0006932761104666563,
			-0.014575133539131643,
			0.9998935367580635
		],
		"lowerarm01.R": [
			0.1757575635489627,
			-0.13642193261639324,
			0.008028949095744827,
			0.9749019802692772
		],
		"special03": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"upperarm02.L": [
			-8.726641187450837e-9,
			7.85398198699383e-8,
			-6.108652428338194e-8,
			0.999999999999995
		],
		"spine02": [
			-0.01365348735127807,
			-1.1102230246251565e-16,
			-4.930380657631324e-32,
			0.9999067867972236
		],
		"spine03": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"spine01": [
			-0.01010686399215855,
			0,
			0,
			0.9999489243457608
		],
		"upperarm02.R": [
			-8.726642075629366e-9,
			-1.483529815660134e-7,
			2.6179940881831583e-8,
			0.9999999999999888
		],
		"spine04": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			0.17436876310356386,
			0.11613818147978228,
			-0.0014612630969630183,
			0.9778063826578673
		],
		"finger5-3.L": [
			0.08987405394819983,
			-0.10168060753533337,
			-0.3057516626331417,
			0.9423903805086465
		],
		"oris01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"oris05": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"risorius03.R": [
			-1.7453291256686047e-8,
			3.4906584289728926e-8,
			-1.745329303304288e-8,
			0.999999999999999
		],
		"finger2-3.L": [
			-0.008259031841369006,
			0.005707868111971992,
			0.004798558723811813,
			0.9999380893179507
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"finger3-3.R": [
			4.363322858580419e-8,
			-2.6179939660586626e-8,
			8.7266447401649e-9,
			0.9999999999999984
		],
		"finger2-3.R": [
			0.08735127196175631,
			0.06036580936867164,
			0.05075103775367347,
			0.9930508831438868
		],
		"toe3-3.L": [
			0,
			0,
			-6.981316857945735e-8,
			0.9999999999999976
		],
		"risorius03.L": [
			-5.235987998730676e-8,
			1.7453290479529926e-8,
			-2.6179940881831593e-8,
			0.9999999999999982
		]
	},
	"standing03": {
		"toe1-1.L": [
			1.745329214486445e-8,
			1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"finger5-2.R": [
			0.036188674921094385,
			0.04387858936015099,
			0.12022915957879521,
			0.9911155323120489
		],
		"finger4-2.R": [
			0.05815549132770065,
			0.04450095097568196,
			0.09312178915677795,
			0.9929581746352331
		],
		"toe5-2.R": [
			-4.3633228585804305e-8,
			-8.726642075629343e-9,
			8.726645717159766e-8,
			0.9999999999999951
		],
		"toe4-2.R": [
			2.6179939993653527e-8,
			8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"clavicle.R": [
			-0.0021221146332568845,
			-0.0618705784606125,
			0.03421322692134622,
			0.9974953550037519
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			0.02026816864450511,
			-2.220446049250313e-16,
			-3.944304526105059e-31,
			0.9997945795711224
		],
		"neck01": [
			0.04642494335138631,
			0.0011656554896644078,
			-0.010270275049750671,
			0.9988683032975383
		],
		"clavicle.L": [
			-0.003560656675289487,
			0.06684457882156447,
			-0.05307297503003078,
			0.9963445103615867
		],
		"toe5-2.L": [
			-2.617993555276154e-8,
			4.3633224922068337e-8,
			-1.0471975997460876e-7,
			0.9999999999999932
		],
		"toe4-2.L": [
			-5.2359879987306664e-8,
			-2.6179942214099583e-8,
			-2.6179938217290193e-8,
			0.9999999999999982
		],
		"finger5-2.L": [
			0.05284969301459374,
			-0.06408246105756676,
			-0.17558122362600392,
			0.980954424039702
		],
		"finger1-3.L": [
			-1.7453291434320922e-7,
			1.7453292144864463e-8,
			-3.038100716026548e-15,
			0.9999999999999847
		],
		"toe1-1.R": [
			-3.490658428972892e-8,
			-8.726643851986182e-9,
			6.981316857945966e-8,
			0.9999999999999969
		],
		"oculi02.L": [
			-1.0471975642189716e-7,
			4.363321837175249e-8,
			-9.599311212582244e-8,
			0.9999999999999891
		],
		"oculi01.L": [
			-1.1344639005983205e-7,
			1.3962633038655525e-7,
			-5.235989597451681e-8,
			0.9999999999999825
		],
		"jaw": [
			4.3633228585804185e-8,
			4.440892098500626e-16,
			-8.72664605333848e-9,
			0.999999999999999
		],
		"finger1-3.R": [
			-6.981316857945679e-8,
			6.108652439440476e-8,
			-1.745329658575782e-8,
			0.9999999999999958
		],
		"oculi01.R": [
			-3.490659672422714e-8,
			6.981317557386291e-8,
			1.6580627004711769e-7,
			0.9999999999999832
		],
		"oculi02.R": [
			4.363322858580409e-8,
			8.726649070034398e-9,
			-6.981316857945727e-8,
			0.9999999999999963
		],
		"wrist.R": [
			0.13001157503950356,
			-0.03302986281032161,
			-0.011384716313359175,
			0.9908967689688686
		],
		"finger1-1.L": [
			-0.06419735291844,
			-0.028312644362130546,
			0.24933486166341776,
			0.9658722590522895
		],
		"tongue07.R": [
			-8.726649625145942e-9,
			-2.617994077080965e-8,
			-1.3962633715892153e-7,
			0.9999999999999896
		],
		"eye.R": [
			-4.363323036216098e-8,
			2.617994254716649e-8,
			6.108652428338111e-8,
			0.999999999999997
		],
		"finger2-1.R": [
			0.08148229813850388,
			-0.08019712974657145,
			-0.046506769212392086,
			0.9923538561863431
		],
		"finger4-3.R": [
			0.02453147051300016,
			0.016600711539097368,
			0.041185438383127514,
			0.9987123624928529
		],
		"finger2-1.L": [
			-5.235988176366369e-8,
			-6.981316869048015e-8,
			-1.7453288592150754e-8,
			0.9999999999999962
		],
		"eye.L": [
			8.726645628343007e-9,
			-8.726645517320719e-9,
			-5.235987998730687e-8,
			0.9999999999999987
		],
		"tongue07.L": [
			6.108652428338226e-8,
			-2.6179941547965768e-8,
			2.6179938217296582e-8,
			0.9999999999999972
		],
		"wrist.L": [
			0.07315668123399884,
			0.05015435600954876,
			0.012646392205461578,
			0.995978267497981
		],
		"finger5-3.R": [
			-4.363323746758792e-8,
			-7.853982364469658e-8,
			-1.0471975642189932e-7,
			0.9999999999999902
		],
		"lowerleg01.R": [
			-0.005499447916396351,
			-0.06017172354940681,
			-0.0022125626467808654,
			0.9981704385145067
		],
		"lowerarm02.L": [
			-5.235987998730684e-8,
			1.7453292144864463e-8,
			-9.583612278589327e-16,
			0.9999999999999983
		],
		"oris07.L": [
			-5.2359871105522824e-8,
			5.235987121654517e-8,
			-1.658062700470163e-7,
			0.9999999999999833
		],
		"oris07.R": [
			1.2217304856676037e-7,
			-1.1344639716526217e-7,
			-8.726659839211736e-9,
			0.999999999999986
		],
		"tongue00": [
			1.483529814549862e-7,
			1.1102230246251565e-16,
			0,
			0.9999999999999891
		],
		"lowerarm02.R": [
			4.363322858580383e-8,
			5.88418203051333e-15,
			-1.308996928761215e-7,
			0.9999999999999905
		],
		"lowerleg01.L": [
			0.10237231185380417,
			0.08851077831605025,
			0.012393995677759752,
			0.9907230393801966
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			-1.0471975997461224e-7,
			-5.235987798890562e-8,
			1.7453297473960726e-8,
			0.9999999999999931
		],
		"metacarpal4.L": [
			6.981318989573818e-8,
			1.9198622436267243e-7,
			-1.0471974576374662e-7,
			0.9999999999999737
		],
		"finger1-2.R": [
			-0.027608083918184746,
			-0.09452738859281307,
			-0.029779277940921365,
			0.9946937021583615
		],
		"pelvis.R": [
			6.108652428338212e-8,
			-8.726645739365324e-9,
			-8.72664651652142e-9,
			0.9999999999999983
		],
		"toe2-1.R": [
			-6.981316857945772e-8,
			1.745329070157453e-8,
			-8.726647404699831e-9,
			0.9999999999999971
		],
		"toe2-3.L": [
			-4.569261529843786e-16,
			1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"toe5-3.L": [
			-1.745329036850753e-8,
			-1.745329059055223e-8,
			9.599310857310997e-8,
			0.9999999999999953
		],
		"levator05.L": [
			-8.726644740164582e-9,
			2.6179939993653534e-8,
			-4.363322858580427e-8,
			0.9999999999999988
		],
		"finger4-1.L": [
			0.07391639466979148,
			-0.04718557188899408,
			-0.13193953011608056,
			0.987371180862231
		],
		"finger4-1.R": [
			-0.001581545278260128,
			0.059886981422010765,
			0.09320803154951457,
			0.9938426993369507
		],
		"levator05.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe5-3.R": [
			-5.235987998730685e-8,
			8.881784197001252e-16,
			1.745329218919785e-8,
			0.9999999999999984
		],
		"toe2-3.R": [
			8.726645184253737e-9,
			-8.72664507323151e-9,
			-1.1344639716525972e-7,
			0.9999999999999937
		],
		"finger4-2.L": [
			0.14458080978508164,
			-0.11063935485677323,
			-0.2315093236986596,
			0.9556457270554586
		],
		"toe2-1.L": [
			-6.108652428338213e-8,
			-1.7453290368507623e-8,
			2.617994088183308e-8,
			0.9999999999999974
		],
		"finger1-2.L": [
			0.12053542473960271,
			0.017424293237637167,
			0.05643567184680806,
			0.9909503621933906
		],
		"pelvis.L": [
			-5.235987998730684e-8,
			-8.881784197001252e-16,
			-1.7453292120936186e-8,
			0.9999999999999983
		],
		"metacarpal4.R": [
			-2.6179940881831854e-8,
			6.981316869048015e-8,
			8.726644296075452e-9,
			0.9999999999999973
		],
		"tongue04": [
			-7.853981998095985e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"toe3-2.L": [
			3.490658428972882e-8,
			-1.2212453270876722e-15,
			4.3633228605944895e-8,
			0.9999999999999986
		],
		"levator03.R": [
			2.6179942658188842e-8,
			4.363323036216116e-8,
			-5.235987821094656e-8,
			0.9999999999999974
		],
		"upperleg02.R": [
			-0.05616308037018928,
			0.004821278266712747,
			0.06447283655728044,
			0.9963261097780509
		],
		"upperleg02.L": [
			0.04974826268264215,
			0.011703838274786937,
			-0.003833889308908129,
			0.9986858524192996
		],
		"levator03.L": [
			-8.726645717160763e-8,
			8.72664507323151e-9,
			-8.726646960610795e-9,
			0.9999999999999961
		],
		"toe3-2.R": [
			-1.7453293033042833e-8,
			-1.745329292202058e-8,
			-5.235987998730684e-8,
			0.9999999999999982
		],
		"metacarpal3.L": [
			7.853981998095974e-8,
			5.235987998730707e-8,
			4.161946496452462e-15,
			0.9999999999999953
		],
		"tongue01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"breast.L": [
			-8.72664385198621e-9,
			-8.726645750467554e-8,
			2.6179940881831848e-8,
			0.999999999999996
		],
		"temporalis02.R": [
			4.36332339148753e-8,
			-1.7453291467628418e-7,
			2.6179932000049398e-8,
			0.9999999999999835
		],
		"tongue02": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"oris04.R": [
			6.108653138880855e-8,
			-4.363323580225398e-8,
			1.2217304856675862e-7,
			0.9999999999999898
		],
		"oris04.L": [
			3.490658428972886e-8,
			-4.440892098500626e-16,
			1.745329202975935e-8,
			0.9999999999999992
		],
		"temporalis02.L": [
			8.726645717160684e-8,
			-2.6179945544768657e-8,
			6.108652073066889e-8,
			0.9999999999999942
		],
		"breast.R": [
			-2.617994265818882e-8,
			8.726645706058633e-8,
			2.6179937329118314e-8,
			0.9999999999999954
		],
		"oris03.R": [
			-1.745328859215059e-8,
			1.2217304834472031e-7,
			-2.6179941770010175e-8,
			0.9999999999999921
		],
		"oris06.L": [
			-9.90006603036649e-16,
			8.726645961409929e-9,
			1.1344639716525992e-7,
			0.9999999999999937
		],
		"orbicularis04.R": [
			-4.363322858580418e-8,
			-1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"toe1-2.R": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"toe1-2.L": [
			1.7453292144864417e-8,
			1.1102230246251565e-15,
			-6.108652435993826e-8,
			0.9999999999999982
		],
		"orbicularis04.L": [
			6.108652428338216e-8,
			8.726644407097695e-9,
			2.6179940881832314e-8,
			0.9999999999999977
		],
		"metacarpal3.R": [
			-4.363321259859318e-8,
			1.5707963296751615e-7,
			-1.0471976708003597e-7,
			0.9999999999999813
		],
		"oris06.R": [
			-3.807717500373487e-16,
			8.726645961409929e-9,
			4.3633228585804185e-8,
			0.999999999999999
		],
		"levator04.L": [
			6.108652073066846e-8,
			-1.0471975975256953e-7,
			-2.617994621089772e-8,
			0.9999999999999919
		],
		"tongue06.L": [
			-1.745329392122131e-8,
			-2.617994065978735e-8,
			-6.1086524283384e-8,
			0.9999999999999973
		],
		"toe2-2.L": [
			-1.7453291256686037e-8,
			1.7453291034641438e-8,
			-3.4906584289728807e-8,
			0.999999999999999
		],
		"toe2-2.R": [
			8.726646072432225e-9,
			-3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"tongue06.R": [
			2.6179939993653385e-8,
			2.4424906541753444e-15,
			-9.599310857181386e-8,
			0.999999999999995
		],
		"levator04.R": [
			2.617994265818852e-8,
			1.1344639705423987e-7,
			-2.617993732911805e-8,
			0.9999999999999926
		],
		"toe4-1.L": [
			-3.4906584289728793e-8,
			1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"upperleg01.R": [
			0.13130308525442225,
			0.025267811893431857,
			0.05880241057439828,
			0.9892741349067145
		],
		"metacarpal1.R": [
			6.981316857945718e-8,
			1.745329425428821e-8,
			-2.617993910547415e-8,
			0.9999999999999974
		],
		"levator02.R": [
			1.1344637940169565e-7,
			-3.3161254053837297e-7,
			-5.235991729078451e-8,
			0.9999999999999374
		],
		"toe3-1.L": [
			-4.3633228585804086e-8,
			-2.617993932751972e-8,
			1.7453293033042373e-8,
			0.9999999999999989
		],
		"toe3-1.R": [
			-6.108652073066833e-8,
			-2.617993488662762e-8,
			8.726645717160445e-8,
			0.9999999999999941
		],
		"levator02.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"finger5-1.R": [
			-0.07709994747629248,
			0.061706254371687086,
			0.07609128609869972,
			0.9921985952673059
		],
		"metacarpal1.L": [
			-3.4906582513372014e-8,
			2.617993888343051e-8,
			-3.490658606608567e-8,
			0.9999999999999983
		],
		"toe4-1.R": [
			-8.726645717160827e-8,
			1.7453290479529926e-8,
			-1.7453293921221223e-8,
			0.9999999999999961
		],
		"upperleg01.L": [
			-0.1780917185131367,
			-0.06136622228210864,
			-0.10991232221574304,
			0.9759286900101883
		],
		"head": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe5-1.R": [
			-9.599310502039588e-8,
			3.4906572077275655e-8,
			-1.221730485667574e-7,
			0.9999999999999871
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			8.726647404699853e-9,
			-6.981316857945785e-8,
			1.745329125668601e-8,
			0.9999999999999976
		],
		"special04": [
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999987
		],
		"metacarpal2.L": [
			-2.443460971335078e-7,
			-1.7453286038637827e-8,
			2.6179944434498003e-8,
			0.9999999999999695
		],
		"metacarpal2.R": [
			-2.6179943546367226e-8,
			4.363323047318346e-8,
			8.726645717161087e-8,
			0.9999999999999944
		],
		"temporalis01.R": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"toe5-1.L": [
			-1.745329303304289e-8,
			-3.490658440075123e-8,
			-2.617993910547502e-8,
			0.9999999999999988
		],
		"risorius02.R": [
			-2.6179938217296655e-8,
			-2.6179938328318997e-8,
			5.2359879987306704e-8,
			0.999999999999998
		],
		"special05.L": [
			8.376979030217172e-16,
			9.599310846208908e-8,
			-8.726646072432192e-9,
			0.9999999999999953
		],
		"finger2-2.L": [
			0.04809230458538344,
			-0.03133785881689455,
			-0.029492165709111194,
			0.9979154678660042
		],
		"foot.L": [
			0.038836558812633745,
			-0.0793774233514305,
			0.10623626442739396,
			0.9904063824926584
		],
		"toe3-3.R": [
			-1.7453291256686047e-8,
			-3.4906584289728926e-8,
			1.745329303304288e-8,
			0.999999999999999
		],
		"levator06.R": [
			-2.831068712794149e-15,
			-5.235987998730707e-8,
			-5.235987998730679e-8,
			0.9999999999999973
		],
		"orbicularis03.R": [
			-5.235987998730672e-8,
			2.6179938550363602e-8,
			-2.617994177001015e-8,
			0.9999999999999981
		],
		"levator06.L": [
			4.36332285858041e-8,
			8.72664829287828e-9,
			-5.235987998730687e-8,
			0.9999999999999976
		],
		"orbicularis03.L": [
			-1.7453291256686003e-8,
			-5.235987976526246e-8,
			8.726646960611257e-9,
			0.9999999999999984
		],
		"foot.R": [
			-0.08806158880513025,
			-0.023275220199938218,
			-0.11021181927317868,
			0.9897256062132863
		],
		"root": [
			0.005100607492815333,
			0.000047098685043489574,
			-0.009235132485445129,
			0.9999443454077301
		],
		"finger2-2.R": [
			2.0943951284378548e-7,
			8.726643940804024e-8,
			8.72664749351744e-8,
			0.9999999999999705
		],
		"risorius02.L": [
			-5.23598799873067e-8,
			-6.108652450542706e-8,
			3.384421543835748e-15,
			0.999999999999997
		],
		"special05.R": [
			-3.4906578960658666e-8,
			-8.726645372991726e-8,
			5.2359883540022255e-8,
			0.9999999999999942
		],
		"lowerleg02.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"tongue05.L": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"finger5-1.L": [
			0.06657982657369163,
			-0.071773988514225,
			-0.23791489778381444,
			0.9663395483362431
		],
		"toe4-3.R": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"oris03.L": [
			-1.7453296585756555e-8,
			-5.235988187468621e-8,
			-7.853981998095855e-8,
			0.9999999999999953
		],
		"toe4-3.L": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger3-3.L": [
			0.052943766288761414,
			-0.041126045864011584,
			-0.06167823887189581,
			0.9958420561577088
		],
		"tongue05.R": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"lowerleg02.R": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"shoulder01.R": [
			3.490658428972879e-8,
			3.490658451177353e-8,
			1.745329303304293e-8,
			0.9999999999999987
		],
		"finger3-1.L": [
			0.05971256343159407,
			-0.0426004090703862,
			-0.07534210476626615,
			0.9944562243582432
		],
		"special06.R": [
			-8.726646516521448e-9,
			-8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"finger4-3.L": [
			0.13493340794396358,
			-0.09131377593203394,
			-0.226532372070392,
			0.9602800915096718
		],
		"finger3-2.L": [
			0.1483089728218164,
			-0.11841747590122254,
			-0.1701664225677635,
			0.9669669790702318
		],
		"upperarm01.R": [
			0.004287311784897426,
			-0.000373953789518211,
			0.15809263231355214,
			0.9874149070802987
		],
		"finger3-2.R": [
			0.0233833682913541,
			0.018670199022689626,
			0.026830419866425773,
			0.9991920587782889
		],
		"upperarm01.L": [
			0.0001254576976089777,
			-0.0039661435996181105,
			-0.12879903220959524,
			0.9916627769898314
		],
		"special06.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"finger3-1.R": [
			0.040134667970505376,
			0.028631897481148694,
			0.05064054989876471,
			0.9974993521699536
		],
		"shoulder01.L": [
			1.1344639716525987e-7,
			2.6179941881032676e-8,
			-1.7453289480329958e-8,
			0.9999999999999931
		],
		"lowerarm01.R": [
			0.17576018478934424,
			-0.13642239637261544,
			0.008028441282294877,
			0.9749014469890511
		],
		"special03": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"upperarm02.L": [
			-1.7453291256686e-8,
			8.726644518119997e-9,
			-6.981316857945704e-8,
			0.9999999999999974
		],
		"spine02": [
			-0.03697669074936667,
			-0.0034628759769375073,
			0.03314359935944181,
			0.9987603489589957
		],
		"spine03": [
			-0.03351356966214698,
			0.00032334522282317923,
			0.04074970091683792,
			0.9986071289408841
		],
		"spine01": [
			0.017511551635540697,
			0.002917857601094198,
			-0.019053879649992306,
			0.999660833151234
		],
		"upperarm02.R": [
			-2.617994798725951e-8,
			-7.853982364469658e-8,
			-1.0471975642189552e-7,
			0.9999999999999911
		],
		"spine04": [
			3.454145168148883e-8,
			0.0020016050606387337,
			-0.008495889986294053,
			0.9999619059896838
		],
		"spine05": [
			-7.021807794617627e-9,
			-0.025264763886458597,
			-0.05225109144198663,
			0.9983143368443038
		],
		"lowerarm01.L": [
			0.1743713078143462,
			0.11613859474714727,
			-0.0014607802294091161,
			0.9778058805010296
		],
		"finger5-3.L": [
			0.08987505425611078,
			-0.10167881756119179,
			-0.3057549838497615,
			0.9423894006899968
		],
		"oris01": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			7.853981998095985e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"oris05": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"risorius03.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"finger2-3.L": [
			-0.008259284902162843,
			0.005707878575130332,
			0.004798610079521991,
			0.9999380869215759
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"finger3-3.R": [
			6.981316857945727e-8,
			-8.726648403900583e-9,
			3.490658428972855e-8,
			0.9999999999999969
		],
		"finger2-3.R": [
			0.08735259573549614,
			0.06036571210136443,
			0.050751855697848035,
			0.9930507308108643
		],
		"toe3-3.L": [
			-1.745329214486448e-8,
			8.72664507323151e-9,
			-4.36332285858036e-8,
			0.9999999999999989
		],
		"risorius03.L": [
			-1.3962633715891144e-7,
			-6.328271240363392e-15,
			-4.3633228590372446e-8,
			0.9999999999999892
		]
	},
	"standing01": {
		"toe1-1.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"finger5-2.R": [
			0.030899808494936138,
			0.0380658768618487,
			0.10360847635337625,
			0.9934090167103615
		],
		"finger1-3.R": [
			-1.483529743495583e-7,
			-7.853981243144403e-8,
			5.2359892421806756e-8,
			0.9999999999999845
		],
		"toe5-2.R": [
			-4.363322680944719e-8,
			2.6179938550363602e-8,
			-3.4906586066085474e-8,
			0.9999999999999981
		],
		"toe4-2.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"clavicle.R": [
			0.0013364484152596425,
			0.005143550568339705,
			0.04292458641703618,
			0.9990641809584158
		],
		"neck03": [
			-0.00016592844925022453,
			-0.000001045439677049842,
			0.000010594322416027242,
			0.9999999861772084
		],
		"neck02": [
			-0.012375202292394624,
			0.02434863821633937,
			-0.0010046344270071938,
			0.9996264246681857
		],
		"neck01": [
			0.028365441488906806,
			-0.08125376494693792,
			0.010383179934847636,
			0.9962356232265175
		],
		"clavicle.L": [
			0.004642807489156238,
			-0.043253053515849293,
			-0.056129444006922234,
			0.9974753647161655
		],
		"toe5-2.L": [
			-5.235988176366347e-8,
			-1.7453294809399722e-8,
			-5.2359878210949805e-8,
			0.9999999999999972
		],
		"toe4-2.L": [
			-8.726649625145837e-9,
			-3.490658440075123e-8,
			-9.599310857311068e-8,
			0.9999999999999948
		],
		"finger5-2.L": [
			0.004431381798732694,
			-0.0059716482370335555,
			-0.015759557006888105,
			0.9998481577897884
		],
		"finger1-3.L": [
			-1.308996928628367e-7,
			4.363322381184531e-8,
			-3.4906589618800476e-8,
			0.9999999999999905
		],
		"toe1-1.R": [
			3.490658428972878e-8,
			-1.7453292810998278e-8,
			3.4906584289728793e-8,
			0.9999999999999987
		],
		"oculi02.L": [
			-8.726644296075311e-8,
			1.7453290757085682e-7,
			-7.853983419181213e-8,
			0.9999999999999781
		],
		"oculi01.L": [
			-1.3962633715891112e-7,
			8.726657063640175e-9,
			7.853981998093215e-8,
			0.9999999999999871
		],
		"jaw": [
			2.6179939993653507e-8,
			4.440892098500626e-16,
			-1.745329219192525e-8,
			0.9999999999999997
		],
		"finger4-2.R": [
			0.03042693073915627,
			0.02818646393724833,
			0.056675827451951766,
			0.9975307392352102
		],
		"oculi01.R": [
			1.7453290368507637e-8,
			5.235988020935167e-8,
			3.490658606608566e-8,
			0.9999999999999979
		],
		"oculi02.R": [
			-7.853981998095921e-8,
			-6.108652395031555e-8,
			1.7453296585758527e-8,
			0.9999999999999947
		],
		"oris03.L": [
			2.617993466458322e-8,
			-6.981316513776648e-8,
			-7.85398235336732e-8,
			0.9999999999999939
		],
		"finger1-1.L": [
			0.19383101059351107,
			0.13223703502035267,
			-0.19000507859492818,
			0.9533315142223397
		],
		"tongue07.R": [
			-2.741556812027136e-15,
			-3.490658440075123e-8,
			-7.853981998096012e-8,
			0.9999999999999963
		],
		"eye.R": [
			5.235988176366353e-8,
			-2.6179941881032676e-8,
			3.49065825133716e-8,
			0.9999999999999977
		],
		"finger2-1.R": [
			-3.490658606608569e-8,
			5.235987998730707e-8,
			1.7453290368507845e-8,
			0.9999999999999979
		],
		"finger4-3.R": [
			0.016207731241858085,
			0.0157589395122536,
			0.03580194795319432,
			0.9991031907646964
		],
		"finger2-1.L": [
			0.10137101289149374,
			-0.11694643258016313,
			-0.09966429978547582,
			0.9829112253913862
		],
		"eye.L": [
			8.72664607243223e-9,
			1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"tongue07.L": [
			5.2359881763663464e-8,
			-3.4906586066085765e-8,
			2.617993821729546e-8,
			0.9999999999999978
		],
		"wrist.L": [
			0.08530757042310609,
			0.004298034488229074,
			-0.01366528358045436,
			0.9962516777163847
		],
		"finger5-3.R": [
			0.03833421829492074,
			0.042953752073719764,
			0.1286988207892382,
			0.9900111496432584
		],
		"lowerleg01.R": [
			1.745329214486444e-8,
			4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"lowerarm02.L": [
			0.047327918804456755,
			-0.04808534422334254,
			0.06293774761048265,
			0.995734255561332
		],
		"oris07.L": [
			-1.745329392122126e-8,
			7.853982053607211e-8,
			1.7453290368507604e-8,
			0.9999999999999972
		],
		"oris07.R": [
			8.726644740164637e-9,
			6.981316869048015e-8,
			1.7453293033042856e-8,
			0.9999999999999973
		],
		"tongue00": [
			1.0471975997461224e-7,
			-2.6179939660586626e-8,
			-8.726648736968678e-9,
			0.9999999999999946
		],
		"lowerarm02.R": [
			0.047327885234650216,
			0.048085346005217855,
			-0.06293782166355276,
			0.9957342523901748
		],
		"lowerleg01.L": [
			0.18267209429729658,
			0.016733296788396412,
			-0.001076769904772114,
			0.9830308964168941
		],
		"tongue03": [
			-2.6179939993653507e-8,
			-4.440892098500626e-16,
			-1.745329219192525e-8,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.19383093404324103,
			-0.13223702798979742,
			0.19000501628257674,
			0.9533315431809692
		],
		"metacarpal4.L": [
			5.235988886909173e-8,
			1.2217305589423688e-7,
			-7.853981287553083e-8,
			0.9999999999999883
		],
		"finger1-2.R": [
			-0.05228218565385612,
			-0.06828965895932826,
			-0.04986307614265355,
			0.9950461140972645
		],
		"pelvis.R": [
			1.078420144080877e-7,
			-5.122005586333245e-8,
			-0.08502065652545712,
			0.9963791888452739
		],
		"toe2-1.R": [
			-3.490658428972882e-8,
			8.726645850387627e-9,
			-1.7453292144864483e-8,
			0.9999999999999989
		],
		"toe2-3.L": [
			-8.726644740164572e-9,
			4.363322858580432e-8,
			-3.4906584289728966e-8,
			0.9999999999999982
		],
		"toe5-3.L": [
			-2.6179941770010237e-8,
			-6.981316891252476e-8,
			-2.6179938217296602e-8,
			0.9999999999999973
		],
		"levator05.L": [
			-3.4906584289728807e-8,
			8.726644851186904e-9,
			-3.49065842897288e-8,
			0.9999999999999984
		],
		"finger4-1.L": [
			0.030899165454971796,
			-0.025015095156444067,
			-0.06184622279098659,
			0.9972936033661239
		],
		"finger4-1.R": [
			0.11071976553306234,
			0.0761622180041096,
			0.20306201598614895,
			0.969900132865564
		],
		"levator05.R": [
			1.7453291256685845e-8,
			-1.483529816770357e-7,
			-8.726648736967626e-9,
			0.999999999999989
		],
		"toe5-3.R": [
			-4.3633228585804066e-8,
			-1.7453290479529926e-8,
			3.490658428972878e-8,
			0.9999999999999984
		],
		"toe2-3.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.0304269084340095,
			-0.028186414610548716,
			-0.056675790575551985,
			0.9975307434045263
		],
		"toe2-1.L": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"finger1-2.L": [
			-0.05228221555210821,
			0.0682895829885728,
			0.0498630766092475,
			0.9950461177167974
		],
		"pelvis.L": [
			-8.090525373261067e-8,
			-4.80507783562345e-8,
			-0.05715409735971718,
			0.9983653685675337
		],
		"metacarpal4.R": [
			-2.617993821729672e-8,
			-5.235987843299483e-8,
			3.490658606608563e-8,
			0.999999999999998
		],
		"tongue04": [
			8.726645717160759e-8,
			-8.726646294476836e-9,
			-7.456576877019395e-16,
			0.9999999999999962
		],
		"toe3-2.L": [
			-8.72664651652145e-9,
			8.726646627543744e-9,
			2.6179939993653484e-8,
			0.9999999999999996
		],
		"levator03.R": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"upperleg02.R": [
			0.0003733625804871215,
			0.0007014879696777276,
			0.03140417580377144,
			0.9995064513334057
		],
		"upperleg02.L": [
			0.0007294082559735764,
			-0.0013705140694401097,
			-0.06134818768688055,
			0.9981152185606214
		],
		"levator03.L": [
			-8.726645717160764e-8,
			1.7453286704771642e-8,
			-6.108652428337993e-8,
			0.9999999999999943
		],
		"toe3-2.R": [
			8.726645184253838e-9,
			-1.7453291034641438e-8,
			-5.235987998730675e-8,
			0.9999999999999989
		],
		"metacarpal3.L": [
			5.235987998730669e-8,
			-8.726647959811373e-9,
			3.4906584289728886e-8,
			0.9999999999999979
		],
		"tongue01": [
			0.0000013788101114147818,
			-3.490657229932026e-8,
			-8.726694032855145e-9,
			0.9999999999990491
		],
		"breast.L": [
			-3.490658251337196e-8,
			-2.6179938106274392e-8,
			4.3633230362161005e-8,
			0.999999999999998
		],
		"temporalis02.R": [
			8.726651845592067e-9,
			-1.3089969297386261e-7,
			4.3633226809447e-8,
			0.9999999999999906
		],
		"tongue02": [
			-5.235987998730684e-8,
			1.7453292144864463e-8,
			-9.583612278589327e-16,
			0.9999999999999983
		],
		"oris04.R": [
			5.2359878210949924e-8,
			2.6179936440939855e-8,
			6.981316857945873e-8,
			0.9999999999999958
		],
		"oris04.L": [
			4.36332285858041e-8,
			-8.726644740164602e-9,
			-3.490658428972879e-8,
			0.9999999999999982
		],
		"temporalis02.L": [
			4.363323213851767e-8,
			5.2359882096730814e-8,
			-5.235987821095056e-8,
			0.9999999999999963
		],
		"breast.R": [
			-1.7453291256686053e-8,
			3.4906584178706623e-8,
			-2.6179940881831874e-8,
			0.9999999999999988
		],
		"oris03.R": [
			6.108651717795459e-8,
			5.2359871327567475e-8,
			1.3962633715887624e-7,
			0.999999999999987
		],
		"oris06.L": [
			-2.6179939993653507e-8,
			8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"orbicularis04.R": [
			4.363322858580418e-8,
			1.7453292144864463e-8,
			7.615435000746977e-16,
			0.9999999999999989
		],
		"toe1-2.R": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe1-2.L": [
			5.2359878210949785e-8,
			1.745328970237381e-8,
			5.235988176366349e-8,
			0.9999999999999972
		],
		"orbicularis04.L": [
			8.726645717160763e-8,
			8.72664507323151e-9,
			8.726646960610795e-9,
			0.9999999999999961
		],
		"metacarpal3.R": [
			-1.7453278822188343e-8,
			7.853981609518002e-8,
			-1.745329143431767e-7,
			0.9999999999999818
		],
		"oris06.R": [
			7.853981998095982e-8,
			-2.617994065978735e-8,
			8.726643851984822e-9,
			0.9999999999999962
		],
		"levator04.L": [
			1.7453297473935272e-8,
			-1.570796401839658e-7,
			3.490658073701469e-8,
			0.9999999999999871
		],
		"tongue06.L": [
			-8.726646516521448e-9,
			-8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"toe2-2.L": [
			1.7453293033042846e-8,
			-8.726647071632954e-9,
			5.235987998730684e-8,
			0.9999999999999984
		],
		"toe2-2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"tongue06.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"levator04.R": [
			5.235988709273409e-8,
			1.2217304856676492e-7,
			-5.235987288187946e-8,
			0.9999999999999899
		],
		"toe4-1.L": [
			3.490658251337205e-8,
			4.363322680944748e-8,
			3.49065860660859e-8,
			0.9999999999999978
		],
		"upperleg01.R": [
			0.0007932753638957078,
			-0.013394871720656454,
			0.13540230350332172,
			0.9906998356373028
		],
		"metacarpal1.R": [
			5.2359879987306704e-8,
			3.4906584733818136e-8,
			-8.726644296075637e-9,
			0.9999999999999982
		],
		"levator02.R": [
			7.853981642824552e-8,
			-7.853981653926922e-8,
			-6.10865313888095e-8,
			0.9999999999999922
		],
		"toe3-1.L": [
			8.726647404699818e-9,
			-3.490658451177353e-8,
			4.363322858580417e-8,
			0.9999999999999984
		],
		"toe3-1.R": [
			-7.853981998095946e-8,
			-8.72664329687467e-9,
			3.4906584289735775e-8,
			0.9999999999999963
		],
		"levator02.L": [
			5.235987998730667e-8,
			4.440892098500626e-15,
			-8.726645717319424e-8,
			0.999999999999995
		],
		"finger5-1.R": [
			0.06612191555558079,
			0.07127710933273157,
			0.2362683751712416,
			0.9668116263587091
		],
		"metacarpal1.L": [
			4.3633225033090315e-8,
			-5.235987876606174e-8,
			-5.235988176366364e-8,
			0.9999999999999968
		],
		"toe4-1.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"upperleg01.L": [
			-0.16940393375034676,
			0.01576121704016542,
			-0.01012566739808149,
			0.9853686427561336
		],
		"head": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"toe5-1.R": [
			-3.490658251337199e-8,
			2.6179938217296694e-8,
			-5.2359881763663814e-8,
			0.9999999999999973
		],
		"special01": [
			-2.6179939993653527e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"temporalis01.L": [
			-3.4906582513372014e-8,
			2.617993888343051e-8,
			-3.490658606608567e-8,
			0.9999999999999983
		],
		"special04": [
			1.7453292144864453e-8,
			-2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-1.3089969286283653e-7,
			-9.992007221626409e-15,
			-7.853982000838312e-8,
			0.9999999999999881
		],
		"metacarpal2.R": [
			-1.2217304856676233e-7,
			2.6179929113467892e-8,
			-8.726646072436365e-8,
			0.9999999999999885
		],
		"temporalis01.R": [
			-1.7453293033042694e-8,
			-8.72664873696749e-9,
			-1.4835298145498374e-7,
			0.9999999999999888
		],
		"toe5-1.L": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"risorius02.R": [
			-7.853981998095915e-8,
			6.981316891252476e-8,
			8.726640743366316e-9,
			0.9999999999999947
		],
		"special05.L": [
			1.7453291256686047e-8,
			1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"finger2-2.L": [
			0.0627743804428927,
			-0.07445876587662015,
			-0.07171623491412196,
			0.9926590809506978
		],
		"foot.L": [
			0.0032548558854700468,
			-0.041331887574766246,
			0.08046763511589185,
			0.9958945931580948
		],
		"toe3-3.R": [
			8.726646072432217e-9,
			4.440892098500626e-16,
			-6.981316867925081e-8,
			0.9999999999999976
		],
		"levator06.R": [
			2.6179939105475078e-8,
			-1.7453291034641438e-8,
			-3.490658428972863e-8,
			0.9999999999999987
		],
		"orbicularis03.R": [
			6.981316857945734e-8,
			-1.7453290812596833e-8,
			-2.6179940881830544e-8,
			0.9999999999999971
		],
		"levator06.L": [
			8.72664696061061e-9,
			9.59931090172006e-8,
			-8.726645184253729e-9,
			0.999999999999996
		],
		"orbicularis03.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"foot.R": [
			0.002576498400344788,
			0.03271672333759157,
			-0.06369500097343996,
			0.9974296589339207
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			8.726646072432215e-9,
			-4.440892098500626e-16,
			6.108652437680207e-8,
			0.9999999999999982
		],
		"risorius02.L": [
			-4.363322858580413e-8,
			-3.490658440075123e-8,
			1.6405861018266948e-15,
			0.9999999999999987
		],
		"special05.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"lowerleg02.L": [
			-0.015001315069428752,
			0.16415316825779558,
			0.006035264541243805,
			0.9863023235697221
		],
		"tongue05.L": [
			-4.3633230362160886e-8,
			5.235988198570851e-8,
			4.363322680944722e-8,
			0.9999999999999967
		],
		"finger5-1.L": [
			-4.363322858580394e-8,
			1.0471976030768104e-7,
			-4.5897214017174974e-15,
			0.9999999999999939
		],
		"toe4-3.R": [
			2.617994088183183e-8,
			-1.7453294032243605e-8,
			6.98131685794569e-8,
			0.9999999999999971
		],
		"wrist.R": [
			0.06958441120627987,
			-0.028825588946430836,
			0.04840522261865417,
			0.9959839504541251
		],
		"toe4-3.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"finger3-3.L": [
			0.03338546340203577,
			-0.030598675278893595,
			-0.04679951522277168,
			0.9978772155328138
		],
		"tongue05.R": [
			-1.745329214486445e-8,
			8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"lowerleg02.R": [
			-8.726645628343007e-9,
			1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"shoulder01.R": [
			-0.0009481394531087745,
			0.0003342754481470145,
			0.016585091354633222,
			0.9998619524895727
		],
		"finger3-1.L": [
			0.08625105730052662,
			-0.07375785890982922,
			-0.12446323059876183,
			0.9857126546780751
		],
		"special06.R": [
			-2.6179939993653527e-8,
			-4.3633228474782015e-8,
			-8.7266447401645e-9,
			0.9999999999999987
		],
		"finger4-3.L": [
			0.016207756890834653,
			-0.015758974935568992,
			-0.03580192377560013,
			0.9991031906562575
		],
		"finger3-2.L": [
			0.04403099380028894,
			-0.04097627405388515,
			-0.058937786297508774,
			0.9964479684840394
		],
		"upperarm01.R": [
			-0.00759291602886526,
			0.0024783817583315937,
			0.1304586987526545,
			0.9914215718703129
		],
		"finger3-2.R": [
			0.044030982558398886,
			0.04097626725740722,
			0.05893778271058691,
			0.9964479694724412
		],
		"upperarm01.L": [
			-0.014483235647055637,
			-0.004727417074235407,
			-0.24884201411783885,
			0.9684242559037725
		],
		"special06.L": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"finger3-1.R": [
			0.08625110398164537,
			0.07375790975142094,
			0.12446322626496306,
			0.9857126473363144
		],
		"shoulder01.L": [
			0.003060627325086791,
			0.001078983955757229,
			0.053536410440752115,
			0.9985606246548675
		],
		"lowerarm01.R": [
			-0.1899821393525905,
			0.20635524645281966,
			0.0003709211951393075,
			0.9598563233140035
		],
		"special03": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"upperarm02.L": [
			-0.13006155184899168,
			0.14656064729596396,
			-0.002406213583508523,
			0.9806111255390749
		],
		"spine02": [
			-0.024777414480179238,
			-0.001965131163890632,
			-0.02916201369763971,
			0.9992656278228954
		],
		"spine03": [
			1.1305956675271007e-8,
			2.79321375584729e-7,
			-0.009237809088198315,
			0.9999573305312439
		],
		"spine01": [
			-4.4241535623038096e-8,
			-0.00416169438734848,
			0.03076796461680833,
			0.9995178901116096
		],
		"upperarm02.R": [
			3.49065860660857e-8,
			-4.363323047318346e-8,
			2.6179938217296602e-8,
			0.999999999999998
		],
		"spine04": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			0.1807049419952574,
			0.11649672487495877,
			-0.012440234568704212,
			0.9765344221253927
		],
		"finger5-3.L": [
			0.011286046235334728,
			-0.012419417199208582,
			-0.03672960682684526,
			0.9991843269483118
		],
		"oris01": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"oris02": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"oris05": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"risorius03.R": [
			1.5992415089755425e-15,
			-6.108652450542706e-8,
			2.6179939993653454e-8,
			0.9999999999999977
		],
		"finger2-3.L": [
			0.05646622834127268,
			-0.058824184051631256,
			-0.056739959158290706,
			0.9950536957683674
		],
		"oris06": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger3-3.R": [
			0.033385413125653414,
			0.03059864181561045,
			0.04679958400265899,
			0.997877215015278
		],
		"finger2-3.R": [
			4.363323036216091e-8,
			-3.490658628813037e-8,
			5.235987821094999e-8,
			0.9999999999999974
		],
		"toe3-3.L": [
			-8.72664696061064e-9,
			-8.726647071632954e-9,
			-7.853981998095982e-8,
			0.9999999999999969
		],
		"risorius03.L": [
			-2.967059629099436e-7,
			3.4906566193093624e-8,
			-6.108653494094835e-8,
			0.9999999999999536
		]
	},
	"standing06": {
		"toe1-1.L": [
			3.490658251337197e-8,
			-3.4906582846438994e-8,
			-2.6179940881831884e-8,
			0.9999999999999984
		],
		"finger5-2.R": [
			0.036188287794827814,
			0.04387864109000661,
			0.12022719531764225,
			0.9911157824334283
		],
		"finger1-3.R": [
			-2.094395270546385e-7,
			1.047197671910638e-7,
			3.490656297365645e-8,
			0.9999999999999718
		],
		"toe5-2.R": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"toe4-2.R": [
			1.1423153030516055e-15,
			-4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"clavicle.R": [
			-0.002983784078132612,
			0.0046049811486491565,
			0.028568192758856057,
			0.9995767852164681
		],
		"neck03": [
			-0.033947786142511656,
			0.08716711029569302,
			0.0004239992373707206,
			0.9956150174255948
		],
		"neck02": [
			-0.01989243927310842,
			-0.02706789157923395,
			0.01855151859501467,
			0.9992634593854812
		],
		"neck01": [
			0.047339178579299555,
			0.12282414181615997,
			0.003614859423635437,
			0.991292169418234
		],
		"clavicle.L": [
			-0.019042997072631258,
			0.15815562285035956,
			-0.06331490402007783,
			0.9851981456297181
		],
		"toe5-2.L": [
			-8.726646516521441e-9,
			-8.726646516521441e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"toe4-2.L": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger5-2.L": [
			0.052849172158083005,
			-0.06408288712674781,
			-0.17557869997389194,
			0.98095487597299
		],
		"finger1-3.L": [
			-2.4434609713350787e-7,
			-8.726652067636564e-9,
			-2.6179938217283936e-8,
			0.9999999999999697
		],
		"toe1-1.R": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"oculi02.L": [
			-3.490657718430158e-8,
			8.726645372991726e-8,
			-7.853982353367374e-8,
			0.9999999999999926
		],
		"oculi01.L": [
			-9.599310857310988e-8,
			2.6179934997649923e-8,
			-5.235988176366031e-8,
			0.9999999999999939
		],
		"jaw": [
			1.7453292144864433e-8,
			2.617994021569814e-8,
			4.927555263958927e-16,
			0.9999999999999996
		],
		"finger4-2.R": [
			0.05815466748744189,
			0.04450110574824717,
			0.09312025949804979,
			0.9929583594026613
		],
		"oculi01.R": [
			8.726639855187211e-9,
			7.8539819758916e-8,
			7.853981998095917e-8,
			0.9999999999999933
		],
		"oculi02.R": [
			6.981316857945728e-8,
			8.726644740164602e-9,
			2.617994088183179e-8,
			0.9999999999999974
		],
		"oris03.L": [
			-2.6179941770010337e-8,
			-5.235988020935167e-8,
			-2.6179938217296668e-8,
			0.999999999999998
		],
		"finger1-1.L": [
			-0.16310383172376436,
			0.08755992299516868,
			0.15419487641152418,
			0.9705433220884788
		],
		"tongue07.R": [
			-8.726649625145859e-9,
			-4.363322858580432e-8,
			-7.85398199809603e-8,
			0.999999999999996
		],
		"eye.R": [
			-4.36332268094474e-8,
			-8.726645706058633e-8,
			1.745329569757789e-8,
			0.999999999999995
		],
		"finger2-1.R": [
			0.08148104994020207,
			-0.08019723976101834,
			-0.046505947014983985,
			0.9923539883164654
		],
		"finger4-3.R": [
			0.024531096599742504,
			0.016600743725516565,
			0.041184813443459506,
			0.9987123969136465
		],
		"finger2-1.L": [
			-7.853981287553213e-8,
			-5.2359871327567475e-8,
			1.0471976352732428e-7,
			0.9999999999999901
		],
		"eye.L": [
			3.4906589618799636e-8,
			6.108652794711844e-8,
			-7.853981642824183e-8,
			0.9999999999999946
		],
		"tongue07.L": [
			6.981316857945724e-8,
			4.3633228918871225e-8,
			3.0766209756393155e-15,
			0.9999999999999969
		],
		"wrist.L": [
			0.0021135344601429444,
			0.14734943129394928,
			-0.018683421065844155,
			0.988905762874659
		],
		"finger5-3.R": [
			-1.7453292144864443e-8,
			-2.6179940104675836e-8,
			-8.726645628343028e-9,
			0.9999999999999997
		],
		"lowerleg01.R": [
			0.6973107183647338,
			-0.06356487412909151,
			-0.004449155104500841,
			0.7139310007623058
		],
		"lowerarm02.L": [
			-1.7453291434320983e-7,
			7.853982730843256e-8,
			4.3633214375019456e-8,
			0.9999999999999807
		],
		"oris07.L": [
			-8.726645361889297e-8,
			6.108651751102201e-8,
			-6.108653138887229e-8,
			0.9999999999999923
		],
		"oris07.R": [
			2.6179938217296665e-8,
			-7.85398198699383e-8,
			-2.617994177001038e-8,
			0.9999999999999958
		],
		"tongue00": [
			1.3089969286283695e-7,
			-4.363323446998635e-8,
			3.490657896067318e-8,
			0.9999999999999905
		],
		"lowerarm02.R": [
			0.07745879601855829,
			0.07869814860123903,
			-0.10300732493599309,
			0.9885323602875239
		],
		"lowerleg01.L": [
			0.0540839020472027,
			0.004930215535515314,
			0.0003452146034457672,
			0.9985241636239951
		],
		"tongue03": [
			-2.617993910547506e-8,
			4.3633228918871225e-8,
			-1.745329303304283e-8,
			0.9999999999999987
		],
		"finger1-1.R": [
			-7.853981642824544e-8,
			-8.726645372991726e-8,
			2.6179947099079058e-8,
			0.9999999999999927
		],
		"metacarpal4.L": [
			-0.08260600576766478,
			0.02472717074119546,
			0.1406627864788613,
			0.986295490884071
		],
		"finger1-2.R": [
			-0.02760765814649784,
			-0.09452724881663377,
			-0.029778725948817645,
			0.9946937437843313
		],
		"pelvis.R": [
			-0.002308971752254623,
			0.006841219990893932,
			0.021466272917933488,
			0.999743499846584
		],
		"toe2-1.R": [
			3.4906584289728793e-8,
			1.7453292366909068e-8,
			-8.72664562834318e-9,
			0.9999999999999996
		],
		"toe2-3.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe5-3.L": [
			-2.6179940881831887e-8,
			-8.726647515722163e-9,
			-5.235987998730685e-8,
			0.9999999999999982
		],
		"levator05.L": [
			9.13852305968756e-16,
			2.6179939993653534e-8,
			-3.4906584289728846e-8,
			0.9999999999999991
		],
		"finger4-1.L": [
			0.07391530706379516,
			-0.04718583936301979,
			-0.13193753781894213,
			0.9873715157221964
		],
		"finger4-1.R": [
			-0.001581427020270122,
			0.059887001591228284,
			0.09320651768249892,
			0.9938428402873837
		],
		"levator05.R": [
			-8.72664740469983e-9,
			-3.490658406768432e-8,
			-3.4906584289728846e-8,
			0.9999999999999984
		],
		"toe5-3.R": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"toe2-3.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"finger4-2.L": [
			0.1445792428872969,
			-0.11064070351122346,
			-0.23150631876382166,
			0.9556465359248165
		],
		"toe2-1.L": [
			0,
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0.9999999999999992
		],
		"finger1-2.L": [
			0.12053351512429364,
			0.017424483907527377,
			0.056434778130547154,
			0.9909506420148753
		],
		"pelvis.L": [
			0.00282434556362032,
			0.008368069547742829,
			0.0262572027391596,
			0.999616205245041
		],
		"metacarpal4.R": [
			-3.4906584289728906e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"tongue04": [
			-8.726645717160764e-8,
			-1.7453293588154395e-8,
			-8.726644740163937e-9,
			0.9999999999999962
		],
		"toe3-2.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"levator03.R": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"upperleg02.R": [
			-0.16500232168737464,
			-0.14183215704491725,
			0.016062527949905047,
			0.9759097644053063
		],
		"upperleg02.L": [
			-0.004376604894427891,
			0.04989724088386194,
			-0.03117547416199821,
			0.9982580831090474
		],
		"levator03.L": [
			-2.6179939993653534e-8,
			4.3633228474782015e-8,
			-8.726647404699778e-9,
			0.9999999999999987
		],
		"toe3-2.R": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"metacarpal3.L": [
			-0.10815989824078272,
			0.05933258425884891,
			0.10955609439322923,
			0.9862953629816033
		],
		"tongue01": [
			-1.7453292144864453e-8,
			2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"breast.L": [
			-8.726645628343025e-9,
			-8.726645517320719e-9,
			2.6179939993653497e-8,
			0.9999999999999994
		],
		"temporalis02.R": [
			3.490658251337171e-8,
			-1.396263370478934e-7,
			-8.726650957413986e-9,
			0.9999999999999895
		],
		"tongue02": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"oris04.R": [
			5.235988354002077e-8,
			-3.4906591506178586e-8,
			1.2217304856674922e-7,
			0.9999999999999907
		],
		"oris04.L": [
			1.7453292144864443e-8,
			-2.220446049250313e-16,
			2.6179940054284205e-8,
			0.9999999999999996
		],
		"temporalis02.L": [
			1.3962633715891176e-7,
			-3.490658939675484e-8,
			4.3633223256717494e-8,
			0.9999999999999886
		],
		"breast.R": [
			-1.2184696001195153e-15,
			6.981316846843555e-8,
			1.745329214486441e-8,
			0.9999999999999974
		],
		"oris03.R": [
			-2.617993555276118e-8,
			1.3089969308488492e-7,
			-3.490658784244214e-8,
			0.9999999999999907
		],
		"oris06.L": [
			-2.6179939993653494e-8,
			-1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"orbicularis04.R": [
			-4.363322858580412e-8,
			-3.4906584178706623e-8,
			8.726647404700103e-9,
			0.9999999999999984
		],
		"toe1-2.R": [
			3.4906584289728827e-8,
			-2.617994121489886e-8,
			2.61799391054727e-8,
			0.9999999999999991
		],
		"toe1-2.L": [
			-1.7453291256686043e-8,
			-1.745329114566374e-8,
			4.363322858580395e-8,
			0.9999999999999986
		],
		"orbicularis04.L": [
			1.1344639716525997e-7,
			1.1102230246251565e-16,
			0,
			0.9999999999999936
		],
		"metacarpal3.R": [
			-6.981315081588933e-8,
			9.599309458430128e-8,
			-1.919862242515674e-7,
			0.9999999999999745
		],
		"oris06.R": [
			-5.235987998730666e-8,
			2.617993932751972e-8,
			-8.726647404699014e-9,
			0.9999999999999984
		],
		"levator04.L": [
			6.108652073066898e-8,
			-1.6580626993611958e-7,
			-1.7453301914824148e-8,
			0.9999999999999841
		],
		"tongue06.L": [
			-3.0461740002987937e-16,
			-8.726646183454534e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"toe2-2.L": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"toe2-2.R": [
			-1.7453293033042856e-8,
			2.6179940992854256e-8,
			4.3633228585804166e-8,
			0.9999999999999986
		],
		"tongue06.R": [
			8.72665451012708e-9,
			7.85398199809606e-8,
			-1.0471975997461302e-7,
			0.9999999999999912
		],
		"levator04.R": [
			3.4906584289728886e-8,
			4.363322880784892e-8,
			-1.7453290368507557e-8,
			0.9999999999999981
		],
		"toe4-1.L": [
			2.6179939993653494e-8,
			6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"upperleg01.R": [
			-0.5243366834521962,
			-0.09021765885696142,
			-0.260320285187356,
			0.805707866125616
		],
		"metacarpal1.R": [
			1.0471975642189813e-7,
			-1.3089969297386261e-7,
			-1.745330546754038e-8,
			0.9999999999999859
		],
		"levator02.R": [
			1.1344638295440527e-7,
			-1.8325956618880923e-7,
			-7.853984129723938e-8,
			0.9999999999999739
		],
		"toe3-1.L": [
			2.617993910547506e-8,
			-4.3633228918871225e-8,
			-1.745329303304283e-8,
			0.9999999999999987
		],
		"toe3-1.R": [
			-2.2846307649218933e-16,
			-2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"levator02.L": [
			5.2359883540020376e-8,
			6.108652783609614e-8,
			-4.3633225033090335e-8,
			0.999999999999996
		],
		"finger5-1.R": [
			-0.07709874275557724,
			0.06170603943801356,
			0.07609014444514996,
			0.9921987898000579
		],
		"metacarpal1.L": [
			-0.12844658099363498,
			0.08300629239744384,
			0.061912277118482795,
			0.9862952403796138
		],
		"toe4-1.R": [
			1.745329214486444e-8,
			8.726646627543744e-9,
			-1.7453292144864436e-8,
			0.9999999999999996
		],
		"upperleg01.L": [
			0.0028265357278175005,
			-0.022013979096570546,
			-0.06974373134742093,
			0.9973180071360658
		],
		"head": [
			5.691620020337746e-8,
			0.1985095127110218,
			-0.007807371919543378,
			0.9800678641333666
		],
		"toe5-1.R": [
			2.6179940881831953e-8,
			3.490658639915267e-8,
			-3.490658251337214e-8,
			0.9999999999999987
		],
		"special01": [
			-2.7755575615628914e-17,
			8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"temporalis01.L": [
			6.108651717795423e-8,
			-1.1344639361254849e-7,
			-6.108653138880847e-8,
			0.9999999999999901
		],
		"special04": [
			-6.108652428338209e-8,
			-3.490658229132748e-8,
			1.7453293921221273e-8,
			0.9999999999999972
		],
		"metacarpal2.L": [
			-0.10684836551994693,
			0.0580609000540937,
			0.11150727436785653,
			0.9862953342856674
		],
		"metacarpal2.R": [
			-7.853982353367302e-8,
			6.981317257626074e-8,
			4.363322325672324e-8,
			0.9999999999999937
		],
		"temporalis01.R": [
			6.39696603590209e-15,
			1.2217304834472031e-7,
			-5.235987998730646e-8,
			0.9999999999999909
		],
		"toe5-1.L": [
			2.6179937329118308e-8,
			-2.6179937218095972e-8,
			-8.72664571716049e-8,
			0.9999999999999958
		],
		"risorius02.R": [
			1.1423153030516055e-15,
			-4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"special05.L": [
			1.7453292144864288e-8,
			1.396263369368711e-7,
			2.4655085297586555e-15,
			0.9999999999999902
		],
		"finger2-2.L": [
			0.0480915552102757,
			-0.031337921804811764,
			-0.029491647519471295,
			0.9979155173164713
		],
		"foot.L": [
			-0.0017015871853770864,
			-0.001876792687510731,
			0.055926254021392764,
			0.9984316883800278
		],
		"toe3-3.R": [
			-8.726646516521423e-9,
			-8.726646294476836e-9,
			-5.235987998730662e-8,
			0.9999999999999984
		],
		"levator06.R": [
			1.7453293033042883e-8,
			1.745329292202058e-8,
			-3.4906584289728793e-8,
			0.9999999999999988
		],
		"orbicularis03.R": [
			-8.726646960610676e-9,
			-5.235988043139628e-8,
			-1.745329125668601e-8,
			0.9999999999999988
		],
		"levator06.L": [
			4.363323036216108e-8,
			2.617994343534491e-8,
			-7.853981998095083e-8,
			0.9999999999999956
		],
		"orbicularis03.L": [
			2.617993999365346e-8,
			3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"foot.R": [
			0.09820592353259745,
			-0.046379665612890864,
			0.044707829314797456,
			0.9930789158967709
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			1.2217304146133288e-7,
			9.599309802599265e-8,
			7.853983063909507e-8,
			0.9999999999999851
		],
		"risorius02.L": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"special05.R": [
			-8.726644296075419e-9,
			-6.981316857945785e-8,
			2.6179940881831808e-8,
			0.9999999999999972
		],
		"lowerleg02.L": [
			-0.013127786322222985,
			0.14364177907675346,
			0.005281716143426395,
			0.9895285766487613
		],
		"tongue05.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"finger5-1.L": [
			0.06657915674226138,
			-0.07177477861825621,
			-0.23791172163194713,
			0.9663403177721154
		],
		"toe4-3.R": [
			-2.6179940881831907e-8,
			3.490658451177353e-8,
			1.7453291256686053e-8,
			0.9999999999999991
		],
		"wrist.R": [
			0.13000952439594268,
			-0.03302978838327297,
			-0.01138453844548942,
			0.9908970425478522
		],
		"toe4-3.L": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"finger3-3.L": [
			0.05294296697474373,
			-0.041126032033441784,
			-0.06167725228896651,
			0.9958421603282217
		],
		"tongue05.R": [
			4.569261529843785e-16,
			-2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"lowerleg02.R": [
			-0.01518355576306962,
			-0.16613838202106224,
			-0.006109132877792282,
			0.9859666202003465
		],
		"shoulder01.R": [
			2.617993999365347e-8,
			-2.6179940437742744e-8,
			8.726645184253845e-9,
			0.9999999999999996
		],
		"finger3-1.L": [
			0.05971174308360721,
			-0.04260043152007553,
			-0.07534094787967222,
			0.9944563603018552
		],
		"special06.R": [
			-3.8077175003734897e-16,
			-4.363322869682662e-8,
			-8.726646072432225e-9,
			0.9999999999999991
		],
		"finger4-3.L": [
			0.13493174613427206,
			-0.09131507102874648,
			-0.22652944530455196,
			0.9602808922904708
		],
		"finger3-2.L": [
			0.14830718001502924,
			-0.11841819032243783,
			-0.17016385646263552,
			0.966967618129228
		],
		"upperarm01.R": [
			-0.014118973518765222,
			0.1035555625738026,
			0.022608232087583856,
			0.9942664471300807
		],
		"finger3-2.R": [
			0.023383101745577797,
			0.01867019881081966,
			0.02682995059171522,
			0.9991920776208977
		],
		"upperarm01.L": [
			0.15507622354833422,
			0.04155625484072534,
			0.03379911483634276,
			0.9864492193771963
		],
		"special06.L": [
			8.726645628343025e-9,
			8.726645850387627e-9,
			3.4906584289728807e-8,
			0.9999999999999993
		],
		"finger3-1.R": [
			0.04013405667798251,
			0.02863192028960515,
			0.05063971231026009,
			0.9974994186325284
		],
		"shoulder01.L": [
			3.490658251337185e-8,
			1.7453289591351506e-8,
			7.853981998095986e-8,
			0.9999999999999964
		],
		"lowerarm01.R": [
			0.1328697191552849,
			0.20850121143339273,
			0.038459556980438854,
			0.9681909651712679
		],
		"special03": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"upperarm02.L": [
			0.22170322010537208,
			-0.23824479521962927,
			0.004463202356489909,
			0.9455512569767919
		],
		"spine02": [
			-7.948388470308792e-10,
			-0.0009151943955045816,
			-0.012202407019268214,
			0.9999251290382467
		],
		"spine03": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"spine01": [
			0.00019393356219594616,
			0.02195012143414221,
			-0.006396394423009878,
			0.9997385861799999
		],
		"upperarm02.R": [
			-0.15954004745181058,
			-0.17977203033112255,
			0.003399768065091981,
			0.9706788510866013
		],
		"spine04": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.2114909351432767,
			-0.3179792429949517,
			0.008648699739544677,
			0.9241677257778456
		],
		"finger5-3.L": [
			0.08987396972204145,
			-0.10168063072146172,
			-0.3057516245688519,
			0.9423903983891151
		],
		"oris01": [
			1.745329214486444e-8,
			3.490658451177353e-8,
			4.799202690040438e-16,
			0.9999999999999992
		],
		"oris02": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"oris05": [
			-4.3633226809447267e-8,
			5.2359878099927926e-8,
			-2.6179942658188647e-8,
			0.9999999999999973
		],
		"risorius03.R": [
			-1.827704611937508e-15,
			5.235987998730707e-8,
			3.490658428972882e-8,
			0.9999999999999981
		],
		"finger2-3.L": [
			-0.008259065833483402,
			0.005707858799286147,
			0.004798471180254013,
			0.999938089510455
		],
		"oris06": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"finger3-3.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger2-3.R": [
			0.08735119313709938,
			0.06036579100296513,
			0.050751091590368426,
			0.9930508884425295
		],
		"toe3-3.L": [
			4.569261529843785e-16,
			2.617993988263123e-8,
			-1.745329214486445e-8,
			0.9999999999999996
		],
		"risorius03.L": [
			-1.570796399619154e-7,
			8.726640854384016e-9,
			-3.4906586066039e-8,
			0.9999999999999872
		]
	},
	"standing04": {
		"toe1-1.L": [
			5.2359878210949805e-8,
			-3.490658262439439e-8,
			-2.61799417700093e-8,
			0.9999999999999978
		],
		"finger5-2.R": [
			0.036188634902656856,
			0.04387862362814354,
			0.12022909490236065,
			0.9911155401018293
		],
		"finger4-2.R": [
			0.05815551528757926,
			0.04450102180364901,
			0.09312176311209328,
			0.9929581725002128
		],
		"toe5-2.R": [
			-1.7453291256686043e-8,
			-1.7453291256686043e-8,
			6.981316857945835e-8,
			0.9999999999999972
		],
		"toe4-2.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"clavicle.R": [
			-0.002122105927330871,
			-0.06187060617315698,
			0.03421321197576806,
			0.9974953538159965
		],
		"neck03": [
			-0.03407809175532573,
			8.7215771271687e-9,
			-2.973874584673527e-10,
			0.9994191731512437
		],
		"neck02": [
			-0.02039971229076095,
			0.0012055538182523806,
			0.017615829826382597,
			0.9996359742015959
		],
		"neck01": [
			0.04530748651760654,
			-0.08824788762524527,
			-0.02037565876025873,
			0.9948589721790846
		],
		"clavicle.L": [
			-0.019043223222085116,
			0.158155531481744,
			-0.0633157905225582,
			0.9851980989534763
		],
		"toe5-2.L": [
			3.4906586066085666e-8,
			2.617994077080965e-8,
			-3.4906582513372e-8,
			0.9999999999999986
		],
		"toe4-2.L": [
			7.615435000746974e-16,
			1.7453292255886765e-8,
			-4.363322858580417e-8,
			0.999999999999999
		],
		"finger5-2.L": [
			0.05284975475648943,
			-0.06408240969808388,
			-0.17558125633860516,
			0.980954418213213
		],
		"finger1-3.L": [
			-1.3089969286283475e-7,
			6.981316136300819e-8,
			-4.363323746756771e-8,
			0.9999999999999878
		],
		"toe1-1.R": [
			8.726647848789033e-9,
			-5.235987998730707e-8,
			3.4906584289728846e-8,
			0.9999999999999983
		],
		"oculi02.L": [
			-3.490658073701521e-8,
			4.363322680944748e-8,
			-6.981316857946001e-8,
			0.999999999999996
		],
		"oculi01.L": [
			-1.1344639005983066e-7,
			5.23598678858761e-8,
			-1.047197670800369e-7,
			0.9999999999999868
		],
		"jaw": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"finger1-3.R": [
			-8.726638522915545e-9,
			6.108652428338246e-8,
			-1.221730485667637e-7,
			0.9999999999999908
		],
		"oculi01.R": [
			-1.7453295697578307e-8,
			2.6179942658188793e-8,
			1.3089969286282385e-7,
			0.9999999999999908
		],
		"oculi02.R": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"wrist.R": [
			0.130011582432297,
			-0.03302977666109419,
			-0.011384802473432912,
			0.9908967698806013
		],
		"finger1-1.L": [
			-0.1631066772747728,
			0.08756057419867636,
			0.15419662453418229,
			0.9705425073929765
		],
		"tongue07.R": [
			-8.726648736967431e-9,
			-2.6179940992854256e-8,
			-1.0471975997461325e-7,
			0.9999999999999942
		],
		"eye.R": [
			-2.617993999365349e-8,
			8.881784197001252e-16,
			3.490658424245935e-8,
			0.9999999999999989
		],
		"finger2-1.R": [
			0.08148230543107134,
			-0.08019711485989589,
			-0.046506795032362755,
			0.9923538555805602
		],
		"finger4-3.R": [
			0.024531519796551354,
			0.01660074464133654,
			0.04118547480325242,
			0.9987123592301512
		],
		"finger2-1.L": [
			-5.23598746582363e-8,
			-6.108652061964648e-8,
			8.726646072432263e-8,
			0.9999999999999925
		],
		"eye.L": [
			1.7453293921221365e-8,
			3.490658628813037e-8,
			-5.2359879987306525e-8,
			0.9999999999999981
		],
		"tongue07.L": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"wrist.L": [
			0.0021136902537522975,
			0.14734950272742553,
			-0.018683627485223595,
			0.9889057479980007
		],
		"finger5-3.R": [
			-8.72664429607533e-9,
			-1.0471975975256953e-7,
			1.7453293033042724e-8,
			0.9999999999999944
		],
		"lowerleg01.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"lowerarm02.L": [
			-5.2359883540020707e-8,
			2.617994609988017e-8,
			1.2217304856681564e-7,
			0.9999999999999907
		],
		"oris07.L": [
			-5.2359860447382416e-8,
			1.047197495385177e-7,
			-1.9198622425154528e-7,
			0.9999999999999751
		],
		"oris07.R": [
			1.7453292144864407e-8,
			-6.108652472747167e-8,
			-1.0183439690065433e-15,
			0.9999999999999984
		],
		"tongue00": [
			7.853981998095993e-8,
			-8.726645850387627e-9,
			-6.85389203006783e-16,
			0.9999999999999968
		],
		"lowerarm02.R": [
			0.07746008027603721,
			0.0786982690489022,
			-0.10300876503807625,
			0.9885321000036708
		],
		"lowerleg01.L": [
			0.05408475302431404,
			0.004930171452193766,
			0.0003452252040627998,
			0.9985241177454397
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			-1.0471975642189773e-7,
			-8.726645406298417e-8,
			3.4906593171554376e-8,
			0.9999999999999903
		],
		"metacarpal4.L": [
			-0.0826075450237676,
			0.02472746986735641,
			0.14066488552190257,
			0.9862950551027899
		],
		"finger1-2.R": [
			-0.027608116637864766,
			-0.09452737393053967,
			-0.029779275108528087,
			0.9946937027283911
		],
		"pelvis.R": [
			-0.0023090007278607464,
			0.006841239237662333,
			0.02146661031206359,
			0.9997434924034467
		],
		"toe2-1.R": [
			-8.726645628342998e-9,
			-6.108652406133785e-8,
			8.726646516521382e-9,
			0.9999999999999979
		],
		"toe2-3.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe5-3.L": [
			-1.745329214486445e-8,
			3.3306690738754696e-16,
			4.3633228449276404e-8,
			0.9999999999999991
		],
		"levator05.L": [
			-8.726642519718672e-9,
			1.0471976008563644e-7,
			-3.490658606608545e-8,
			0.999999999999994
		],
		"finger4-1.L": [
			0.07391631236498016,
			-0.04718556962484899,
			-0.13193956656159625,
			0.9873711822618071
		],
		"finger4-1.R": [
			-0.0015814984324895953,
			0.059886933088246774,
			0.09320805006565178,
			0.9938427005874471
		],
		"levator05.R": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"toe5-3.R": [
			-2.617994354636722e-8,
			-4.3633230251138855e-8,
			-7.85398199809651e-8,
			0.9999999999999954
		],
		"toe2-3.R": [
			1.066161005983695e-15,
			1.7453292144864463e-8,
			-6.108652428338229e-8,
			0.9999999999999979
		],
		"finger4-2.L": [
			0.14458082450694315,
			-0.11063929908873082,
			-0.23150936442666586,
			0.9556457214181461
		],
		"toe2-1.L": [
			-3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.72664562834318e-9,
			0.9999999999999996
		],
		"finger1-2.L": [
			0.12053536738554704,
			0.01742420584123927,
			0.05643568546925316,
			0.9909503699306278
		],
		"pelvis.L": [
			0.0028243763653875487,
			0.008368092997218524,
			0.026257603159950068,
			0.9996161944436632
		],
		"metacarpal4.R": [
			-7.853981998095933e-8,
			3.490658839755412e-8,
			4.363322503309232e-8,
			0.9999999999999953
		],
		"tongue04": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"toe3-2.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"levator03.R": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"upperleg02.R": [
			-0.03879039648896895,
			-0.040196672727342286,
			-0.00014094006939359427,
			0.998438537306016
		],
		"upperleg02.L": [
			-0.011446004231859612,
			0.12540102329237557,
			-0.03274335603676388,
			0.9914995940391499
		],
		"levator03.L": [
			-4.363322858580401e-8,
			-4.3633228918871225e-8,
			1.745329392122144e-8,
			0.9999999999999984
		],
		"toe3-2.R": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"metacarpal3.L": [
			-0.1081618458274162,
			0.059333024809098855,
			0.10955763408389835,
			0.986294951871978
		],
		"tongue01": [
			-5.235987998730684e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999987
		],
		"breast.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"temporalis02.R": [
			2.6179947099080924e-8,
			-1.2217304856676492e-7,
			6.108652073066738e-8,
			0.9999999999999906
		],
		"tongue02": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris04.R": [
			4.3633228585804e-8,
			-4.3298697960381105e-15,
			9.599310849651147e-8,
			0.9999999999999942
		],
		"oris04.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis02.L": [
			6.98131685794569e-8,
			-8.72665051332433e-9,
			6.10865242833813e-8,
			0.9999999999999958
		],
		"breast.R": [
			-3.8077175003734897e-16,
			4.363322858580432e-8,
			8.726646072432225e-9,
			0.999999999999999
		],
		"oris03.R": [
			3.883872220957831e-15,
			1.483529812329465e-7,
			-2.6179939993653216e-8,
			0.9999999999999885
		],
		"oris06.L": [
			-5.235987998730683e-8,
			1.7763568394002505e-15,
			3.49065843627162e-8,
			0.999999999999998
		],
		"orbicularis04.R": [
			-4.3633228585804106e-8,
			-3.4906584289728926e-8,
			-8.726644740164946e-9,
			0.9999999999999984
		],
		"toe1-2.R": [
			-1.745329303304285e-8,
			4.3633228918871225e-8,
			2.6179939105475048e-8,
			0.9999999999999986
		],
		"toe1-2.L": [
			8.726646072432222e-9,
			2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"orbicularis04.L": [
			7.853981998095989e-8,
			1.7453290368507623e-8,
			1.745329392122154e-8,
			0.9999999999999964
		],
		"metacarpal3.R": [
			-5.2359874658236344e-8,
			9.599310535346461e-8,
			-5.2359885316377506e-8,
			0.9999999999999929
		],
		"oris06.R": [
			8.726645628343018e-9,
			8.726645628343022e-9,
			5.235987998730709e-8,
			0.9999999999999986
		],
		"levator04.L": [
			5.2359883540021123e-8,
			-1.6580627004714188e-7,
			1.7453283263083634e-8,
			0.9999999999999848
		],
		"tongue06.L": [
			8.726644740164572e-9,
			-3.4906584178706623e-8,
			-4.363322858580417e-8,
			0.9999999999999984
		],
		"toe2-2.L": [
			5.2359878210949805e-8,
			-3.4906582957461296e-8,
			-4.3633230362161104e-8,
			0.9999999999999972
		],
		"toe2-2.R": [
			-2.617993910547503e-8,
			-2.6179939216497417e-8,
			3.490658428972883e-8,
			0.9999999999999989
		],
		"tongue06.R": [
			4.363322858580404e-8,
			3.6637359812630166e-15,
			-9.599310842883793e-8,
			0.9999999999999942
		],
		"levator04.R": [
			5.2359883540020554e-8,
			7.853982375571888e-8,
			-3.490658073701498e-8,
			0.9999999999999951
		],
		"toe4-1.L": [
			-2.6179939993653487e-8,
			8.726645295276114e-9,
			-3.4906584289728926e-8,
			0.9999999999999988
		],
		"upperleg01.R": [
			-0.0022604166465206585,
			-0.017604311224100555,
			-0.05577402163348794,
			0.9982856491274104
		],
		"metacarpal1.R": [
			7.8539823533673e-8,
			-6.108652794711844e-8,
			5.2359874658238065e-8,
			0.9999999999999937
		],
		"levator02.R": [
			1.4835294592785073e-7,
			-2.792526598849321e-7,
			-1.221730911993286e-7,
			0.9999999999999424
		],
		"toe3-1.L": [
			-2.6179939993653487e-8,
			7.771561172376096e-16,
			2.6179939958862843e-8,
			0.9999999999999994
		],
		"toe3-1.R": [
			8.726646960610635e-9,
			-4.363322858580432e-8,
			1.7453292144864436e-8,
			0.9999999999999989
		],
		"levator02.L": [
			-2.617993999365346e-8,
			-3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"finger5-1.R": [
			-0.07709988797350133,
			0.06170618343868384,
			0.07609138849048458,
			0.9921985964500728
		],
		"metacarpal1.L": [
			-0.12844869068922213,
			0.08300664494206744,
			0.06191312707320314,
			0.9862948826044391
		],
		"toe4-1.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"upperleg01.L": [
			0.0028266207092014295,
			-0.022014009605423213,
			-0.06974481208574164,
			0.9973179306437756
		],
		"head": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"toe5-1.R": [
			-8.726645628343032e-9,
			8.726645295276114e-9,
			-3.490658428972877e-8,
			0.9999999999999992
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			-8.726641631540034e-9,
			-8.726645717160864e-8,
			5.2359879987306644e-8,
			0.9999999999999949
		],
		"special04": [
			-4.363322858580417e-8,
			-8.726646516521441e-9,
			4.068768463957589e-16,
			0.999999999999999
		],
		"metacarpal2.L": [
			-0.10685021728960652,
			0.05806130992939673,
			0.11150890209597486,
			0.9862949255206565
		],
		"metacarpal2.R": [
			-4.363323746758882e-8,
			6.98131753518183e-8,
			1.22173048566755e-7,
			0.9999999999999892
		],
		"temporalis01.R": [
			-2.617993555276144e-8,
			5.235987832197253e-8,
			-7.853981998097532e-8,
			0.9999999999999951
		],
		"toe5-1.L": [
			-3.4906584289728793e-8,
			-8.726647293677559e-9,
			-2.61799399936534e-8,
			0.999999999999999
		],
		"risorius02.R": [
			-2.6179939993653497e-8,
			-8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"special05.L": [
			2.6179943546367017e-8,
			1.2217304845574262e-7,
			-2.6179936440939676e-8,
			0.9999999999999919
		],
		"finger2-2.L": [
			0.04809231196895298,
			-0.03133786624417034,
			-0.02949217402407451,
			0.9979154670311895
		],
		"foot.L": [
			-0.001701659612210425,
			-0.0018767088794913178,
			0.055927097486671164,
			0.9984316411678181
		],
		"toe3-3.R": [
			-8.726646516521416e-9,
			6.108652428338246e-8,
			8.726645628342962e-9,
			0.9999999999999981
		],
		"levator06.R": [
			-3.49065860660856e-8,
			-6.108652439440476e-8,
			-2.6179938217296585e-8,
			0.999999999999997
		],
		"orbicularis03.R": [
			8.726645628343061e-9,
			-8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"levator06.L": [
			1.7453293921221365e-8,
			3.490658628813037e-8,
			-5.2359879987306525e-8,
			0.9999999999999981
		],
		"orbicularis03.L": [
			-1.745329214486445e-8,
			3.3306690738754696e-16,
			3.490658449484121e-8,
			0.9999999999999994
		],
		"foot.R": [
			0.09820735601717014,
			-0.046379745943584294,
			0.04470837347302433,
			0.9930787459873067
		],
		"root": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger2-2.R": [
			1.396263371589077e-7,
			2.617992134190672e-8,
			1.3089969996826627e-7,
			0.9999999999999815
		],
		"risorius02.L": [
			-2.6179940881831907e-8,
			-3.490658451177353e-8,
			-1.7453291256686053e-8,
			0.9999999999999991
		],
		"special05.R": [
			-4.3633226809447214e-8,
			-5.2359878544017135e-8,
			3.4906586066085587e-8,
			0.9999999999999972
		],
		"lowerleg02.L": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"tongue05.L": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"finger5-1.L": [
			0.06657982319217386,
			-0.07177397502430971,
			-0.23791481337494902,
			0.9663395703528196
		],
		"toe4-3.R": [
			4.569261529843786e-16,
			-1.745329203384216e-8,
			2.6179939993653514e-8,
			0.9999999999999997
		],
		"oris03.L": [
			-3.490658606608563e-8,
			-6.981316869048015e-8,
			-2.6179937329118136e-8,
			0.9999999999999966
		],
		"toe4-3.L": [
			1.745329214486445e-8,
			-3.3306690738754696e-16,
			3.490658449484121e-8,
			0.9999999999999994
		],
		"finger3-3.L": [
			0.05294384757468958,
			-0.041126043803210055,
			-0.06167820891435777,
			0.9958420537767029
		],
		"tongue05.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"lowerleg02.R": [
			-0.015183865768615173,
			-0.16613823948819828,
			-0.006109348077941914,
			0.9859666381101067
		],
		"shoulder01.R": [
			7.853981998095983e-8,
			-1.9984014443252818e-15,
			2.6179940010394776e-8,
			0.9999999999999966
		],
		"finger3-1.L": [
			0.059712538803214255,
			-0.04260040793651465,
			-0.07534223215941831,
			0.9944562162340548
		],
		"special06.R": [
			0,
			0,
			0,
			1
		],
		"finger4-3.L": [
			0.13493340134369106,
			-0.09131389260939626,
			-0.22653229737781722,
			0.9602800989623135
		],
		"finger3-2.L": [
			0.14830898313084978,
			-0.11841747613778097,
			-0.17016642243789348,
			0.9669669774829648
		],
		"upperarm01.R": [
			-0.002659599424680385,
			0.00022802480790040658,
			0.2693457777793393,
			0.9630398364180116
		],
		"finger3-2.R": [
			0.023383500410406478,
			0.018670185913203574,
			0.0268304383852186,
			0.9991920554340791
		],
		"upperarm01.L": [
			0.15507854756479755,
			0.04155630120766263,
			0.03379987173763999,
			0.9864488261362828
		],
		"special06.L": [
			-4.363322858580408e-8,
			8.726646849588349e-9,
			1.745329214486511e-8,
			0.9999999999999989
		],
		"finger3-1.R": [
			0.0401346549457169,
			0.02863194222099541,
			0.05064051652876492,
			0.9974993531039213
		],
		"shoulder01.L": [
			9.599311567853655e-8,
			-6.981317579590751e-8,
			8.726645006617887e-8,
			0.9999999999999892
		],
		"lowerarm01.R": [
			0.17576017771644392,
			-0.13642240377081294,
			0.008028388122723057,
			0.9749014476667002
		],
		"special03": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"upperarm02.L": [
			0.22170609465686353,
			-0.2382455965923732,
			0.004462125380982173,
			0.9455503861420766
		],
		"spine02": [
			-1.0849459239533944e-9,
			-0.0009152031250424519,
			-0.012202607179069451,
			0.9999251265876227
		],
		"spine03": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"spine01": [
			0.0012265896732559457,
			0.13217408422393417,
			0.008591561791590636,
			0.9911885249554292
		],
		"upperarm02.R": [
			0.029997892784745534,
			0.03380136599403627,
			-0.0006394987886141485,
			0.998978070393295
		],
		"spine04": [
			0,
			0,
			0,
			1
		],
		"spine05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			-0.21149394329355842,
			-0.3179798130320456,
			0.008649789173606592,
			0.924166831043778
		],
		"finger5-3.L": [
			0.08987505374536132,
			-0.10167885614947725,
			-0.30575505415210374,
			0.9423893737658793
		],
		"oris01": [
			7.853981998095986e-8,
			-1.745329203384216e-8,
			-1.365371901799131e-15,
			0.9999999999999968
		],
		"oris02": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"oris05": [
			-6.108652428338213e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"risorius03.R": [
			4.363322858580417e-8,
			8.726645628343022e-9,
			8.726646516520993e-9,
			0.999999999999999
		],
		"finger2-3.L": [
			-0.008259206684322826,
			0.005707852037885819,
			0.0047986366270049725,
			0.9999380875917177
		],
		"oris06": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-3.R": [
			8.726645361889305e-8,
			4.36332233677561e-8,
			6.98131721321718e-8,
			0.9999999999999929
		],
		"finger2-3.R": [
			0.08735254437955495,
			0.06036574774275616,
			0.050751822333013355,
			0.9930507348669325
		],
		"toe3-3.L": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"risorius03.L": [
			-1.4835298145498593e-7,
			1.745328337410257e-8,
			-6.108652783610168e-8,
			0.999999999999987
		]
	},
	"standing05": {
		"toe1-1.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger5-2.R": [
			0.039659150368709935,
			0.04808702405674681,
			0.1317576759035336,
			0.9893203246420736
		],
		"finger1-3.R": [
			-6.108652428338208e-8,
			-1.7453290035440716e-8,
			3.490658606608564e-8,
			0.9999999999999972
		],
		"toe5-2.R": [
			-1.1344640071797366e-7,
			5.2359883428998444e-8,
			3.49065789606629e-8,
			0.9999999999999915
		],
		"toe4-2.R": [
			-8.726646960610626e-9,
			3.4906584178706623e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"clavicle.R": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"neck03": [
			-0.01863359212102255,
			3.506313228651692e-8,
			8.074695862133525e-9,
			0.999826379550303
		],
		"neck02": [
			0.0003555671892801915,
			-1.7453291478730648e-8,
			-6.205817701719805e-12,
			0.9999999367859849
		],
		"neck01": [
			-0.05042080167642783,
			0.002153766357647302,
			-0.010108940578619593,
			0.998674578313257
		],
		"clavicle.L": [
			0.010050127970524398,
			-0.006965966176879834,
			0.09790964607342145,
			0.9951201793998428
		],
		"toe5-2.L": [
			-4.363322503309097e-8,
			1.7453285150459408e-8,
			-1.5707963996183346e-7,
			0.9999999999999865
		],
		"toe4-2.L": [
			-2.6179941770010476e-8,
			-4.363323080625037e-8,
			-3.490658251337224e-8,
			0.9999999999999982
		],
		"finger5-2.L": [
			0.0528483044718925,
			-0.06408292745679811,
			-0.17557491750538723,
			0.980955597091932
		],
		"finger1-3.L": [
			-2.530727556404358e-7,
			-2.6179966305939217e-8,
			-1.0471975286952817e-7,
			0.9999999999999616
		],
		"toe1-1.R": [
			2.6179940881831877e-8,
			-2.6179940992854256e-8,
			3.4906584289728846e-8,
			0.9999999999999988
		],
		"oculi02.L": [
			-8.726644651346552e-8,
			9.599310135666173e-8,
			-9.599311567853795e-8,
			0.999999999999987
		],
		"oculi01.L": [
			-7.853981287553208e-8,
			6.10865172889774e-8,
			-9.599311212582806e-8,
			0.9999999999999908
		],
		"jaw": [
			8.726645717160768e-8,
			8.726646960610651e-9,
			-8.72664518425463e-9,
			0.9999999999999961
		],
		"finger4-2.R": [
			0.038309011516654896,
			0.0293146217086957,
			0.06134208185457207,
			0.9969504609480051
		],
		"oculi01.R": [
			4.363323213851802e-8,
			-6.108652783609614e-8,
			5.235987643459333e-8,
			0.9999999999999957
		],
		"oculi02.R": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"oris03.L": [
			-2.6179933776404626e-8,
			-6.108652061964648e-8,
			9.599310857310833e-8,
			0.999999999999993
		],
		"finger1-1.L": [
			-0.06419577942434074,
			-0.028317198860325243,
			0.2493302135931897,
			0.9658734299805442
		],
		"tongue07.R": [
			-3.490659139515611e-8,
			-7.853982375571888e-8,
			-8.7266453618893e-8,
			0.9999999999999926
		],
		"eye.R": [
			-5.2359879987306644e-8,
			1.7453294476332815e-8,
			3.490658251337203e-8,
			0.9999999999999982
		],
		"finger2-1.R": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger4-3.R": [
			-1.7453293921221365e-8,
			-3.490658628813037e-8,
			-5.2359879987306525e-8,
			0.9999999999999981
		],
		"finger2-1.L": [
			-1.1344639716525959e-7,
			-2.6179932777203874e-8,
			6.108652783609847e-8,
			0.9999999999999913
		],
		"eye.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-2.6179939993653613e-8,
			0.9999999999999994
		],
		"tongue07.L": [
			6.108652428338174e-8,
			-3.490658073701525e-8,
			-4.363323036216002e-8,
			0.9999999999999967
		],
		"wrist.L": [
			0.1468082953374252,
			-0.03295213938333086,
			-0.08331474144082505,
			0.9850990482123254
		],
		"finger5-3.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"lowerleg01.R": [
			-0.005499306799691972,
			-0.06017174761395783,
			-0.0022123960958114687,
			0.9981704382104895
		],
		"lowerarm02.L": [
			-1.2217306277761564e-7,
			1.0471977784920483e-7,
			1.3962632294805223e-7,
			0.999999999999977
		],
		"oris07.L": [
			-1.745326994040321e-8,
			1.570796398508989e-7,
			-1.396263371589106e-7,
			0.9999999999999776
		],
		"oris07.R": [
			6.108652428338107e-8,
			-1.832595732942366e-7,
			-1.1199600285648662e-14,
			0.9999999999999817
		],
		"tongue00": [
			2.967059629099429e-7,
			-1.745328981339611e-8,
			-8.726651401502389e-9,
			0.9999999999999563
		],
		"lowerarm02.R": [
			0.2059120236914318,
			0.209207089739745,
			-0.27383352943574596,
			0.9158863631797821
		],
		"lowerleg01.L": [
			0.10237123628741616,
			0.08851077762053727,
			0.012393359736632636,
			0.990723158536446
		],
		"tongue03": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			-7.853982353367284e-8,
			-7.853982375571888e-8,
			-2.6179933776402736e-8,
			0.9999999999999936
		],
		"metacarpal4.L": [
			5.235988886909161e-8,
			2.1816615014547125e-7,
			-4.363321792766348e-8,
			0.9999999999999739
		],
		"finger1-2.R": [
			-6.092348000597493e-15,
			8.726645717160864e-8,
			6.981316857945703e-8,
			0.9999999999999938
		],
		"pelvis.R": [
			0.009809001968744825,
			-0.029062559053805392,
			-0.09119036408510729,
			0.9953609740388895
		],
		"toe2-1.R": [
			6.092348000597549e-16,
			8.726646183454534e-9,
			-6.98131685794573e-8,
			0.9999999999999977
		],
		"toe2-3.L": [
			4.569261529843772e-16,
			8.726646072432231e-9,
			-5.235987998730683e-8,
			0.9999999999999986
		],
		"toe5-3.L": [
			-2.617993910547503e-8,
			-2.6179939216497417e-8,
			3.490658428972883e-8,
			0.9999999999999989
		],
		"levator05.L": [
			1.0966227248108331e-14,
			7.85398199809606e-8,
			-1.3962633715891282e-7,
			0.999999999999987
		],
		"finger4-1.L": [
			0.07391389536746311,
			-0.047186181881657796,
			-0.13193514501036985,
			0.9873719247690459
		],
		"finger4-1.R": [
			0.08820628349720505,
			0.056306346030930654,
			0.1574460992345181,
			0.9819673990434156
		],
		"levator05.R": [
			-2.6179939993653527e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"toe5-3.R": [
			-2.6179939993653444e-8,
			1.9984014443252818e-15,
			6.981316854088414e-8,
			0.9999999999999976
		],
		"toe2-3.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger4-2.L": [
			0.14457715644924732,
			-0.1106416294287097,
			-0.23150162022492068,
			0.955647882592562
		],
		"toe2-1.L": [
			-3.490658251337205e-8,
			-4.363322680944748e-8,
			3.49065860660859e-8,
			0.9999999999999978
		],
		"finger1-2.L": [
			0.12053344745853938,
			0.017424125255767198,
			0.056434801625704266,
			0.9909506552136178
		],
		"pelvis.L": [
			-6.108652428338212e-8,
			-8.726645739365324e-9,
			8.72664651652142e-9,
			0.9999999999999983
		],
		"metacarpal4.R": [
			-5.2359879987306756e-8,
			2.617994121489886e-8,
			1.7453290368507855e-8,
			0.9999999999999986
		],
		"tongue04": [
			-1.4835298145498612e-7,
			-8.72664374096388e-9,
			1.7453293033042704e-8,
			0.9999999999999893
		],
		"toe3-2.L": [
			1.7453293921221206e-8,
			-1.7453293699176697e-8,
			9.599310857311026e-8,
			0.9999999999999953
		],
		"levator03.R": [
			-2.6179939993653487e-8,
			8.726647182655256e-9,
			2.617993999365346e-8,
			0.9999999999999989
		],
		"upperleg02.R": [
			-0.05564269826183582,
			0.007370710144557258,
			0.09650796459639699,
			0.9937483461780288
		],
		"upperleg02.L": [
			0.04964417955687947,
			0.01348965344107178,
			-0.06995285893857608,
			0.9962229078938523
		],
		"levator03.L": [
			8.726646960610684e-9,
			1.7453293255087488e-8,
			-6.108652428338172e-8,
			0.999999999999998
		],
		"toe3-2.R": [
			-2.617993555276164e-8,
			3.4906580625992945e-8,
			-1.221730485667452e-7,
			0.9999999999999915
		],
		"metacarpal3.L": [
			1.7453293921221375e-8,
			-2.6179941547965768e-8,
			7.853981998095793e-8,
			0.9999999999999967
		],
		"tongue01": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"breast.L": [
			0.01534426469121993,
			-0.013636578625923157,
			0.09800656764007816,
			0.9949740247684234
		],
		"temporalis02.R": [
			5.2359883540019807e-8,
			-1.570796402949881e-7,
			1.7453284151258633e-8,
			0.9999999999999867
		],
		"tongue02": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"oris04.R": [
			9.599310857310847e-8,
			8.72662841988614e-9,
			1.8325957285013372e-7,
			0.9999999999999786
		],
		"oris04.L": [
			6.981316857945723e-8,
			5.2359878099927926e-8,
			2.617994354622119e-8,
			0.9999999999999959
		],
		"temporalis02.L": [
			1.2217304146133248e-7,
			4.363321592926184e-8,
			1.0471976708003543e-7,
			0.9999999999999858
		],
		"breast.R": [
			0.005790109740281087,
			-0.06709930894930283,
			-0.018955337654009106,
			0.9975494236087471
		],
		"oris03.R": [
			2.6179948875437363e-8,
			1.396263371589157e-7,
			-6.108652073066807e-8,
			0.9999999999999882
		],
		"oris06.L": [
			-1.047197599746124e-7,
			-8.726643629941577e-9,
			2.6179940881831232e-8,
			0.9999999999999944
		],
		"orbicularis04.R": [
			-8.726646516521428e-9,
			-5.235987998730707e-8,
			-8.726645628342985e-9,
			0.9999999999999987
		],
		"toe1-2.R": [
			-9.138523059687567e-16,
			3.4906584178706623e-8,
			2.6179939993653468e-8,
			0.9999999999999989
		],
		"toe1-2.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"orbicularis04.L": [
			1.396263371589116e-7,
			8.726646072432231e-9,
			1.2184696001194844e-15,
			0.9999999999999901
		],
		"metacarpal3.R": [
			-9.599310857311017e-8,
			8.726640410294806e-9,
			-6.108652428337318e-8,
			0.9999999999999932
		],
		"oris06.R": [
			-7.853981998095994e-8,
			-8.72664196460704e-9,
			5.235987998730381e-8,
			0.9999999999999954
		],
		"levator04.L": [
			6.108652428338092e-8,
			-1.9198621781235659e-7,
			-8.726657618751059e-9,
			0.9999999999999799
		],
		"tongue06.L": [
			-3.490658428972884e-8,
			-2.6179941325921163e-8,
			-1.7453291256685967e-8,
			0.999999999999999
		],
		"toe2-2.L": [
			-1.7453293033042856e-8,
			2.6179940992854256e-8,
			4.3633228585804166e-8,
			0.9999999999999986
		],
		"toe2-2.R": [
			1.745329214486445e-8,
			-3.3306690738754696e-16,
			4.3633228449276404e-8,
			0.9999999999999991
		],
		"tongue06.R": [
			-8.72664607243214e-9,
			-1.1102230246251565e-15,
			-1.4835298142645773e-7,
			0.9999999999999889
		],
		"levator04.R": [
			6.108653138880908e-8,
			1.2217304845574262e-7,
			-4.363322148037669e-8,
			0.9999999999999898
		],
		"toe4-1.L": [
			8.726645628343018e-9,
			8.726645628343022e-9,
			5.235987998730709e-8,
			0.9999999999999986
		],
		"upperleg01.R": [
			0.13343199649676546,
			0.034268814706267636,
			0.10946136287743262,
			0.9843981718220172
		],
		"metacarpal1.R": [
			-2.6179939993653484e-8,
			-2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"levator02.R": [
			7.853979866467992e-8,
			-2.967059627989599e-7,
			-6.981319344845159e-8,
			0.9999999999999505
		],
		"toe3-1.L": [
			8.726647404699853e-9,
			-6.981316857945785e-8,
			1.745329125668601e-8,
			0.9999999999999976
		],
		"toe3-1.R": [
			-2.617993821729665e-8,
			-5.235987998730707e-8,
			2.6179941770010347e-8,
			0.9999999999999979
		],
		"levator02.L": [
			2.6179941770010294e-8,
			6.108652428338246e-8,
			-3.490658251337185e-8,
			0.9999999999999971
		],
		"finger5-1.R": [
			0.052733103517383036,
			0.05684374679941717,
			0.18842744825513497,
			0.9790215038431417
		],
		"metacarpal1.L": [
			8.726646516521416e-9,
			-6.108652428338246e-8,
			8.726645628342962e-9,
			0.9999999999999981
		],
		"toe4-1.R": [
			-4.363322680944721e-8,
			4.3633227031492083e-8,
			-2.6179941770010135e-8,
			0.999999999999998
		],
		"upperleg01.L": [
			-0.18200664005098327,
			-0.029073882765341286,
			-0.04954668677368103,
			0.9816177556197984
		],
		"head": [
			-0.023016521102528227,
			-1.7448669176189924e-8,
			4.01714055724129e-10,
			0.9997350847881339
		],
		"toe5-1.R": [
			-5.2359872881880147e-8,
			3.490657352056559e-8,
			-2.1816615003455604e-7,
			0.9999999999999742
		],
		"special01": [
			8.726646072432225e-9,
			1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"temporalis01.L": [
			8.726645361889341e-8,
			-3.490657740634617e-8,
			-7.853982353367286e-8,
			0.9999999999999927
		],
		"special04": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-3.054326214168704e-7,
			-2.61799159018139e-8,
			7.853982708586685e-8,
			0.9999999999999498
		],
		"metacarpal2.R": [
			-1.134463971652599e-7,
			-5.2359881430597e-8,
			-1.7453285927620584e-8,
			0.9999999999999919
		],
		"temporalis01.R": [
			1.745330457936244e-8,
			1.396263373809603e-7,
			-8.726645361889329e-8,
			0.9999999999999863
		],
		"toe5-1.L": [
			5.235987821095e-8,
			-2.6179935663783738e-8,
			-8.726645717161295e-8,
			0.9999999999999942
		],
		"risorius02.R": [
			-5.235987465823624e-8,
			9.59931049093754e-8,
			-6.10865278360955e-8,
			0.999999999999992
		],
		"special05.L": [
			4.363322858580375e-8,
			1.396263371589157e-7,
			6.180369913805331e-15,
			0.999999999999989
		],
		"finger2-2.L": [
			0.04809125761641109,
			-0.031337951748181436,
			-0.029490928635614186,
			0.9979155519628451
		],
		"foot.L": [
			0.026408132434226125,
			-0.08210066983404074,
			0.10368048708287553,
			0.990864494849016
		],
		"toe3-3.R": [
			-2.617994177001034e-8,
			-2.6179941770010373e-8,
			-5.235987998730672e-8,
			0.999999999999998
		],
		"levator06.R": [
			1.745329036850754e-8,
			-4.363322858580432e-8,
			-4.363322858580477e-8,
			0.9999999999999981
		],
		"orbicularis03.R": [
			8.72664651652144e-9,
			1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"levator06.L": [
			4.3633228585804066e-8,
			-8.726642963807762e-9,
			-6.981316857946062e-8,
			0.9999999999999968
		],
		"orbicularis03.L": [
			8.726647404699846e-9,
			-4.363322880784892e-8,
			2.617993999365346e-8,
			0.9999999999999984
		],
		"foot.R": [
			-0.09170631112598135,
			-0.03609665712718735,
			-0.07822750984360675,
			0.9920521360027283
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			-8.726645717160729e-8,
			4.3633230695228065e-8,
			2.6179936440943686e-8,
			0.9999999999999951
		],
		"risorius02.L": [
			-6.108652428338214e-8,
			-4.363322869682662e-8,
			8.726648736966921e-9,
			0.9999999999999972
		],
		"special05.R": [
			-3.4906584289728754e-8,
			-7.85398196478937e-8,
			-8.726643407896827e-9,
			0.9999999999999961
		],
		"lowerleg02.L": [
			-8.726645184253792e-9,
			1.745329203384216e-8,
			-4.363322858580425e-8,
			0.9999999999999988
		],
		"tongue05.L": [
			-2.617993999365348e-8,
			1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			0.06657701086489434,
			-0.0717751573268205,
			-0.23790752010128405,
			0.9663414718898609
		],
		"toe4-3.R": [
			4.363322858580403e-8,
			-3.4416913763379853e-15,
			8.726645736010788e-8,
			0.9999999999999954
		],
		"wrist.R": [
			-0.05177268299546452,
			0.014249755934000241,
			0.1045392272308466,
			0.9930700296158625
		],
		"toe4-3.L": [
			-1.7453291256686053e-8,
			3.4906584178706623e-8,
			-2.6179940881831874e-8,
			0.9999999999999988
		],
		"finger3-3.L": [
			0.05294284357521706,
			-0.0411261341421697,
			-0.061675838130572265,
			0.9958422502563256
		],
		"tongue05.R": [
			-2.6179939993653534e-8,
			-4.3633228474782015e-8,
			8.726647404699778e-9,
			0.9999999999999987
		],
		"lowerleg02.R": [
			-8.72664651652144e-9,
			-1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"shoulder01.R": [
			1.066161005983695e-15,
			-1.745329203384216e-8,
			6.108652428338231e-8,
			0.999999999999998
		],
		"finger3-1.L": [
			0.059710919660071124,
			-0.04260068178739884,
			-0.0753395686505817,
			0.9944565035134225
		],
		"special06.R": [
			-8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"finger4-3.L": [
			0.1349308437966619,
			-0.09131576773348438,
			-0.2265248639785908,
			0.9602820335479809
		],
		"finger3-2.L": [
			0.1483059260553159,
			-0.11841878187791988,
			-0.17016006972403183,
			0.9669684043788281
		],
		"upperarm01.R": [
			-0.009791042727277348,
			0.0031957757592627756,
			0.16822389712174038,
			0.9856950050278153
		],
		"finger3-2.R": [
			-4.363322858580409e-8,
			8.726647404699861e-9,
			2.6179939993652998e-8,
			0.9999999999999986
		],
		"upperarm01.L": [
			-0.06284471545687949,
			0.054899078516012056,
			0.2635589856368849,
			0.9610272077351885
		],
		"special06.L": [
			-6.092348000597589e-16,
			3.4906584178706623e-8,
			1.745329214486445e-8,
			0.9999999999999991
		],
		"finger3-1.R": [
			0.07753142788627308,
			0.055311886809811917,
			0.09782619873210972,
			0.9906359107709957
		],
		"shoulder01.L": [
			3.490658784244258e-8,
			-6.981316846843555e-8,
			4.363322680944667e-8,
			0.9999999999999959
		],
		"lowerarm01.R": [
			0.04470639758821078,
			-0.039613314709533554,
			0.003354069882351865,
			0.9982088326235311
		],
		"special03": [
			-3.490658428972883e-8,
			2.6179939993653534e-8,
			-1.0341496537059884e-15,
			0.9999999999999992
		],
		"upperarm02.L": [
			-0.3591981366437075,
			0.40474224586325214,
			-0.007654134416035478,
			0.8408934696331043
		],
		"spine02": [
			-0.036684517261576816,
			-0.00829378066959019,
			-0.009919925674289176,
			0.9992432408928803
		],
		"spine03": [
			-0.033351913273445964,
			0.000840872865838227,
			0.10603854144537868,
			0.9938021787770244
		],
		"spine01": [
			0.08428429394333549,
			-0.10645809550852559,
			0.017228932101975965,
			0.9905887116224356
		],
		"upperarm02.R": [
			-1.7453291256686043e-8,
			-1.7453291256686043e-8,
			6.981316857945835e-8,
			0.9999999999999972
		],
		"spine04": [
			3.413310431662024e-8,
			0.00200163114370433,
			-0.008495575254991849,
			0.9999619086114484
		],
		"spine05": [
			2.824023236411035e-8,
			-0.03727904229945622,
			-0.07709593381715042,
			0.9963264976874279
		],
		"lowerarm01.L": [
			0.10335578564811415,
			0.052080523672079826,
			0.001076978851041535,
			0.9932794373909375
		],
		"finger5-3.L": [
			0.08987264908869325,
			-0.10168154783879135,
			-0.3057461585792811,
			0.9423921987627554
		],
		"oris01": [
			4.363322858580418e-8,
			-1.7453291367708346e-8,
			-1.745329303304287e-8,
			0.999999999999999
		],
		"oris02": [
			1.7453292144864443e-8,
			-1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"oris05": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"risorius03.R": [
			-1.1423153030516055e-15,
			4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"finger2-3.L": [
			-0.008259039297434248,
			0.005707866951392027,
			0.0047984017974439805,
			0.9999380900160463
		],
		"oris06": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"finger3-3.R": [
			4.363322858580419e-8,
			2.6179939660586626e-8,
			-8.7266447401649e-9,
			0.9999999999999984
		],
		"finger2-3.R": [
			3.490658606608565e-8,
			-2.6179941881032676e-8,
			4.363322680944736e-8,
			0.999999999999998
		],
		"toe3-3.L": [
			2.132322011967378e-15,
			1.7453292144864463e-8,
			-1.2217304856676391e-7,
			0.9999999999999923
		],
		"risorius03.L": [
			-1.6580627004713296e-7,
			4.363321659539565e-8,
			-7.853982708648242e-8,
			0.9999999999999825
		]
	},
	"Snorkel_Diver_01": {
		"toe1-1.L": [
			6.10865242833821e-8,
			-8.72664829287828e-9,
			3.490658428972797e-8,
			0.9999999999999976
		],
		"finger5-2.R": [
			1.5230870001493993e-16,
			-8.726645961409929e-9,
			1.7453292144864466e-8,
			0.9999999999999999
		],
		"finger4-2.R": [
			-8.726645628343017e-9,
			-2.6179939993653534e-8,
			1.7453292144864436e-8,
			0.9999999999999996
		],
		"toe5-2.R": [
			4.363322858580419e-8,
			4.440892098500626e-16,
			-1.7453292253300258e-8,
			0.9999999999999987
		],
		"toe4-2.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"clavicle.R": [
			3.4906584289728906e-8,
			-8.72664829287828e-9,
			6.108652428337678e-8,
			0.9999999999999973
		],
		"neck03": [
			-0.21165068790469355,
			1.1457031534600759e-7,
			-6.95311334899128e-9,
			0.9773453771873364
		],
		"neck02": [
			-0.10374918713652496,
			-0.007670020760214724,
			-0.024319340878937657,
			0.9942765443322411
		],
		"neck01": [
			-0.097659046813381,
			-0.018881665656950042,
			-0.012469362950094823,
			0.9949626667695318
		],
		"clavicle.L": [
			-0.013649458015570357,
			0.03476153458031894,
			0.13305835032386062,
			0.9904043635902435
		],
		"toe5-2.L": [
			-1.7453293033042876e-8,
			2.6179940881831953e-8,
			3.4906584289728807e-8,
			0.9999999999999989
		],
		"toe4-2.L": [
			-2.6179939993653484e-8,
			-2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"finger5-2.L": [
			0.16149253636591965,
			-0.19581452077443207,
			-0.5365280949061293,
			0.8048070809382718
		],
		"finger1-3.L": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			-1.745329214486445e-8,
			0.9999999999999997
		],
		"toe1-1.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			-5.235987998730686e-8,
			2.617994110387656e-8,
			8.726644740164896e-9,
			0.9999999999999984
		],
		"oculi01.L": [
			-8.726646516521438e-9,
			3.490658440075123e-8,
			8.726645628343022e-9,
			0.9999999999999994
		],
		"jaw": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"finger1-3.R": [
			1.7453292144864453e-8,
			-2.6179939993653534e-8,
			-8.726646516521464e-9,
			0.9999999999999997
		],
		"oculi01.R": [
			6.981317213217101e-8,
			-2.617994698805859e-8,
			9.599310502039032e-8,
			0.9999999999999928
		],
		"oculi02.R": [
			5.235987998730684e-8,
			-8.726645739365324e-9,
			-8.72664651652204e-9,
			0.9999999999999988
		],
		"wrist.R": [
			-8.726646072432225e-9,
			-2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"finger1-1.L": [
			-1.745329125668605e-8,
			2.617993899445281e-8,
			-4.3633228585803e-8,
			0.9999999999999988
		],
		"tongue07.R": [
			2.7755575615628914e-16,
			1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"eye.R": [
			-8.726648736967438e-9,
			5.235987998730707e-8,
			5.2359879987306776e-8,
			0.9999999999999973
		],
		"finger2-1.R": [
			-2.617993999365346e-8,
			3.4906584733818136e-8,
			-1.0095481158786604e-15,
			0.9999999999999991
		],
		"finger4-3.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"finger2-1.L": [
			-0.05741261127379542,
			0.011676169030757855,
			0.039917606757837815,
			0.9974838564178449
		],
		"eye.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"tongue07.L": [
			-4.3633228585804047e-8,
			4.3633228918871225e-8,
			-8.726647848789339e-9,
			0.9999999999999984
		],
		"wrist.L": [
			-0.1112947342202261,
			0.15681896658297545,
			0.11455897895936779,
			0.9746268692143083
		],
		"finger5-3.R": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"lowerleg01.R": [
			0.18738555695752826,
			-0.061040327980183995,
			-0.03581746386954327,
			0.9797335559659791
		],
		"lowerarm02.L": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"oris07.L": [
			-7.853981998095983e-8,
			8.726647293677559e-9,
			1.745329125668274e-8,
			0.9999999999999964
		],
		"oris07.R": [
			2.6179939105475088e-8,
			6.108652428338246e-8,
			1.7453293921221196e-8,
			0.9999999999999977
		],
		"tongue00": [
			1.0471975997461245e-7,
			8.726647071632954e-9,
			-8.726645184263907e-9,
			0.9999999999999946
		],
		"lowerarm02.R": [
			8.726646516521435e-9,
			3.490658395666202e-8,
			-1.745329214486445e-8,
			0.9999999999999989
		],
		"lowerleg01.L": [
			0.1276786778495069,
			-2.7418797121647742e-8,
			-1.9710016026946332e-7,
			0.9918155852892021
		],
		"tongue03": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger1-1.R": [
			0,
			0,
			-3.490658428972887e-8,
			0.9999999999999996
		],
		"metacarpal4.L": [
			-2.617993377640426e-8,
			1.396263374919826e-7,
			-4.3633232138517547e-8,
			0.9999999999999892
		],
		"finger1-2.R": [
			-7.615435000746974e-16,
			-1.7453292255886765e-8,
			-4.363322858580417e-8,
			0.999999999999999
		],
		"pelvis.R": [
			-2.6179939993653497e-8,
			8.726646516521441e-9,
			8.726645628343002e-9,
			0.9999999999999996
		],
		"toe2-1.R": [
			4.363322858580422e-8,
			8.726646516521441e-9,
			-8.726645628343238e-9,
			0.999999999999999
		],
		"toe2-3.L": [
			-7.853981998095987e-8,
			1.3322676295501878e-15,
			1.7453292146485912e-8,
			0.9999999999999969
		],
		"toe5-3.L": [
			8.726645628342989e-9,
			8.726645628343022e-9,
			6.981316857945736e-8,
			0.9999999999999974
		],
		"levator05.L": [
			4.3633228585804185e-8,
			7.771561172376096e-16,
			-2.6179939951169008e-8,
			0.9999999999999984
		],
		"finger4-1.L": [
			0.25721940257896997,
			-0.16419781918346998,
			-0.45913967684963997,
			0.8343069053140566
		],
		"finger4-1.R": [
			-8.726645184253789e-9,
			3.4906584178706623e-8,
			-2.617993999365348e-8,
			0.999999999999999
		],
		"levator05.R": [
			8.726646072432044e-8,
			6.981317235421614e-8,
			-2.6179933776400735e-8,
			0.9999999999999937
		],
		"toe5-3.R": [
			6.981316857945736e-8,
			-8.726645628343022e-9,
			-8.726646516520718e-9,
			0.9999999999999974
		],
		"toe2-3.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.2947330119766014,
			-0.2255368706273353,
			-0.47194770905174427,
			0.7997067784879907
		],
		"toe2-1.L": [
			-6.108652428338202e-8,
			3.3306690738754696e-15,
			5.235988009708042e-8,
			0.999999999999997
		],
		"finger1-2.L": [
			1.745329125668605e-8,
			-2.617993899445281e-8,
			-4.3633228585803e-8,
			0.9999999999999988
		],
		"pelvis.L": [
			-7.853981998095983e-8,
			-1.2212453270876722e-15,
			-1.7453292151567028e-8,
			0.9999999999999968
		],
		"metacarpal4.R": [
			-2.617993999365349e-8,
			8.881784197001252e-16,
			3.490658424245935e-8,
			0.9999999999999989
		],
		"tongue04": [
			-4.363322858580417e-8,
			8.726646516521441e-9,
			-4.068768463957589e-16,
			0.999999999999999
		],
		"toe3-2.L": [
			1.5230870001493993e-16,
			8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"levator03.R": [
			9.599310857311011e-8,
			4.363322869682662e-8,
			-8.726642075628535e-9,
			0.9999999999999944
		],
		"upperleg02.R": [
			0.05033033898771495,
			-0.013555552307857988,
			0.02244465422363647,
			0.9983883720655963
		],
		"upperleg02.L": [
			-0.20742311243580744,
			3.5933111819375085e-8,
			2.9568333620694893e-7,
			0.9782513237544602
		],
		"levator03.L": [
			-1.745329480939979e-8,
			8.726645706058633e-8,
			3.49065825133716e-8,
			0.9999999999999952
		],
		"toe3-2.R": [
			4.3633228585804086e-8,
			1.7453292144864463e-8,
			8.726646960611766e-9,
			0.9999999999999989
		],
		"metacarpal3.L": [
			-5.2359878210949963e-8,
			5.235987832197253e-8,
			-3.49065878424416e-8,
			0.9999999999999968
		],
		"tongue01": [
			-1.0471975997461235e-7,
			-8.726646516521441e-9,
			9.147568014590599e-16,
			0.9999999999999946
		],
		"breast.L": [
			-1.7453292144864446e-8,
			1.7453292366909068e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"temporalis02.R": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue02": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"oris04.R": [
			2.6179939105475045e-8,
			-1.745329114566374e-8,
			-4.363322858580426e-8,
			0.9999999999999988
		],
		"oris04.L": [
			2.6179939993653504e-8,
			-1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"temporalis02.L": [
			3.490658428972884e-8,
			8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"breast.R": [
			-2.6179939993653434e-8,
			6.108652450542706e-8,
			-1.5739905687674017e-15,
			0.999999999999998
		],
		"oris03.R": [
			-1.7453301026648743e-8,
			6.981317213217153e-8,
			1.3089969286283385e-7,
			0.999999999999989
		],
		"oris06.L": [
			-2.6179939105475068e-8,
			-3.4906584289728926e-8,
			1.7453293033042906e-8,
			0.999999999999999
		],
		"orbicularis04.R": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe1-2.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-2.L": [
			-3.490658428972884e-8,
			-8.726645517320719e-9,
			1.7453292144864436e-8,
			0.9999999999999991
		],
		"orbicularis04.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"metacarpal3.R": [
			-4.363322680944723e-8,
			5.235987998730707e-8,
			-1.7453294809399954e-8,
			0.9999999999999974
		],
		"oris06.R": [
			1.7453293921221316e-8,
			6.108652406133785e-8,
			-2.6179939105475e-8,
			0.9999999999999974
		],
		"levator04.L": [
			3.490658428972883e-8,
			-8.726647515722163e-9,
			3.490658428972884e-8,
			0.9999999999999987
		],
		"tongue06.L": [
			-3.49065842897288e-8,
			-1.7453293477132092e-8,
			-1.7453291256685666e-8,
			0.9999999999999992
		],
		"toe2-2.L": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"toe2-2.R": [
			0,
			0,
			0,
			1
		],
		"tongue06.R": [
			-8.726645628343012e-9,
			1.745329203384216e-8,
			-3.4906584289728866e-8,
			0.9999999999999993
		],
		"levator04.R": [
			8.726645717160673e-8,
			-7.85398200919829e-8,
			-1.745329925029425e-8,
			0.999999999999993
		],
		"toe4-1.L": [
			1.1423153030516057e-15,
			2.617993988263123e-8,
			-4.3633228585804225e-8,
			0.9999999999999984
		],
		"upperleg01.R": [
			1.158709796280855e-7,
			-0.005418639275799664,
			-0.0361487929951549,
			0.9993317282631323
		],
		"metacarpal1.R": [
			-5.235987998730681e-8,
			-1.7453291478730648e-8,
			8.726646960610605e-9,
			0.9999999999999986
		],
		"levator02.R": [
			1.0471975997461267e-7,
			-9.599310857311139e-8,
			-8.72665628648547e-9,
			0.9999999999999898
		],
		"toe3-1.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"toe3-1.R": [
			-4.3633228585804185e-8,
			3.3306690738754696e-16,
			8.726646077118623e-9,
			0.9999999999999991
		],
		"levator02.L": [
			2.6179946210902697e-8,
			-8.726646050227771e-8,
			6.981316502674334e-8,
			0.9999999999999931
		],
		"finger5-1.R": [
			-3.4906584289728793e-8,
			1.7453291478730648e-8,
			-2.617994088183205e-8,
			0.9999999999999991
		],
		"metacarpal1.L": [
			-4.363322858580412e-8,
			3.4906584178706623e-8,
			-8.726647404700103e-9,
			0.9999999999999984
		],
		"toe4-1.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"upperleg01.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"head": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"toe5-1.R": [
			3.4906584289728866e-8,
			-5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			-3.490658428972886e-8,
			-1.1102230246251565e-16,
			-8.726646072432225e-9,
			0.9999999999999993
		],
		"special04": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"metacarpal2.L": [
			8.72665095741345e-9,
			7.85398199809606e-8,
			-6.108652428338193e-8,
			0.9999999999999948
		],
		"metacarpal2.R": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-2.6179939993653613e-8,
			0.9999999999999994
		],
		"temporalis01.R": [
			-8.726646516521436e-9,
			1.7453292366909068e-8,
			2.6179939993653527e-8,
			0.9999999999999996
		],
		"toe5-1.L": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"risorius02.R": [
			-2.6179939105475104e-8,
			6.981316891252476e-8,
			-1.7453293921221593e-8,
			0.9999999999999972
		],
		"special05.L": [
			1.7453292144864433e-8,
			2.617994021569814e-8,
			4.927555263958927e-16,
			0.9999999999999996
		],
		"finger2-2.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"foot.L": [
			0.39030858805816526,
			0.03557839124671336,
			0.00249175747590161,
			0.919993030032847
		],
		"toe3-3.R": [
			-3.4906584289728906e-8,
			-8.726645739365324e-9,
			8.726646516521435e-9,
			0.9999999999999994
		],
		"levator06.R": [
			-8.72664562834302e-9,
			-3.4906584289728926e-8,
			8.726646516521445e-9,
			0.9999999999999994
		],
		"orbicularis03.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.L": [
			1.5230870001493931e-15,
			8.726645717160864e-8,
			-1.7453292144864383e-8,
			0.9999999999999962
		],
		"orbicularis03.L": [
			2.284630764921893e-16,
			-8.726645961409929e-9,
			2.61799399936535e-8,
			0.9999999999999996
		],
		"foot.R": [
			0.30241696396364687,
			0.031801920942795436,
			-0.03137808433725972,
			0.9521281602571593
		],
		"root": [
			0.7577080796193822,
			4.3533863958167274e-8,
			-2.9430631486795763e-9,
			0.6525936454483032
		],
		"finger2-2.R": [
			6.981316857945712e-8,
			-4.363323047318346e-8,
			3.490658073702643e-8,
			0.999999999999996
		],
		"risorius02.L": [
			-1.3707785118926907e-15,
			2.6179939993653534e-8,
			5.235987998730687e-8,
			0.9999999999999984
		],
		"special05.R": [
			-1.7453292144864427e-8,
			-8.881784197001252e-16,
			-5.235988012452949e-8,
			0.9999999999999986
		],
		"lowerleg02.L": [
			8.726646516521438e-9,
			-3.490658440075123e-8,
			8.726645628343022e-9,
			0.9999999999999994
		],
		"tongue05.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"finger5-1.L": [
			0.13893441281362817,
			-0.14976903805996067,
			-0.49645691204855397,
			0.8436806259799622
		],
		"toe4-3.R": [
			0,
			0,
			0,
			1
		],
		"oris03.L": [
			-3.490658606608592e-8,
			-1.745329647473426e-8,
			-1.3089969286289749e-7,
			0.9999999999999906
		],
		"toe4-3.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-3.L": [
			0.3555103692421994,
			-0.2761592589479769,
			-0.41419002126019083,
			0.791072099967545
		],
		"tongue05.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"lowerleg02.R": [
			5.2359879987306704e-8,
			1.745329336610979e-8,
			-8.726645184253104e-9,
			0.9999999999999986
		],
		"shoulder01.R": [
			1.0471975997461261e-7,
			-5.2359883428998444e-8,
			2.617993466458787e-8,
			0.9999999999999926
		],
		"finger3-1.L": [
			0.30267497950852124,
			-0.21593371400070305,
			-0.3819125440577222,
			0.8461106881659973
		],
		"special06.R": [
			-8.72664696061062e-9,
			-2.6179939993653534e-8,
			-3.490658428972884e-8,
			0.9999999999999991
		],
		"finger4-3.L": [
			0.3233955840537047,
			-0.21884678483632292,
			-0.5429530884807099,
			0.7434536466321392
		],
		"finger3-2.L": [
			0.34837279566816776,
			-0.2781575041725437,
			-0.39973190750708876,
			0.800923966573351
		],
		"upperarm01.R": [
			-0.0976126923913818,
			-0.20574988236084601,
			0.1748712218313746,
			0.9578928979629224
		],
		"finger3-2.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"upperarm01.L": [
			-0.08484664751362371,
			-0.08189169894918713,
			0.5236920870071378,
			0.84370693611883
		],
		"special06.L": [
			-2.6179939993653487e-8,
			8.726647071632954e-9,
			3.490658428972886e-8,
			0.9999999999999988
		],
		"finger3-1.R": [
			-2.6179939993653494e-8,
			-6.661338147750939e-16,
			-2.6179940052507944e-8,
			0.9999999999999993
		],
		"shoulder01.L": [
			2.6179939105475078e-8,
			-1.7453291034641438e-8,
			-3.490658428972863e-8,
			0.9999999999999987
		],
		"lowerarm01.R": [
			1.2184696001195153e-15,
			-1.745329203384216e-8,
			6.981316857945761e-8,
			0.9999999999999974
		],
		"special03": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"upperarm02.L": [
			-0.2929130703016428,
			0.20654547695914593,
			-0.01306886855580516,
			0.933472069142326
		],
		"spine02": [
			-0.07441319477826981,
			0.014305326927936624,
			0.0075450127811763,
			0.9970963377961571
		],
		"spine03": [
			-0.037016259855105454,
			1.1102230246251565e-16,
			0,
			0.9993146634100489
		],
		"spine01": [
			-0.08057138222549462,
			0.008488043063654471,
			-0.0007711994810358576,
			0.9967124012184178
		],
		"upperarm02.R": [
			-0.11869832148697528,
			-0.13374956872790866,
			0.0025305856159237353,
			0.9838777146971637
		],
		"spine04": [
			-0.08294474784287259,
			0,
			0,
			0.9965541474527526
		],
		"spine05": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"lowerarm01.L": [
			0.02195759886413944,
			0.04081359421651365,
			0.06841945306013797,
			0.9965795968321863
		],
		"finger5-3.L": [
			0.17106869579365433,
			-0.19352569357785643,
			-0.5819743412621895,
			0.7710960856839492
		],
		"oris01": [
			7.853981998095985e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"oris02": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"oris05": [
			-1.0471975997461235e-7,
			8.726646516521441e-9,
			-9.147568014590599e-16,
			0.9999999999999946
		],
		"risorius03.R": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"finger2-3.L": [
			5.235987998730683e-8,
			-8.726646294476836e-9,
			-4.4331856927593173e-16,
			0.9999999999999987
		],
		"oris06": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger3-3.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger2-3.R": [
			2.6179939993653504e-8,
			3.4906584733818136e-8,
			-8.726645184253808e-9,
			0.9999999999999991
		],
		"toe3-3.L": [
			-5.235987821095e-8,
			-2.617993533071683e-8,
			8.726645717161273e-8,
			0.9999999999999942
		],
		"risorius03.L": [
			-1.047197599746124e-7,
			3.4906581070082154e-8,
			-2.6179943546368675e-8,
			0.9999999999999939
		]
	},
	"Harvey_SittingFashion2": {
		"toe1-1.L": [
			-0.19477093297675607,
			-0.017894744722668388,
			0.01349462327202045,
			0.9805926559593543
		],
		"finger5-2.R": [
			5.235987998730684e-8,
			-1.7453292144864463e-8,
			-9.583612278589327e-16,
			0.9999999999999983
		],
		"finger1-3.R": [
			-4.3633228585804086e-8,
			-2.617993932751972e-8,
			1.7453293033042373e-8,
			0.9999999999999989
		],
		"toe5-2.R": [
			-3.4906584289728906e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"toe4-2.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"clavicle.R": [
			1.7453292144864446e-8,
			5.551115123125783e-16,
			-3.490658429686185e-8,
			0.9999999999999992
		],
		"neck03": [
			4.169795475774536e-8,
			-0.09232116027527237,
			-0.03710709646938845,
			0.9950376207747307
		],
		"neck02": [
			0.09898103885290478,
			-0.09546168301633573,
			-0.02628024905797052,
			0.9901510841951039
		],
		"neck01": [
			-0.09947011691017076,
			-1.1102230246251565e-16,
			1.232595164407831e-32,
			0.9950405498480337
		],
		"clavicle.L": [
			1.745329214486445e-8,
			-3.3306690738754696e-16,
			3.490658449484121e-8,
			0.9999999999999994
		],
		"toe5-2.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe4-2.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"finger5-2.L": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"finger1-3.L": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"toe1-1.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"oculi02.L": [
			-8.726646072432228e-9,
			0,
			2.6179939875677524e-8,
			1
		],
		"oculi01.L": [
			-2.6179939993653487e-8,
			7.771561172376096e-16,
			2.6179939958862843e-8,
			0.9999999999999994
		],
		"jaw": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"oculi01.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"oculi02.R": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"wrist.R": [
			-0.2451089895364866,
			-0.2450433055423813,
			-0.47561279560336683,
			0.808497266733547
		],
		"finger1-1.L": [
			-0.04496871286632635,
			0.1861798547428679,
			0.04211111071193015,
			0.9805822407660043
		],
		"tongue07.R": [
			-4.363322858580419e-8,
			2.6179939660586626e-8,
			8.7266447401649e-9,
			0.9999999999999984
		],
		"eye.R": [
			-1.7453292144864443e-8,
			-1.7453292255886765e-8,
			8.726646516521435e-9,
			0.9999999999999997
		],
		"finger2-1.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger4-3.R": [
			3.0461740002987947e-16,
			-8.726645961409929e-9,
			3.490658428972888e-8,
			0.9999999999999993
		],
		"finger2-1.L": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"eye.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"tongue07.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"wrist.L": [
			-0.27510679354581224,
			0.29011157777045615,
			0.41641038657123247,
			0.8165500073749771
		],
		"finger5-3.R": [
			-8.726645628343025e-9,
			-8.726645850387627e-9,
			3.4906584289728807e-8,
			0.9999999999999993
		],
		"lowerleg01.R": [
			0.5714669761560752,
			-0.045606019245387985,
			0.012136701025468485,
			0.8192669202768039
		],
		"lowerarm02.L": [
			2.6179939993653464e-8,
			-8.726645295276114e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"oris07.L": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"oris07.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue00": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"lowerarm02.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"lowerleg01.L": [
			0.8590457221740829,
			0.06855562472079324,
			-0.018228847241985747,
			0.5069598432438002
		],
		"tongue03": [
			-4.569261529843785e-16,
			2.6179939993653534e-8,
			1.745329214486445e-8,
			0.9999999999999997
		],
		"finger1-1.R": [
			-0.04496868615201387,
			-0.1861798480570901,
			-0.04211111605341781,
			0.980582243031117
		],
		"metacarpal4.L": [
			-1.7453291256685997e-8,
			1.745329114566374e-8,
			-5.235987998730706e-8,
			0.9999999999999983
		],
		"finger1-2.R": [
			-7.853981998095983e-8,
			-2.617993899445281e-8,
			8.726648292877301e-9,
			0.9999999999999961
		],
		"pelvis.R": [
			-0.36802260748683685,
			-0.04365855231188198,
			-0.022911604236283203,
			0.9285086696310062
		],
		"toe2-1.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"toe2-3.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"toe5-3.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"levator05.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"finger4-1.L": [
			2.6179939993653494e-8,
			8.726646960610651e-9,
			-3.490658428972892e-8,
			0.9999999999999989
		],
		"finger4-1.R": [
			-1.7453291256685997e-8,
			-8.72664507323151e-9,
			6.108652428338223e-8,
			0.999999999999998
		],
		"levator05.R": [
			-1.7453291256686083e-8,
			-2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe2-3.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-2.L": [
			-1.7453292144864443e-8,
			-6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"toe2-1.L": [
			-0.19431516294757628,
			-0.0182588912262045,
			0.018609028840254525,
			0.9805926444683694
		],
		"finger1-2.L": [
			-3.490658428972882e-8,
			2.6179939993653534e-8,
			8.726645184253818e-9,
			0.9999999999999988
		],
		"pelvis.L": [
			-0.284727830971177,
			0.03378022255405333,
			0.017724715469315682,
			0.9578490451507375
		],
		"metacarpal4.R": [
			-1.7453290368507643e-8,
			-3.490658262439439e-8,
			5.2359879987306684e-8,
			0.999999999999998
		],
		"tongue04": [
			-1.5230870001493986e-16,
			1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"toe3-2.L": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"levator03.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"upperleg02.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"upperleg02.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"levator03.L": [
			8.726646960610704e-9,
			-2.6179939993653534e-8,
			2.6179939993653468e-8,
			0.9999999999999992
		],
		"toe3-2.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"metacarpal3.L": [
			-1.7453291256686047e-8,
			-1.7453291478730648e-8,
			2.6179939993653507e-8,
			0.9999999999999994
		],
		"tongue01": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"breast.L": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"temporalis02.R": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"tongue02": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris04.R": [
			8.72664562834299e-9,
			6.981316835741325e-8,
			8.726646516521431e-9,
			0.9999999999999971
		],
		"oris04.L": [
			0,
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0.9999999999999991
		],
		"temporalis02.L": [
			-8.726646072432231e-9,
			1.7453292366909068e-8,
			-8.726646072432231e-9,
			0.9999999999999998
		],
		"breast.R": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"oris03.R": [
			-1.745329303304287e-8,
			-3.490658440075123e-8,
			-1.7453291256686037e-8,
			0.999999999999999
		],
		"oris06.L": [
			-8.72664829287831e-9,
			7.85398202030052e-8,
			2.617993910547502e-8,
			0.9999999999999967
		],
		"orbicularis04.R": [
			8.726646516521441e-9,
			-2.6179940104675836e-8,
			8.726645628343022e-9,
			0.9999999999999998
		],
		"toe1-2.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe1-2.L": [
			1.7453292144864456e-8,
			8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"orbicularis04.L": [
			3.490658428972878e-8,
			-2.6179939549564324e-8,
			-1.7453293033042585e-8,
			0.9999999999999991
		],
		"metacarpal3.R": [
			-8.726645628343017e-9,
			-1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"oris06.R": [
			-5.235987998730684e-8,
			3.3306690738754696e-16,
			8.726646049588092e-9,
			0.9999999999999987
		],
		"levator04.L": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"tongue06.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"toe2-2.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe2-2.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"tongue06.R": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"levator04.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"toe4-1.L": [
			-0.09721789655329924,
			-0.012687093842219332,
			0.01679722594858436,
			0.9950404873370848
		],
		"upperleg01.R": [
			-0.2828669043469692,
			0.05989810812495866,
			0.08520771437389284,
			0.9534873761510375
		],
		"metacarpal1.R": [
			8.726646960610704e-9,
			-2.6179939993653534e-8,
			2.6179939993653468e-8,
			0.9999999999999992
		],
		"levator02.R": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"toe3-1.L": [
			-0.19259860471259282,
			-0.020028408444414003,
			0.030704986893645522,
			0.9805925984310752
		],
		"toe3-1.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"levator02.L": [
			2.6179939105475058e-8,
			2.617993943854202e-8,
			2.6179940881831917e-8,
			0.9999999999999991
		],
		"finger5-1.R": [
			8.726646516521443e-9,
			1.7453291811797556e-8,
			-2.6179939993653554e-8,
			0.9999999999999993
		],
		"metacarpal1.L": [
			-8.726646516521435e-9,
			1.7453292366909068e-8,
			3.49065842897289e-8,
			0.9999999999999992
		],
		"toe4-1.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperleg01.L": [
			-0.5668596097053384,
			-0.08671952356614954,
			-0.06656038716771934,
			0.8165290086563086
		],
		"head": [
			-0.09850002179786733,
			-0.09324684995630528,
			0.10352293350252242,
			0.985335360635189
		],
		"toe5-1.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"special01": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"temporalis01.L": [
			8.726646960610678e-9,
			1.7453293255087488e-8,
			-5.2359879987306756e-8,
			0.9999999999999989
		],
		"special04": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"metacarpal2.L": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"metacarpal2.R": [
			2.6179939993653464e-8,
			-1.1102230246251565e-15,
			5.235988002172713e-8,
			0.9999999999999984
		],
		"temporalis01.R": [
			1.7453291256686e-8,
			4.363322836375971e-8,
			2.617994088183192e-8,
			0.9999999999999984
		],
		"toe5-1.L": [
			-0.0985102638667868,
			-0.010291584631484052,
			0.009174964560101976,
			0.9950405173780559
		],
		"risorius02.R": [
			-1.7453292144864443e-8,
			2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"special05.L": [
			0,
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0.9999999999999991
		],
		"finger2-2.L": [
			2.6179939105475068e-8,
			-3.4906584289728926e-8,
			-1.7453293033042906e-8,
			0.999999999999999
		],
		"foot.L": [
			0.37004765793979993,
			0.029536407784904406,
			-0.007856167005055934,
			0.9285098879971185
		],
		"oris06": [
			8.726646072432215e-9,
			5.235988020935167e-8,
			4.624224031074066e-16,
			0.9999999999999982
		],
		"levator06.R": [
			2.2846307649218933e-16,
			2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"orbicularis03.R": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.L": [
			1.7453293033042893e-8,
			6.108652428338246e-8,
			-8.72664518425366e-9,
			0.9999999999999979
		],
		"orbicularis03.L": [
			1.745329214486444e-8,
			-3.490658451177353e-8,
			-4.799202690040438e-16,
			0.9999999999999992
		],
		"foot.R": [
			0.44561863184143247,
			-0.03556570649708324,
			0.009461916007530054,
			0.894466090817645
		],
		"root": [
			-0.3713112455965303,
			0,
			0,
			0.9285084592471698
		],
		"finger2-2.R": [
			2.6179939993653494e-8,
			-8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"risorius02.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"special05.R": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"lowerleg02.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue05.L": [
			-8.72664651652143e-9,
			4.363322880784892e-8,
			8.726645628342965e-9,
			0.9999999999999992
		],
		"finger5-1.L": [
			8.726646516521436e-9,
			-1.7453292366909068e-8,
			2.6179939993653527e-8,
			0.9999999999999996
		],
		"toe4-3.R": [
			-7.853981998095987e-8,
			-6.661338147750939e-16,
			-8.726646064066113e-9,
			0.999999999999997
		],
		"oris03.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"toe4-3.L": [
			-5.235987998730683e-8,
			8.726646627543744e-9,
			8.726645628343008e-9,
			0.9999999999999987
		],
		"finger3-3.L": [
			0,
			0,
			2.617993999365351e-8,
			0.9999999999999998
		],
		"tongue05.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerleg02.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"shoulder01.R": [
			0.09087254836643018,
			-0.1737618620235276,
			0.002022204943558372,
			0.9805839617017372
		],
		"finger3-1.L": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"special06.R": [
			3.046174000298792e-16,
			3.490658440075123e-8,
			-8.726646072432198e-9,
			0.9999999999999992
		],
		"finger4-3.L": [
			-2.6179939993653494e-8,
			-1.745329158975295e-8,
			1.745329303304287e-8,
			0.9999999999999994
		],
		"finger3-2.L": [
			3.807717500373487e-16,
			8.726646183454534e-9,
			-4.36332285858042e-8,
			0.999999999999999
		],
		"upperarm01.R": [
			0.4410053519066275,
			0.07330254106448897,
			0.008376341446908568,
			0.8944667986947115
		],
		"finger3-2.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"upperarm01.L": [
			0.4856055079913079,
			-0.1332458382441155,
			-0.009397524159694522,
			0.8639123356792602
		],
		"special06.L": [
			-2.2846307649218933e-16,
			2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"finger3-1.R": [
			-1.7453292144864456e-8,
			8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"shoulder01.L": [
			0.09087254836643018,
			0.1737618620235276,
			-0.002022204943558372,
			0.9805839617017372
		],
		"lowerarm01.R": [
			0.21397759852833204,
			-0.1916740298471291,
			0.0032808648248347392,
			0.9578433533392663
		],
		"special03": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"upperarm02.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"spine02": [
			-0.09947012417709522,
			-1.1102230246251565e-16,
			0,
			0.9950405491215889
		],
		"spine03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"spine01": [
			-0.19605579706334517,
			1.1102230246251565e-16,
			-1.9721522630525295e-31,
			0.9805927413752646
		],
		"upperarm02.R": [
			-8.726646072432222e-9,
			-2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"spine04": [
			0.09946979995889645,
			-1.1102230246251565e-16,
			0,
			0.9950405815322999
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			0.27656927235971424,
			0.2477285456887981,
			-0.004244312451367182,
			0.9285052455689988
		],
		"finger5-3.L": [
			-3.4906584289728906e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"oris01": [
			-6.108652428338218e-8,
			2.617994065978735e-8,
			1.7453290368509142e-8,
			0.9999999999999977
		],
		"oris02": [
			-4.363322858580417e-8,
			-8.726646516521441e-9,
			4.068768463957589e-16,
			0.999999999999999
		],
		"oris05": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"risorius03.R": [
			-8.726645184253789e-9,
			-3.490658440075123e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"finger2-3.L": [
			-2.617993999365348e-8,
			-8.726646738566046e-9,
			-2.6179939993653468e-8,
			0.9999999999999991
		],
		"toe3-3.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger3-3.R": [
			6.981316857945734e-8,
			8.726646627543744e-9,
			-8.72664562834299e-9,
			0.9999999999999977
		],
		"finger2-3.R": [
			8.726646516521445e-9,
			-8.726646405499139e-9,
			3.490658428972881e-8,
			0.9999999999999996
		],
		"toe3-3.L": [
			1.7453292144864453e-8,
			-8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"risorius03.L": [
			7.615435000746988e-16,
			4.363322858580432e-8,
			-1.7453292144864436e-8,
			0.9999999999999989
		]
	},
	"Harvey_StandingFashion2": {
		"toe1-1.L": [
			2.617993999365346e-8,
			5.235987998730707e-8,
			1.361416935280011e-15,
			0.9999999999999983
		],
		"finger5-2.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"finger1-3.R": [
			1.745329303304289e-8,
			-2.6179940104675836e-8,
			1.745329125668605e-8,
			0.9999999999999996
		],
		"toe5-2.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe4-2.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"clavicle.R": [
			0.026519303829748597,
			0.09584509884127579,
			-0.003301743419716341,
			0.9950374576079444
		],
		"neck03": [
			1.2673447779378008e-8,
			0.018629062991703527,
			-0.046316568119267154,
			0.9987530893717949
		],
		"neck02": [
			-8.429587546541338e-10,
			0.013258552989972916,
			-0.048128570206776015,
			0.9987531484318152
		],
		"neck01": [
			-1.6845095417832065e-8,
			0.0883009236135972,
			0.04585422285406301,
			0.9950378571368202
		],
		"clavicle.L": [
			-8.72664607243222e-9,
			2.220446049250313e-16,
			4.3633228492591465e-8,
			0.999999999999999
		],
		"toe5-2.L": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"toe4-2.L": [
			-8.726646072432223e-9,
			-3.490658451177353e-8,
			3.180207328966892e-16,
			0.9999999999999998
		],
		"finger5-2.L": [
			0.027131535657061015,
			-0.02826578131499269,
			-0.09143242344248376,
			0.9950402189474441
		],
		"finger1-3.L": [
			-8.726646072432223e-9,
			3.490658451177353e-8,
			-3.180207328966892e-16,
			0.9999999999999998
		],
		"toe1-1.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"oculi02.L": [
			-4.36332285858042e-8,
			-8.726645184253812e-9,
			1.7453292144864443e-8,
			0.9999999999999989
		],
		"oculi01.L": [
			-4.3633228585804245e-8,
			1.7453293255087488e-8,
			1.745329125668602e-8,
			0.999999999999999
		],
		"jaw": [
			1.7453292144864446e-8,
			3.490658440075123e-8,
			-8.726645628343005e-9,
			0.9999999999999993
		],
		"finger4-2.R": [
			3.490658428972884e-8,
			8.726645517320719e-9,
			1.7453292144864436e-8,
			0.9999999999999991
		],
		"oculi01.R": [
			1.7453292144864446e-8,
			-4.440892098500626e-16,
			1.7453292108381275e-8,
			0.9999999999999999
		],
		"oculi02.R": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"wrist.R": [
			0.1362956253989389,
			0.16461491780054915,
			0.04394549398512758,
			0.9759068730637338
		],
		"finger1-1.L": [
			1.7453290368507637e-8,
			-5.235988020935167e-8,
			-3.490658606608566e-8,
			0.9999999999999979
		],
		"tongue07.R": [
			4.3633228585804245e-8,
			-1.7453293255087488e-8,
			1.745329125668602e-8,
			0.999999999999999
		],
		"eye.R": [
			0,
			0,
			0,
			1
		],
		"finger2-1.R": [
			-2.6179938217296714e-8,
			-3.490658262439439e-8,
			6.108652428337613e-8,
			0.9999999999999971
		],
		"finger4-3.R": [
			-1.1102230246251565e-16,
			-8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"finger2-1.L": [
			0.3290153967316793,
			-0.20674465820472165,
			-0.22125538548853732,
			0.8944560187117235
		],
		"eye.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue07.L": [
			3.4906584289728754e-8,
			-4.363322880784892e-8,
			-8.726647404700152e-9,
			0.9999999999999986
		],
		"wrist.L": [
			-0.07739409278865442,
			-0.06199631490648472,
			-0.007958005857571832,
			0.995039336650671
		],
		"finger5-3.R": [
			-8.726645628343032e-9,
			-2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"lowerleg01.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"lowerarm02.L": [
			-8.726646072432222e-9,
			-2.220446049250313e-16,
			-3.490658426895706e-8,
			0.9999999999999992
		],
		"oris07.L": [
			3.490658428972884e-8,
			-8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"oris07.R": [
			4.569261529843771e-16,
			5.235988009832937e-8,
			-8.726646072432165e-9,
			0.9999999999999987
		],
		"tongue00": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"lowerarm02.R": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"lowerleg01.L": [
			0.022545554305726596,
			-0.28614611799422174,
			-0.013435482861257389,
			0.9578264899960587
		],
		"tongue03": [
			1.7453291256686003e-8,
			5.235987976526246e-8,
			1.7453293033042863e-8,
			0.9999999999999982
		],
		"finger1-1.R": [
			-0.022815795026878954,
			-0.09446273543572004,
			-0.021365828599281562,
			0.99503755330116
		],
		"metacarpal4.L": [
			8.72664474016463e-9,
			-2.617993888343051e-8,
			-5.235987998730668e-8,
			0.9999999999999984
		],
		"finger1-2.R": [
			-1.7453292144864446e-8,
			1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"pelvis.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-3.L": [
			1.745329303304287e-8,
			-3.490658440075123e-8,
			1.7453291256686037e-8,
			0.999999999999999
		],
		"toe5-3.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"levator05.L": [
			1.745329214486445e-8,
			-8.726646294476836e-9,
			1.745329214486445e-8,
			0.9999999999999998
		],
		"finger4-1.L": [
			0.2100979874259464,
			-0.1176802827332688,
			-0.37677885235660163,
			0.8944539580952322
		],
		"finger4-1.R": [
			8.726647404699846e-9,
			-4.363322880784892e-8,
			2.617993999365346e-8,
			0.9999999999999984
		],
		"levator05.R": [
			-2.220446049250313e-16,
			1.745329203384216e-8,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe5-3.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe2-3.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.21941437868023406,
			-0.14772523670822235,
			-0.3605438446752431,
			0.8944510724095874
		],
		"toe2-1.L": [
			2.617993999365347e-8,
			2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"finger1-2.L": [
			0.06182842985014558,
			0.09975856204810207,
			0.07633931935267199,
			0.9901503839726222
		],
		"pelvis.L": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"metacarpal4.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"tongue04": [
			6.108652428338209e-8,
			-1.7453292144864463e-8,
			-1.0899510809257394e-15,
			0.999999999999998
		],
		"toe3-2.L": [
			-1.7453292144864446e-8,
			3.490658440075123e-8,
			8.726645628343005e-9,
			0.9999999999999993
		],
		"levator03.R": [
			2.617993999365347e-8,
			2.6179940437742744e-8,
			-8.726645184253845e-9,
			0.9999999999999996
		],
		"upperleg02.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"upperleg02.L": [
			1.745329214486445e-8,
			8.726646627543744e-9,
			-2.6179939993653573e-8,
			0.9999999999999997
		],
		"levator03.L": [
			1.745329214486443e-8,
			-5.235987998730707e-8,
			-8.662785736608193e-16,
			0.999999999999998
		],
		"toe3-2.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"metacarpal3.L": [
			-4.569261529843771e-16,
			-5.235988009832937e-8,
			-8.726646072432165e-9,
			0.9999999999999987
		],
		"tongue01": [
			2.617993999365348e-8,
			4.363322869682662e-8,
			1.035761105051169e-15,
			0.9999999999999987
		],
		"breast.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"temporalis02.R": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue02": [
			0,
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0.9999999999999992
		],
		"oris04.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"oris04.L": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"temporalis02.L": [
			-1.745329303304284e-8,
			5.235988009832937e-8,
			8.726645184253813e-9,
			0.9999999999999986
		],
		"breast.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris03.R": [
			-8.726645184253792e-9,
			1.745329203384216e-8,
			-4.363322858580425e-8,
			0.9999999999999988
		],
		"oris06.L": [
			2.6179939105475058e-8,
			2.617993943854202e-8,
			2.6179940881831917e-8,
			0.9999999999999991
		],
		"orbicularis04.R": [
			2.6179939993653484e-8,
			2.6179940104675836e-8,
			8.045503725131716e-16,
			0.9999999999999991
		],
		"toe1-2.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe1-2.L": [
			-1.7453292144864473e-8,
			4.363322880784892e-8,
			-8.726646960610506e-9,
			0.9999999999999988
		],
		"orbicularis04.L": [
			2.6179939993653464e-8,
			-8.726645295276114e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"metacarpal3.R": [
			-8.726645184253789e-9,
			-3.490658440075123e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"oris06.R": [
			-3.046174000298792e-16,
			-3.490658440075123e-8,
			-8.726646072432198e-9,
			0.9999999999999992
		],
		"levator04.L": [
			8.726645628343012e-9,
			4.3633228474782015e-8,
			8.726646516521458e-9,
			0.9999999999999989
		],
		"tongue06.L": [
			8.726645628343017e-9,
			2.6179939993653534e-8,
			1.7453292144864436e-8,
			0.9999999999999996
		],
		"toe2-2.L": [
			-8.726646516521438e-9,
			-3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"toe2-2.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"tongue06.R": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"levator04.R": [
			0,
			0,
			1.745329214486446e-8,
			1
		],
		"toe4-1.L": [
			1.7453292144864407e-8,
			6.108652472747167e-8,
			1.0183439690065433e-15,
			0.9999999999999984
		],
		"upperleg01.R": [
			0.0007085242571998434,
			0.015130138202503751,
			0.04756873870209532,
			0.9987531186482685
		],
		"metacarpal1.R": [
			2.617993999365353e-8,
			-1.745329336610979e-8,
			1.7453291256686023e-8,
			0.9999999999999997
		],
		"levator02.R": [
			2.6179940881831897e-8,
			2.6179940992854256e-8,
			-2.6179939105475064e-8,
			0.9999999999999988
		],
		"toe3-1.L": [
			0,
			6.981316857945734e-8,
			-2.220446049250313e-16,
			0.9999999999999974
		],
		"toe3-1.R": [
			0,
			0,
			0,
			1
		],
		"levator02.L": [
			-1.5230870001493993e-16,
			-8.726646183454534e-9,
			-1.7453292144864466e-8,
			0.9999999999999999
		],
		"finger5-1.R": [
			-8.726646072432225e-9,
			-2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"metacarpal1.L": [
			3.490658428972884e-8,
			-8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"toe4-1.R": [
			3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"upperleg01.L": [
			-0.17295655547697827,
			0.2813240507582244,
			0.007024911504323941,
			0.943871526745499
		],
		"head": [
			0.09744073591201777,
			0.19212325151530263,
			-0.0588567730495467,
			0.974746038452225
		],
		"toe5-1.R": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"special01": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"temporalis01.L": [
			1.3707785118926925e-15,
			5.235988009832937e-8,
			-2.617993999365348e-8,
			0.9999999999999982
		],
		"special04": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"metacarpal2.L": [
			-1.7453293921221352e-8,
			-2.6179941881032676e-8,
			-7.853981998095827e-8,
			0.9999999999999964
		],
		"metacarpal2.R": [
			-1.7453293033042797e-8,
			1.7453293144065185e-8,
			6.981316857945734e-8,
			0.9999999999999972
		],
		"temporalis01.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"toe5-1.L": [
			2.6179939993653504e-8,
			3.4906584733818136e-8,
			-8.726645184253808e-9,
			0.9999999999999991
		],
		"risorius02.R": [
			-2.6179939993653504e-8,
			1.7453292144864463e-8,
			-4.776313300554488e-16,
			0.9999999999999993
		],
		"special05.L": [
			0,
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0.9999999999999991
		],
		"finger2-2.L": [
			0.3311544594059638,
			-0.2085202743869332,
			-0.2163422243089678,
			0.8944562936030972
		],
		"foot.L": [
			0.06587654629537244,
			0.3423500556764799,
			-0.03546603430051175,
			0.9365889602368268
		],
		"oris06": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"levator06.R": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"orbicularis03.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.L": [
			1.745329214486444e-8,
			4.440892098500626e-16,
			-1.7453292016352737e-8,
			0.9999999999999994
		],
		"orbicularis03.L": [
			3.046174000298796e-16,
			-3.4906584178706623e-8,
			8.726646072432218e-9,
			0.9999999999999994
		],
		"foot.R": [
			-0.09913256284882312,
			0.00791498369865351,
			-0.002103861465546554,
			0.9950405327337212
		],
		"root": [
			0.09946978542504491,
			-1.1102230246251565e-16,
			0,
			0.9950405829851845
		],
		"finger2-2.R": [
			-8.726646516521436e-9,
			1.7453292366909068e-8,
			2.6179939993653527e-8,
			0.9999999999999996
		],
		"risorius02.L": [
			-2.617993999365346e-8,
			-3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"special05.R": [
			-1.745329214486445e-8,
			-1.7453291922819858e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"lowerleg02.L": [
			0,
			0,
			0,
			1
		],
		"tongue05.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			-0.09209988358144425,
			-0.033378379802469604,
			-0.017275042867755573,
			0.9950402344126416
		],
		"toe4-3.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris03.L": [
			-2.6179939993653474e-8,
			8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"toe4-3.L": [
			-4.3633228585804027e-8,
			4.3633228918871225e-8,
			1.745329036850777e-8,
			0.9999999999999984
		],
		"finger3-3.L": [
			0.25900167548487096,
			-0.18840750624158242,
			-0.3120586676017559,
			0.8944496249999069
		],
		"tongue05.R": [
			1.745329214486445e-8,
			1.7453291922819858e-8,
			-1.745329214486445e-8,
			0.9999999999999993
		],
		"lowerleg02.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"shoulder01.R": [
			0.0009138537104710897,
			-0.0006807052698341032,
			-0.09946342431120198,
			0.9950405663770809
		],
		"finger3-1.L": [
			0.2533564373639661,
			-0.16811730629081212,
			-0.3278790827314148,
			0.8944508896965593
		],
		"special06.R": [
			3.046174000298792e-16,
			3.490658440075123e-8,
			-8.726646072432198e-9,
			0.9999999999999992
		],
		"finger4-3.L": [
			0.21689794187232256,
			-0.13088071347611652,
			-0.36848312094352353,
			0.8944527439900075
		],
		"finger3-2.L": [
			0.2592439054145594,
			-0.19318926985779494,
			-0.30891904667117837,
			0.8944492865003526
		],
		"upperarm01.R": [
			0.18864793916275174,
			0.20128536488929694,
			0.23703933101357424,
			0.9315087291505469
		],
		"finger3-2.R": [
			2.617994088183188e-8,
			-5.2359880320373975e-8,
			8.7266447401646e-9,
			0.9999999999999986
		],
		"upperarm01.L": [
			-0.18737098251375128,
			-0.393470178000108,
			-0.40082957003529596,
			0.8058591624606093
		],
		"special06.L": [
			-8.72664651652143e-9,
			2.617994021569814e-8,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"finger3-1.R": [
			8.726645628343017e-9,
			1.7453292144864463e-8,
			1.7453292144864456e-8,
			0.9999999999999994
		],
		"shoulder01.L": [
			0.001800967393006309,
			0.0013419121301981862,
			0.19604237850970516,
			0.9805928521137316
		],
		"lowerarm01.R": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"special03": [
			0,
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0.9999999999999987
		],
		"upperarm02.L": [
			-1.7453292144864433e-8,
			2.617994021569814e-8,
			-4.927555263958927e-16,
			0.9999999999999996
		],
		"spine02": [
			1.2661307725225092e-7,
			-0.09964083535636203,
			0.09835290639219825,
			0.9901507005166831
		],
		"spine03": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"spine01": [
			-9.508634854428684e-8,
			0.009774396222866799,
			0.09898895723755693,
			0.9950405255684265
		],
		"upperarm02.R": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"spine04": [
			-0.09947008784247237,
			-8.683367025419386e-9,
			8.680401843634942e-10,
			0.9950405527538114
		],
		"spine05": [
			4.51524408044939e-8,
			0.03079151281710457,
			-0.1365555586451547,
			0.9901537568183749
		],
		"lowerarm01.L": [
			-0.6620053531367032,
			-0.4735193377988919,
			-0.06449521457637153,
			0.5773809110505774
		],
		"finger5-3.L": [
			0.0773978719121952,
			-0.07440648737889288,
			-0.2664663617779022,
			0.957845980364404
		],
		"oris01": [
			-1.7453292144864446e-8,
			-3.490658440075123e-8,
			-8.726645628343005e-9,
			0.9999999999999993
		],
		"oris02": [
			-2.6179939993653527e-8,
			8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"oris05": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"risorius03.R": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"finger2-3.L": [
			0.32964018186311045,
			-0.22253117467697314,
			-0.2043666691087311,
			0.8944559750795704
		],
		"toe3-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger3-3.R": [
			1.7453293033042916e-8,
			2.617994110387656e-8,
			-2.6179939105475286e-8,
			0.9999999999999992
		],
		"finger2-3.R": [
			9.13852305968756e-16,
			-2.6179939993653534e-8,
			3.4906584289728846e-8,
			0.9999999999999991
		],
		"toe3-3.L": [
			-2.6179940881831874e-8,
			-4.363322880784892e-8,
			-1.7453291256686013e-8,
			0.9999999999999986
		],
		"risorius03.L": [
			2.6179939993653504e-8,
			1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		]
	},
	"gym01": {
		"toe1-1.L": [
			0.2170465349113011,
			0.021738528840732463,
			-0.01648314345853315,
			0.9757799670153938
		],
		"finger5-2.R": [
			-0.036413017387469715,
			-0.044150392350860046,
			-0.12097405769023285,
			0.991004597560458
		],
		"finger1-3.R": [
			-0.3842293840720182,
			0.06518663504286792,
			0.14930647865190944,
			0.9087497226739563
		],
		"toe5-2.R": [
			0.25937301058376716,
			-0.01569185909699522,
			-0.03364251316501255,
			0.9650635151360426
		],
		"toe4-2.R": [
			0.2417484349584718,
			-0.02044870235109353,
			-0.02469443093069126,
			0.9698091203161041
		],
		"clavicle.R": [
			-0.06629181759869067,
			0.009215963475255107,
			-0.2272226305667887,
			0.971540188100829
		],
		"neck03": [
			-0.14707826699586257,
			-8.795368788838687e-8,
			-5.75024404410739e-8,
			0.9891248573246367
		],
		"neck02": [
			-0.14314962582654495,
			-8.772467330331324e-8,
			-5.785122087733774e-8,
			0.989701058211877
		],
		"neck01": [
			-0.09533999878436522,
			-5.628136157120878e-8,
			-3.844247868923187e-8,
			0.9954447672431616
		],
		"clavicle.L": [
			-0.06629185917365961,
			-0.009215952846069242,
			0.22722264947498502,
			0.9715401809426141
		],
		"toe5-2.L": [
			0.25937301915587396,
			0.015691848217163296,
			0.03364224946539145,
			0.9650635222017275
		],
		"toe4-2.L": [
			0.2417484421323891,
			0.020448630580120586,
			0.024694357334795754,
			0.969809121915123
		],
		"finger5-2.L": [
			-0.04385189800311493,
			0.1399810644212619,
			0.2539941422057351,
			0.9560174100769231
		],
		"finger1-3.L": [
			-0.38422944019965366,
			-0.06518666333438505,
			-0.14930651948542623,
			0.9087496902042597
		],
		"toe1-1.R": [
			0.2170465866664305,
			-0.02173852727472969,
			0.01648317967274273,
			0.9757799549264442
		],
		"oculi02.L": [
			2.617994177001044e-8,
			3.490658639915267e-8,
			-5.2359878210949374e-8,
			0.9999999999999979
		],
		"oculi01.L": [
			-8.726645628343007e-9,
			1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		],
		"jaw": [
			7.853981998095985e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999969
		],
		"finger4-2.R": [
			-0.05620973408100811,
			-0.04301212647684294,
			-0.0900066189867575,
			0.9934229871052187
		],
		"oculi01.R": [
			-1.7453292144864433e-8,
			2.617994021569814e-8,
			-4.927555263958927e-16,
			0.9999999999999996
		],
		"oculi02.R": [
			-6.108652428338193e-8,
			3.490658440075123e-8,
			8.726643851989352e-9,
			0.9999999999999974
		],
		"oris03.L": [
			3.490658251337199e-8,
			-5.235987821095023e-8,
			-2.6179941770010284e-8,
			0.9999999999999977
		],
		"finger1-1.L": [
			0.010288046357032758,
			0.06896106276039371,
			0.08925161606933044,
			0.9935656379696944
		],
		"tongue07.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"eye.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"finger2-1.R": [
			-2.6179939993653494e-8,
			1.745329158975295e-8,
			-1.745329303304287e-8,
			0.9999999999999994
		],
		"finger4-3.R": [
			-0.07054264375862353,
			-0.047737033554909325,
			-0.11843339034309162,
			0.9893019979211418
		],
		"finger2-1.L": [
			-6.981316857945728e-8,
			-8.726644740164602e-9,
			2.617994088183179e-8,
			0.9999999999999974
		],
		"eye.L": [
			-8.726645628343032e-9,
			8.726645295276114e-9,
			-3.490658428972877e-8,
			0.9999999999999992
		],
		"tongue07.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"wrist.L": [
			-0.11190048489211982,
			0.12950888751349343,
			0.12302881116946458,
			0.9775324246070581
		],
		"finger5-3.R": [
			-0.03018835608033691,
			-0.03415093101813349,
			-0.10269956116974598,
			0.9936675385677564
		],
		"lowerleg01.R": [
			5.2359879987306836e-8,
			5.551115123125783e-16,
			-8.726646040608206e-9,
			0.9999999999999987
		],
		"lowerarm02.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			2.617993999365343e-8,
			0.9999999999999992
		],
		"oris07.L": [
			-1.7453292144864443e-8,
			2.220446049250313e-16,
			2.6179940054284205e-8,
			0.9999999999999996
		],
		"oris07.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue00": [
			1.221730485667622e-7,
			1.1102230246251565e-16,
			0,
			0.9999999999999927
		],
		"lowerarm02.R": [
			-2.6179941770010333e-8,
			-2.617994165898807e-8,
			-6.108652428338132e-8,
			0.9999999999999972
		],
		"lowerleg01.L": [
			0.08359184408870164,
			-0.007767692652587255,
			-0.001183174643080434,
			0.9964690996967593
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.008754389782450741,
			-0.05004230790150144,
			-0.07799526005934623,
			0.9956585094738577
		],
		"metacarpal4.L": [
			-0.1523022533721337,
			0.0455881571779847,
			0.25934563626914076,
			0.9526098805340203
		],
		"finger1-2.R": [
			-3.1984830179510645e-15,
			6.108652450542706e-8,
			5.2359879987306737e-8,
			0.9999999999999968
		],
		"pelvis.R": [
			8.726646072432233e-9,
			8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe2-1.R": [
			0.0939124482002168,
			-0.009370729362296992,
			0.006986146717008939,
			0.9955118458653863
		],
		"toe2-3.L": [
			0.29636595853244874,
			0.026480318965789507,
			-0.009318131766153379,
			0.9546618164308247
		],
		"toe5-3.L": [
			0.02901190894624732,
			0.0027484636448438238,
			-0.0008470246939317155,
			0.9995749284751273
		],
		"levator05.L": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"finger4-1.L": [
			-0.03768286410149116,
			0.02405414281287732,
			0.06726346602727674,
			0.9967331769860195
		],
		"finger4-1.R": [
			-0.03768294578400056,
			-0.024054219738627536,
			-0.06726348605584388,
			0.9967331706898398
		],
		"levator05.R": [
			4.3633228585804086e-8,
			-1.7453292144864463e-8,
			-8.726646960611766e-9,
			0.9999999999999989
		],
		"toe5-3.R": [
			0.029011951699968258,
			-0.002748444774610004,
			0.0008469727232042092,
			0.9995749273301557
		],
		"toe2-3.R": [
			0.2963660724148011,
			-0.026480422841166806,
			0.009318024001720934,
			0.9546617792476462
		],
		"finger4-2.L": [
			-0.05620973792997263,
			0.043012124446033195,
			0.09000657137386377,
			0.9934229912892112
		],
		"toe2-1.L": [
			0.09391245550386362,
			0.009370726549843944,
			-0.006986120719583229,
			0.9955118453853044
		],
		"finger1-2.L": [
			-3.4906584289728754e-8,
			4.363322880784892e-8,
			-8.726647404700152e-9,
			0.9999999999999986
		],
		"pelvis.L": [
			-4.363322858580417e-8,
			8.726646516521441e-9,
			-4.068768463957589e-16,
			0.999999999999999
		],
		"metacarpal4.R": [
			-0.15230219724017713,
			-0.04558812667595313,
			-0.25934571716607585,
			0.9526098689440525
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			0.29552474883738666,
			0.027584828334026867,
			-0.004742467422866823,
			0.9549249756253758
		],
		"levator03.R": [
			8.726646072432225e-9,
			6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"upperleg02.R": [
			0.0009161701964136525,
			0.0017214372580739434,
			0.0770737869282492,
			0.9970234845049931
		],
		"upperleg02.L": [
			0.039704439502899036,
			0.0036625158906116173,
			-0.07612923283839072,
			0.9963003981573779
		],
		"levator03.L": [
			1.7453292144864387e-8,
			-1.5543122344752192e-15,
			8.726645715545856e-8,
			0.9999999999999961
		],
		"toe3-2.R": [
			0.29552484353467656,
			-0.027584823422101667,
			0.004742449046157227,
			0.9549249465521473
		],
		"metacarpal3.L": [
			-0.19941700893566633,
			0.10939153902379695,
			0.20199315513117014,
			0.9526096330697648
		],
		"tongue01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"breast.L": [
			2.7755575615628914e-17,
			-8.726645961409929e-9,
			8.726646072432226e-9,
			1
		],
		"temporalis02.R": [
			4.363322858580413e-8,
			-2.617993943854202e-8,
			-2.6179940881831894e-8,
			0.9999999999999987
		],
		"tongue02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris04.R": [
			4.363322858580417e-8,
			-1.7453292255886765e-8,
			8.726645184253984e-9,
			0.9999999999999989
		],
		"oris04.L": [
			8.726645717160763e-8,
			8.72664507323151e-9,
			8.726646960610795e-9,
			0.9999999999999961
		],
		"temporalis02.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"breast.R": [
			-8.726645628343061e-9,
			8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"oris03.R": [
			-1.2184696001195143e-15,
			3.4906584178706623e-8,
			3.4906584289728846e-8,
			0.9999999999999988
		],
		"oris06.L": [
			2.6179939993653484e-8,
			-2.6179940104675836e-8,
			-8.045503725131716e-16,
			0.9999999999999991
		],
		"orbicularis04.R": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"toe1-2.R": [
			0.19817373833436291,
			-0.017749929789853902,
			0.029442491089341133,
			0.9795638055509671
		],
		"toe1-2.L": [
			0.19817377087326066,
			0.01774994924581408,
			-0.029442493794511818,
			0.9795637985342269
		],
		"orbicularis04.L": [
			8.726645717160768e-8,
			-8.726646960610651e-9,
			8.72664518425463e-9,
			0.9999999999999961
		],
		"metacarpal3.R": [
			-0.20972596038118205,
			-0.07365488146755439,
			-0.10223458032150469,
			0.9696071733257114
		],
		"oris06.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"levator04.L": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			0.28618676470018445,
			0.02584317364953559,
			-0.015154944258178614,
			0.957705379409917
		],
		"toe2-2.R": [
			0.2861867965149878,
			-0.025843140388580266,
			0.015154979953888651,
			0.9577053702355134
		],
		"tongue06.R": [
			-3.0461740002987937e-16,
			-8.726646183454534e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"levator04.R": [
			1.3707785118926925e-15,
			5.235988009832937e-8,
			-2.617993999365348e-8,
			0.9999999999999982
		],
		"toe4-1.L": [
			0.1659921035561435,
			0.016932592612242336,
			-0.023570047175281477,
			0.9856999349399337
		],
		"upperleg01.R": [
			2.6179939993653494e-8,
			-8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"metacarpal1.R": [
			-0.2368207626832259,
			-0.15303932008283938,
			-0.11415044157222232,
			0.9526093478229072
		],
		"levator02.R": [
			-1.7453289480329204e-8,
			4.3633226698425176e-8,
			-5.23598799873068e-8,
			0.9999999999999973
		],
		"toe3-1.L": [
			0.10913678422998693,
			0.011135133504154071,
			-0.008045831411231047,
			0.9939318063764153
		],
		"toe3-1.R": [
			0.10913684205332524,
			-0.011135143253732771,
			0.008045839093656297,
			0.9939317998558178
		],
		"levator02.L": [
			2.617994088183188e-8,
			5.2359880320373975e-8,
			-8.7266447401646e-9,
			0.9999999999999986
		],
		"finger5-1.R": [
			0.17544631271936778,
			-0.06233827057018548,
			0.23990779261450307,
			0.9527732061820028
		],
		"metacarpal1.L": [
			-0.23682073084169775,
			0.1530392235131498,
			0.11415051241119242,
			0.9526093627643802
		],
		"toe4-1.R": [
			0.16599212968097968,
			-0.016932489088841374,
			0.023570003052892488,
			0.9856999333739026
		],
		"upperleg01.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"head": [
			0,
			0,
			0,
			1
		],
		"toe5-1.R": [
			0.06724599408858715,
			-0.006415049968211739,
			0.0022475758339133216,
			0.9977132713439336
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			3.4906584289728793e-8,
			-1.7453292366909068e-8,
			-8.7266465165216e-9,
			0.9999999999999996
		],
		"special04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-0.19699856898658946,
			0.10704668419120256,
			0.20559069274626238,
			0.9526095938405285
		],
		"metacarpal2.R": [
			-0.20555484253416717,
			-0.07922115955791731,
			-0.1282983191487618,
			0.9669595420143776
		],
		"temporalis01.R": [
			8.72664651652144e-9,
			1.7453291811797556e-8,
			-1.7453292144864453e-8,
			0.9999999999999993
		],
		"toe5-1.L": [
			0.06724592776144855,
			0.006415066557032834,
			-0.002247706576722639,
			0.9977132754131901
		],
		"risorius02.R": [
			1.745329303304288e-8,
			-1.7453293144065185e-8,
			3.490658428972881e-8,
			0.9999999999999989
		],
		"special05.L": [
			-2.220446049250313e-16,
			1.745329203384216e-8,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"finger2-2.L": [
			-0.11563156262256569,
			0.07534744125747284,
			0.07091376203384735,
			0.9878883252552499
		],
		"foot.L": [
			0.338973984163705,
			0.030899090889597525,
			0.0021636391878292046,
			0.9402857028094415
		],
		"toe3-3.R": [
			0.020976196885372035,
			-0.0019099903788041273,
			-0.0005392346986176985,
			0.9997780055226856
		],
		"levator06.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"orbicularis03.R": [
			-8.726646072432225e-9,
			-6.661338147750939e-16,
			-2.6179940047656725e-8,
			1
		],
		"levator06.L": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"orbicularis03.L": [
			2.6179939993653497e-8,
			-5.551115123125783e-16,
			1.745329205570242e-8,
			0.9999999999999993
		],
		"foot.R": [
			0.33897393453952707,
			-0.030899033256252983,
			-0.002163561165309192,
			0.9402857227724484
		],
		"root": [
			-0.9854478063348815,
			-0.00710724454702677,
			0.0012245541317995527,
			0.16982522937389788
		],
		"finger2-2.R": [
			-0.115631573349174,
			-0.07534747314021306,
			-0.07091373605155804,
			0.9878883234330641
		],
		"risorius02.L": [
			-7.853981998095985e-8,
			-8.726643851986182e-9,
			2.6179940881831987e-8,
			0.9999999999999967
		],
		"special05.R": [
			8.726644740164589e-9,
			-4.363322858580432e-8,
			-2.617993999365346e-8,
			0.9999999999999987
		],
		"lowerleg02.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"tongue05.L": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			0.17544646148547927,
			0.06233829148539893,
			-0.2399077864317216,
			0.9527731789761597
		],
		"toe4-3.R": [
			0.006990908633910443,
			-0.0006739140675149358,
			0.0005942130889444651,
			0.9999751596650325
		],
		"wrist.R": [
			-0.11190042936285581,
			-0.12950886234964132,
			-0.1230288811648734,
			0.9775324254880907
		],
		"toe4-3.L": [
			0.006990899787551661,
			0.0006739051323629841,
			-0.0005941869821318044,
			0.9999751597484127
		],
		"finger3-3.L": [
			-0.03869890995826436,
			0.030060952899641058,
			0.04508563515484194,
			0.9977805465038355
		],
		"tongue05.R": [
			1.7453292144864436e-8,
			8.726646072432231e-9,
			1.7453292144864443e-8,
			0.9999999999999999
		],
		"lowerleg02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"shoulder01.R": [
			-0.06764257214651435,
			0.26896741094103893,
			0.09951270954724302,
			0.9556035971696862
		],
		"finger3-1.L": [
			-0.06583849807267539,
			0.04696931630818901,
			0.08307354830256812,
			0.9932562413946849
		],
		"special06.R": [
			1.7453292144864443e-8,
			-2.6179940104675836e-8,
			8.726645628343028e-9,
			0.9999999999999997
		],
		"finger4-3.L": [
			-0.07054271666507393,
			0.04773705037668374,
			0.11843336816620335,
			0.9893019945656901
		],
		"finger3-2.L": [
			-0.06607012184291335,
			0.05275291965696749,
			0.07580994335887382,
			0.9935314393391145
		],
		"upperarm01.R": [
			-0.2520741220576424,
			0.27995653857545244,
			-0.3841614958602232,
			0.8429133517723845
		],
		"finger3-2.R": [
			-0.0660701189911843,
			-0.05275291506994395,
			-0.075809739710266,
			0.9935314553113938
		],
		"upperarm01.L": [
			-0.25207405613189604,
			-0.2799566921675054,
			0.38416158097264413,
			0.8429132816846823
		],
		"special06.L": [
			2.6179939993653477e-8,
			2.6179940548765046e-8,
			8.726646960610674e-9,
			0.9999999999999996
		],
		"finger3-1.R": [
			-0.06583858302025376,
			-0.04696934404670139,
			-0.08307353674124052,
			0.9932562354191434
		],
		"shoulder01.L": [
			-0.06764257319163404,
			-0.2689674622153776,
			-0.09951273659192092,
			0.9556035798475333
		],
		"lowerarm01.R": [
			0.13947719061690794,
			-0.2455044180494591,
			-0.04095563425584442,
			0.9584343118015507
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			-0.2747345840883527,
			0.3095695297295157,
			-0.0058543285435734265,
			0.9103039829673103
		],
		"spine02": [
			-0.20159920676674403,
			-1.2192180121051166e-7,
			-7.291076566175165e-8,
			0.979468100466268
		],
		"spine03": [
			-0.12308705454195779,
			-7.572712312775565e-8,
			-4.336863115524661e-8,
			0.9923958771600059
		],
		"spine01": [
			-0.17687528620339463,
			-1.099148883021428e-7,
			-6.891174226499068e-8,
			0.9842332717046554
		],
		"upperarm02.R": [
			-0.27473458404471846,
			-0.309569529680349,
			0.005854342107230066,
			0.9103039829099696
		],
		"spine04": [
			-0.20921624777421932,
			-1.24311326010762e-7,
			-8.049317537858846e-8,
			0.9778693990852023
		],
		"spine05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			0.158113777019088,
			0.21426787984809847,
			-0.02659115767320993,
			0.9635259308995047
		],
		"finger5-3.L": [
			-0.030188339258491556,
			0.034150932041455695,
			0.10269959334905766,
			0.9936675357177832
		],
		"oris01": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"oris02": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris05": [
			0,
			0,
			0,
			1
		],
		"risorius03.R": [
			-5.2359879987306756e-8,
			-2.617994121489886e-8,
			-1.7453290368507855e-8,
			0.9999999999999986
		],
		"finger2-3.L": [
			-0.11230757264923692,
			0.07761258144769645,
			0.06525394534957957,
			0.9884863271401254
		],
		"oris06": [
			0,
			0,
			0,
			1
		],
		"finger3-3.R": [
			-0.03869893397732361,
			-0.030061024450121376,
			-0.04508563997609482,
			0.9977805431987411
		],
		"finger2-3.R": [
			-0.11230751614354388,
			-0.07761251127234003,
			-0.06525387868865808,
			0.9884863434705382
		],
		"toe3-3.L": [
			0.020976187583504082,
			0.0019099738445195191,
			0.000539190655032082,
			0.9997780057731877
		],
		"risorius03.L": [
			-9.599310857311005e-8,
			-1.7453293921221302e-8,
			-1.745329036845209e-8,
			0.999999999999995
		]
	},
	"akimbo01": {
		"toe1-1.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger5-2.R": [
			-0.007098474613368085,
			-0.0010136393303131763,
			0.054511212156468515,
			0.9984874120101385
		],
		"finger1-3.R": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe5-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe4-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"clavicle.R": [
			0.03219157686353345,
			-0.1197167758579123,
			-0.0607462239230738,
			0.9904249048950223
		],
		"neck03": [
			0,
			0,
			0,
			1
		],
		"neck02": [
			0,
			0,
			0,
			1
		],
		"neck01": [
			0,
			0,
			0,
			1
		],
		"clavicle.L": [
			0.032190351362835185,
			0.11971883544506623,
			0.06074276773277671,
			0.9904249077476677
		],
		"toe5-2.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe4-2.L": [
			0,
			0,
			0,
			1
		],
		"finger5-2.L": [
			-0.007098603540197664,
			0.0010136758537272472,
			-0.05451121950006681,
			0.9984874106555663
		],
		"finger1-3.L": [
			-2.2846307649218933e-16,
			-2.6179939993653534e-8,
			-8.726646072432225e-9,
			0.9999999999999996
		],
		"toe1-1.R": [
			0,
			0,
			0,
			1
		],
		"oculi02.L": [
			8.726646072432225e-9,
			2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"oculi01.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"jaw": [
			0,
			0,
			0,
			1
		],
		"finger4-2.R": [
			0.02481472767529215,
			0.005219395915233349,
			0.0607791192938899,
			0.9978290864945463
		],
		"oculi01.R": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"oculi02.R": [
			8.726646072432225e-9,
			-2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"wrist.R": [
			-0.1509185851416901,
			-0.16693060216050726,
			-0.05112418534528539,
			0.9730077452898008
		],
		"finger1-1.L": [
			0.01822103719758957,
			-0.1427045335884809,
			-0.03977512730296772,
			0.9887979314019477
		],
		"tongue07.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"eye.R": [
			0,
			0,
			0,
			1
		],
		"finger2-1.R": [
			0.017758402199636734,
			-0.009658275784549808,
			-0.05559794961139315,
			0.9982485786912972
		],
		"finger4-3.R": [
			0.027844123080724967,
			0.0031707238941178773,
			0.05959678745635931,
			0.997829080677014
		],
		"finger2-1.L": [
			0.017758403123153674,
			0.009658259473892206,
			0.055597942218322156,
			0.998248579244438
		],
		"eye.L": [
			0,
			0,
			0,
			1
		],
		"tongue07.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"wrist.L": [
			-0.15091856220020278,
			0.1669306513897172,
			0.051124233132320535,
			0.9730077378914623
		],
		"finger5-3.R": [
			-0.0037395560732337747,
			-0.005430009374760791,
			0.05458433071404346,
			0.9984873967953045
		],
		"lowerleg01.R": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.L": [
			0.02340591714666124,
			-0.024785591333830514,
			0.028984006153491,
			0.9989983808255398
		],
		"oris07.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"oris07.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"tongue00": [
			0,
			0,
			0,
			1
		],
		"lowerarm02.R": [
			0.023405969291810887,
			0.02478559317802609,
			-0.028984004265933748,
			0.9989983796128183
		],
		"lowerleg01.L": [
			0,
			0,
			0,
			1
		],
		"tongue03": [
			0,
			0,
			0,
			1
		],
		"finger1-1.R": [
			0.018221096456704812,
			0.1427045053307351,
			0.03977508229666455,
			0.9887979361985535
		],
		"metacarpal4.L": [
			-0.043779761193587584,
			0.03223983759986759,
			0.05121152319092049,
			0.9972067515183765
		],
		"finger1-2.R": [
			0.025916868038319316,
			0.1450343469725851,
			0.06245023882366982,
			0.9871136316656692
		],
		"pelvis.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"toe2-1.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"toe2-3.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-3.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"levator05.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"finger4-1.L": [
			-0.03398880180062499,
			0.02808274487258433,
			0.01454705025731596,
			0.9989216706636166
		],
		"finger4-1.R": [
			-0.03398880633971303,
			-0.028082580166663096,
			-0.014547404759401162,
			0.9989216699769559
		],
		"levator05.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			8.72664607243223e-9,
			0.9999999999999996
		],
		"toe5-3.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-3.R": [
			0,
			0,
			0,
			1
		],
		"finger4-2.L": [
			0.024814727731108387,
			-0.005219405540986433,
			-0.06077908056274595,
			0.9978290888019736
		],
		"toe2-1.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-2.L": [
			0.02591687332480505,
			-0.14503437522320095,
			-0.06245023854094705,
			0.9871136273939595
		],
		"pelvis.L": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"metacarpal4.R": [
			-0.04377976492625843,
			-0.03223977790938648,
			-0.05121152694699835,
			0.9972067530914099
		],
		"tongue04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"levator03.R": [
			-8.726646072432228e-9,
			-8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"upperleg02.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"upperleg02.L": [
			0,
			0,
			0,
			1
		],
		"levator03.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"toe3-2.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"metacarpal3.L": [
			-0.043779871130968984,
			0.032239419034935546,
			0.051212890137869865,
			0.9972066900235738
		],
		"tongue01": [
			0,
			0,
			0,
			1
		],
		"breast.L": [
			-8.726646072432225e-9,
			-8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"temporalis02.R": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris04.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"temporalis02.L": [
			0,
			-2.6179939993653504e-8,
			-1.1102230246251565e-16,
			0.9999999999999998
		],
		"breast.R": [
			0,
			0,
			0,
			1
		],
		"oris03.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"oris06.L": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"orbicularis04.R": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe1-2.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"toe1-2.L": [
			8.726646072432231e-9,
			-8.726646294476836e-9,
			-8.72664607243223e-9,
			0.9999999999999999
		],
		"orbicularis04.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal3.R": [
			-0.04377975104384826,
			-0.03223934199930589,
			-0.05121286083974925,
			0.9972066992908735
		],
		"oris06.R": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"levator04.L": [
			-8.726646072432231e-9,
			8.726646294476836e-9,
			8.72664607243223e-9,
			0.9999999999999999
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			0,
			-8.726646072432231e-9,
			2.220446049250313e-16,
			0.9999999999999999
		],
		"toe2-2.R": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"tongue06.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"levator04.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"toe4-1.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperleg01.R": [
			0,
			0,
			0,
			1
		],
		"metacarpal1.R": [
			-0.02829244625494918,
			-0.05618945725549107,
			-0.05433625820277425,
			0.9965389372336463
		],
		"levator02.R": [
			-8.726646516521445e-9,
			8.726646405499139e-9,
			3.490658428972881e-8,
			0.9999999999999996
		],
		"toe3-1.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-1.R": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"levator02.L": [
			-8.726646516521441e-9,
			-8.726646516521441e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"finger5-1.R": [
			-0.06583863875280681,
			-0.030003421611988768,
			-0.023241654114399726,
			0.9971082658632294
		],
		"metacarpal1.L": [
			-0.028292496341818494,
			0.05618949207225998,
			0.05433634485106178,
			0.9965389291240134
		],
		"toe4-1.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"upperleg01.L": [
			0,
			0,
			0,
			1
		],
		"head": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-1.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"special01": [
			0,
			0,
			0,
			1
		],
		"temporalis01.L": [
			1.745329214486445e-8,
			1.7453292366909068e-8,
			-8.726645628343025e-9,
			0.9999999999999999
		],
		"special04": [
			0,
			0,
			0,
			1
		],
		"metacarpal2.L": [
			-0.04377993134153404,
			0.032239430745807596,
			0.051213091303717616,
			0.9972066766704052
		],
		"metacarpal2.R": [
			-0.04377988303973841,
			-0.03223941969821076,
			-0.051213085852012515,
			0.9972066794281235
		],
		"temporalis01.R": [
			1.745329214486445e-8,
			-1.7453292366909068e-8,
			8.726645628343025e-9,
			0.9999999999999999
		],
		"toe5-1.L": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"risorius02.R": [
			-8.726646072432225e-9,
			2.6179939993653534e-8,
			-1.8621685332420096e-16,
			0.9999999999999998
		],
		"special05.L": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"finger2-2.L": [
			0.13766523377172918,
			-0.07053618014353225,
			-0.058024554227729105,
			0.9862586282552908
		],
		"foot.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris06": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			-8.726645628343012e-9,
			4.3633228474782015e-8,
			-8.726646516521458e-9,
			0.9999999999999989
		],
		"orbicularis03.R": [
			0,
			0,
			0,
			1
		],
		"levator06.L": [
			1.523087000149398e-16,
			1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"orbicularis03.L": [
			0,
			0,
			0,
			1
		],
		"foot.R": [
			0,
			0,
			0,
			1
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			0.13766531209547725,
			0.07053621673788824,
			0.058024636204348355,
			0.9862586098824759
		],
		"risorius02.L": [
			-8.726646072432225e-9,
			-2.6179939993653534e-8,
			1.8621685332420096e-16,
			0.9999999999999998
		],
		"special05.R": [
			0,
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0.9999999999999997
		],
		"lowerleg02.L": [
			0,
			0,
			0,
			1
		],
		"tongue05.L": [
			-8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger5-1.L": [
			-0.06583861459053672,
			0.03000342160304359,
			0.02324168224982545,
			0.9971082668031124
		],
		"toe4-3.R": [
			0,
			0,
			0,
			1
		],
		"oris03.L": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"toe4-3.L": [
			0,
			0,
			0,
			1
		],
		"finger3-3.L": [
			0.10254494630939268,
			-0.06344261392363904,
			-0.10790083186425589,
			0.986821655218379
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			0,
			0,
			0,
			1
		],
		"shoulder01.R": [
			0.10953851298984887,
			0.048173141661036256,
			-0.10332112807419244,
			0.9874236208881955
		],
		"finger3-1.L": [
			0.020226993494089636,
			-0.001216805997500403,
			-0.015006702320330382,
			0.99968204295307
		],
		"special06.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"finger4-3.L": [
			0.02784411934944653,
			-0.003170775917341384,
			-0.059596789301417354,
			0.9978290805056237
		],
		"finger3-2.L": [
			0.015150336038310877,
			-0.006706749459545525,
			-0.011051717936191816,
			0.999801653509471
		],
		"upperarm01.R": [
			0.12486469071124591,
			0.2913526574774825,
			0.0007952377823609824,
			0.9484312339812853
		],
		"finger3-2.R": [
			0.015150353721602002,
			0.00670673129978705,
			0.011051769612591075,
			0.9998016527920992
		],
		"upperarm01.L": [
			0.12486350611163635,
			-0.2913513489999404,
			-0.0013106520315405911,
			0.9484312196826276
		],
		"special06.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger3-1.R": [
			0.020226897995923927,
			0.0012168083219550319,
			0.015006657680035234,
			0.9996820455526069
		],
		"shoulder01.L": [
			0.10953948831165414,
			-0.04817152071345909,
			0.10332092417452021,
			0.987423613106501
		],
		"lowerarm01.R": [
			-0.3429991561814005,
			0.3087408101403061,
			-0.01308750977678555,
			0.8870509613886887
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			0.2011695188342199,
			-0.22337872244575152,
			0.0050914279433678,
			0.9537331117309548
		],
		"spine02": [
			0,
			0,
			0,
			1
		],
		"spine03": [
			0,
			0,
			0,
			1
		],
		"spine01": [
			0,
			0,
			0,
			1
		],
		"upperarm02.R": [
			0.2011731192905893,
			0.22337949534756163,
			-0.0049097819856569885,
			0.9537331236640657
		],
		"spine04": [
			0,
			0,
			0,
			1
		],
		"spine05": [
			0,
			0,
			0,
			1
		],
		"lowerarm01.L": [
			-0.3430047074664263,
			-0.3087342733849695,
			0.01309741630585518,
			0.8870509437340319
		],
		"finger5-3.L": [
			-0.003739665902322626,
			0.005429907716012039,
			-0.05458435475670761,
			0.9984873956224626
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			0,
			0,
			0,
			1
		],
		"oris05": [
			0,
			0,
			0,
			1
		],
		"risorius03.R": [
			-3.490658428972884e-8,
			8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"finger2-3.L": [
			0.020711574256038326,
			-0.004972867526232272,
			0.011511036476900355,
			0.9997068556930225
		],
		"toe3-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger3-3.R": [
			0.10254488764056392,
			0.06344260432023807,
			0.1079008909227922,
			0.9868216554747455
		],
		"finger2-3.R": [
			0.02071152125712039,
			0.004972820728396221,
			-0.011510915901293344,
			0.999706858412171
		],
		"toe3-3.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"risorius03.L": [
			-3.490658428972884e-8,
			-8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		]
	},
	"genuflect01": {
		"toe1-1.L": [
			-0.2949977688559316,
			-0.031722294328357825,
			0.017979378505399827,
			0.9548019450970591
		],
		"finger5-2.R": [
			0.0399399693665061,
			0.05435726131343277,
			0.07228642605431443,
			0.9951003766443863
		],
		"finger1-3.R": [
			0.08713282224647013,
			0.04826671906402802,
			0.05844624601326871,
			0.993308729169897
		],
		"toe5-2.R": [
			4.363322858580418e-8,
			-1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"toe4-2.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"clavicle.R": [
			-0.21593393589444254,
			0.08137512089295185,
			-0.12744587553852652,
			0.9646285159775293
		],
		"neck03": [
			0.022997922702844745,
			-0.020349958316658645,
			0.03673340795135076,
			0.9988531581209238
		],
		"neck02": [
			0.055998224720152166,
			-0.018849405485422577,
			0.053869047165628445,
			0.996798387086629
		],
		"neck01": [
			0.10989136525768578,
			-0.006767361460783938,
			0.013665849708711679,
			0.9938266122480317
		],
		"clavicle.L": [
			-0.2644888108945501,
			-0.005185285111361404,
			-0.1133325436730879,
			0.9576922868408667
		],
		"toe5-2.L": [
			-0.03706742997908238,
			-0.003134322239311982,
			0.0005620219438020584,
			0.9993076932507726
		],
		"toe4-2.L": [
			-0.1143179152315243,
			-0.009666375275776629,
			0.0017332774009194084,
			0.9933956770570314
		],
		"finger5-2.L": [
			0.2214415490870635,
			-0.11425040210485726,
			-0.4338720914418728,
			0.8658322552461623
		],
		"finger1-3.L": [
			0.07851023674909893,
			0.0028523437600173063,
			0.07941862198862623,
			0.9937407556008272
		],
		"toe1-1.R": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"oculi02.L": [
			2.6179940881831907e-8,
			3.490658451177353e-8,
			-1.7453291256686053e-8,
			0.9999999999999991
		],
		"oculi01.L": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"jaw": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"finger4-2.R": [
			0.05224145312963716,
			0.060478647897654225,
			0.07575171131594406,
			0.9939189312796497
		],
		"oculi01.R": [
			-2.220446049250313e-16,
			1.745329203384216e-8,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"oculi02.R": [
			2.617993999365348e-8,
			1.1102230246251565e-15,
			-4.363322861862043e-8,
			0.9999999999999989
		],
		"wrist.R": [
			0.139963665049904,
			0.14799483432374694,
			-0.09592968543915524,
			0.9743229428330372
		],
		"finger1-1.L": [
			0.008872094914223888,
			0.07378977034525092,
			0.14534955841549266,
			0.9865849489996537
		],
		"tongue07.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"eye.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"finger2-1.R": [
			0.08713291599528095,
			0.048266806095131454,
			0.05844625982161047,
			0.9933087159047783
		],
		"finger4-3.R": [
			0.03250062752271576,
			0.06018060163300576,
			0.08821777434057708,
			0.9937502848744821
		],
		"finger2-1.L": [
			0.33167447060279076,
			-0.20977850546664767,
			-0.30195890569328465,
			0.868795628135324
		],
		"eye.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"tongue07.L": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			1.745329214262813e-8,
			0.9999999999999999
		],
		"wrist.L": [
			0.12278386496515674,
			0.016024517204742295,
			0.12009109036504105,
			0.9850103894718617
		],
		"finger5-3.R": [
			0.028845493188267877,
			0.05682287998274094,
			0.07522279699580628,
			0.9951284483147494
		],
		"lowerleg01.R": [
			0.7531814459017919,
			-0.06987972201803794,
			-0.0033640027147365907,
			0.6540819654184813
		],
		"lowerarm02.L": [
			0.08147982765102622,
			-0.08299277058578514,
			0.1090140247106258,
			0.9872128342626251
		],
		"oris07.L": [
			3.4906584289728906e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999994
		],
		"oris07.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"tongue00": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"lowerarm02.R": [
			0.19829706261431024,
			0.09538076447608768,
			-0.09618576973215937,
			0.9707363609278913
		],
		"lowerleg01.L": [
			0.8430609385852952,
			0.09049317129464018,
			0.0045681847954097046,
			0.5301305230491782
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.1966013529081958,
			0.02473674101722756,
			0.044029456695271446,
			0.9791820099560824
		],
		"metacarpal4.L": [
			-0.056480724867443446,
			-0.04741142142986521,
			-0.0007205936351160056,
			0.997277075632074
		],
		"finger1-2.R": [
			0.07528454636237979,
			0.0001857600929529024,
			0.03841030382007979,
			0.9964220246123869
		],
		"pelvis.R": [
			0.006429656127765942,
			0.06690473972940669,
			-0.017343819302770846,
			0.9975878945014379
		],
		"toe2-1.R": [
			0,
			0,
			0,
			1
		],
		"toe2-3.L": [
			-0.11599787563160187,
			-0.012473664270424067,
			0.00706977955303972,
			0.9931459705228105
		],
		"toe5-3.L": [
			-0.08292849082771798,
			-0.007012172346577361,
			0.0012573521364200382,
			0.996530036633931
		],
		"levator05.L": [
			-1.7453292144864436e-8,
			-8.881784197001252e-16,
			-4.3633228475580265e-8,
			0.9999999999999988
		],
		"finger4-1.L": [
			0.24642961597444754,
			-0.1768384039114661,
			-0.3979126019505176,
			0.8658326538550631
		],
		"finger4-1.R": [
			0.021968881547337532,
			0.07960629778244499,
			0.0872937270952545,
			0.9927537513435805
		],
		"levator05.R": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"toe5-3.R": [
			6.108652428338212e-8,
			-8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"toe2-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"finger4-2.L": [
			0.246429606417286,
			-0.17683874377244335,
			-0.3979126606322946,
			0.8658325601930975
		],
		"toe2-1.L": [
			-0.2949978083746944,
			-0.03172230633684703,
			0.017979365092588667,
			0.9548019327408516
		],
		"finger1-2.L": [
			0.10338995829869413,
			0.007212790616139886,
			0.0910710137813222,
			0.9904365515384432
		],
		"pelvis.L": [
			-0.0002018965060217111,
			0.06428704052671552,
			-0.044359046317720044,
			0.9969450389404122
		],
		"metacarpal4.R": [
			0.008668748456203322,
			0.10604056324341304,
			0.06821134289280463,
			0.9919815847322888
		],
		"tongue04": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"toe3-2.L": [
			-0.11599786123406355,
			-0.012473665728764183,
			0.007069770860199065,
			0.9931459722479841
		],
		"levator03.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"upperleg02.R": [
			-0.23069242149161254,
			0.0003762553670310087,
			0.0023144108610382574,
			0.973023899295696
		],
		"upperleg02.L": [
			-0.22841121051413252,
			-0.06904701824021575,
			-0.03958842265256627,
			0.9703059233950316
		],
		"levator03.L": [
			8.726645184253878e-9,
			2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"toe3-2.R": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"metacarpal3.L": [
			-0.027468481570919967,
			-0.032414245670215114,
			-0.0026100258485523197,
			0.9990935826852705
		],
		"tongue01": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"breast.L": [
			-2.6179939993653477e-8,
			-8.726645517320719e-9,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"temporalis02.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue02": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris04.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"oris04.L": [
			8.726646516521448e-9,
			8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"temporalis02.L": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"breast.R": [
			-5.235987998730666e-8,
			2.617993932751972e-8,
			-8.726647404699014e-9,
			0.9999999999999984
		],
		"oris03.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"oris06.L": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"orbicularis04.R": [
			3.4906584289728866e-8,
			8.726645961409929e-9,
			1.7169609607764797e-16,
			0.9999999999999993
		],
		"toe1-2.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe1-2.L": [
			-0.1159979152508569,
			-0.012473664723742561,
			0.007069771386237191,
			0.9931459659477859
		],
		"orbicularis04.L": [
			3.4906584289728866e-8,
			-8.726645961409929e-9,
			-1.7169609607764797e-16,
			0.9999999999999993
		],
		"metacarpal3.R": [
			0.03102973360922849,
			0.10643541005682955,
			0.0712034326294693,
			0.9912813577889756
		],
		"oris06.R": [
			2.6179939993653477e-8,
			8.726645517320719e-9,
			1.745329214486445e-8,
			0.9999999999999993
		],
		"levator04.L": [
			-8.726646516521441e-9,
			2.6179940104675836e-8,
			8.726645628343022e-9,
			0.9999999999999998
		],
		"tongue06.L": [
			0,
			0,
			0,
			1
		],
		"toe2-2.L": [
			-0.11599786845795539,
			-0.01247364697012543,
			0.007069777664528096,
			0.9931459715914119
		],
		"toe2-2.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue06.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"levator04.R": [
			2.2846307649218933e-16,
			-2.6179939993653534e-8,
			8.726646072432225e-9,
			0.9999999999999996
		],
		"toe4-1.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"upperleg01.R": [
			-0.5847606056096734,
			1.6134323321814747e-8,
			-2.2388104461535003e-8,
			0.8112059135182678
		],
		"metacarpal1.R": [
			0.08713288331280969,
			0.04826671863996668,
			0.05844628820174115,
			0.9933087213514065
		],
		"levator02.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-1.L": [
			-0.22198913644337162,
			-0.026555643242823668,
			0.016323072707099356,
			0.9745507572263666
		],
		"toe3-1.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator02.L": [
			1.1423153030516055e-15,
			-4.363322858580432e-8,
			2.617993999365348e-8,
			0.9999999999999988
		],
		"finger5-1.R": [
			-0.040976626457202354,
			0.08577148507000198,
			0.08969942480721017,
			0.9914223023627867
		],
		"metacarpal1.L": [
			0.028193612697570612,
			0.03657870617838477,
			0.006301557925001615,
			0.9989131137516878
		],
		"toe4-1.R": [
			8.726646072432228e-9,
			0,
			-1.7453292144864456e-8,
			0.9999999999999998
		],
		"upperleg01.L": [
			0.1384097101926524,
			-0.002372443655489942,
			0.030836410883378605,
			0.9898920342134889
		],
		"head": [
			0.08866220588771434,
			-0.00658972448971662,
			-0.00027663246548664165,
			0.9960399149897325
		],
		"toe5-1.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"special01": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			1.1102230246251565e-16,
			8.726646072432231e-9,
			-8.726646072432235e-9,
			0.9999999999999999
		],
		"special04": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"metacarpal2.L": [
			-0.006897281444472792,
			-0.007613895870518639,
			-0.0008476567713886871,
			0.9999468673766353
		],
		"metacarpal2.R": [
			0.057229307571865014,
			0.07735267419550218,
			0.06595093086966185,
			0.9931726158463462
		],
		"temporalis01.R": [
			8.726646072432225e-9,
			-3.3306690738754696e-16,
			3.490658409227928e-8,
			0.9999999999999994
		],
		"toe5-1.L": [
			-3.490658428972886e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"risorius02.R": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"special05.L": [
			0,
			0,
			0,
			1
		],
		"finger2-2.L": [
			0.30670829338617217,
			-0.25776104171266856,
			-0.29970535053832503,
			0.8658325305750771
		],
		"foot.L": [
			-0.012740426681226677,
			-0.0011961310421582105,
			-0.000020157709029206184,
			0.9999181218440721
		],
		"oris06": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"levator06.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"orbicularis03.R": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"levator06.L": [
			-8.72664651652145e-9,
			8.726646627543744e-9,
			2.6179939993653484e-8,
			0.9999999999999996
		],
		"orbicularis03.L": [
			-2.6179939993653494e-8,
			-8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"foot.R": [
			0.000903341299162239,
			0.009946740070129412,
			-0.01930554532796289,
			0.9997637432193995
		],
		"root": [
			0,
			0,
			0,
			1
		],
		"finger2-2.R": [
			0.08713281458694987,
			0.048266739324860586,
			0.05844628472246168,
			0.9933087265796284
		],
		"risorius02.L": [
			1.7453292144864446e-8,
			-1.7453292255886765e-8,
			-4.946992079080189e-16,
			0.9999999999999999
		],
		"special05.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"lowerleg02.L": [
			0.04342874452992599,
			0.0040772506859585445,
			0.00006872417009944984,
			0.9990482047691125
		],
		"tongue05.L": [
			-1.7453292144864463e-8,
			-8.726645850387627e-9,
			-8.726646072432226e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			0.18988999707297632,
			-0.1487012161900113,
			-0.4312742607812581,
			0.8693861336039448
		],
		"toe4-3.R": [
			-3.4906584289728866e-8,
			5.551115123125783e-16,
			8.726646079670163e-9,
			0.9999999999999994
		],
		"oris03.L": [
			-1.7453292144864436e-8,
			-8.726646072432231e-9,
			1.7453292144864443e-8,
			0.9999999999999999
		],
		"toe4-3.L": [
			-0.06784598734615783,
			-0.005736854393064816,
			0.0010286727768460554,
			0.9976787821413341
		],
		"finger3-3.L": [
			0.25120013702467275,
			-0.21037390171683124,
			-0.38052140832204123,
			0.8647801861998418
		],
		"tongue05.R": [
			-8.726646072432233e-9,
			-8.726645739365324e-9,
			-8.72664607243223e-9,
			0.9999999999999996
		],
		"lowerleg02.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"shoulder01.R": [
			-0.29804886972997624,
			0.01049078581385321,
			0.05176147744417187,
			0.953088434573879
		],
		"finger3-1.L": [
			0.2867485229619001,
			-0.19259962219890447,
			-0.36145318713228897,
			0.8660440309937588
		],
		"special06.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger4-3.L": [
			0.19970612207702063,
			-0.1644809878088236,
			-0.43094476133916776,
			0.864494119198459
		],
		"finger3-2.L": [
			0.2710882692748991,
			-0.21470051184780958,
			-0.3615920215017669,
			0.8658325764604233
		],
		"upperarm01.R": [
			0.045518153990053725,
			-0.011302472027812205,
			0.23063462049451258,
			0.9719094729514423
		],
		"finger3-2.R": [
			0.09153856526852533,
			0.04639791870713228,
			0.055790619044972393,
			0.9931542332562477
		],
		"upperarm01.L": [
			0.11320728215349915,
			-0.21586381328240967,
			-0.16981168980983835,
			0.9548564894194952
		],
		"special06.L": [
			-2.6179939993653504e-8,
			-1.7453292144864463e-8,
			4.776313300554488e-16,
			0.9999999999999993
		],
		"finger3-1.R": [
			0.02786448830107702,
			0.07896026534500644,
			0.09018368643977134,
			0.9923989870452798
		],
		"shoulder01.L": [
			-0.07789332140191176,
			-0.02022689405350908,
			0.022221586230733625,
			0.9965087577855581
		],
		"lowerarm01.R": [
			-0.1720275227262531,
			0.20838180064762657,
			-0.20842110032136624,
			0.9399703194911806
		],
		"special03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"upperarm02.L": [
			0.09270809228737871,
			-0.1573881069719275,
			-0.04466912010051988,
			0.9821603041854593
		],
		"spine02": [
			0.15868034633003764,
			-2.220446049250313e-16,
			5.551115123125783e-17,
			0.9873300095148427
		],
		"spine03": [
			0.1484825640980604,
			8.629911563140524e-9,
			1.29575476857894e-9,
			0.9889150257523978
		],
		"spine01": [
			0.10309245771719092,
			-1.8259948331156295e-8,
			6.880845823673356e-9,
			0.9946717776039633
		],
		"upperarm02.R": [
			0.30248210887430305,
			0.42718668524111614,
			0.09313725086410038,
			0.8469601893035699
		],
		"spine04": [
			0.023139579285456003,
			8.724309608076908e-9,
			2.0193091697199234e-10,
			0.9997322440886321
		],
		"spine05": [
			-0.03392436008765215,
			0.10636682540725906,
			0.003631168812065981,
			0.9937414406466518
		],
		"lowerarm01.L": [
			0.2739169323062453,
			0.09525483003134672,
			0.04756751209538231,
			0.9558417041250556
		],
		"finger5-3.L": [
			0.22144159699846075,
			-0.11425030088545385,
			-0.43387207250701293,
			0.8658322658372253
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"oris05": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			-1.7453292144864443e-8,
			-6.661338147750939e-16,
			-2.6179940059872455e-8,
			0.9999999999999999
		],
		"finger2-3.L": [
			0.3291751481520273,
			-0.25836548818897687,
			-0.26362928651149115,
			0.8691320933237967
		],
		"toe3-3.R": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger3-3.R": [
			0.04832751409447203,
			0.059045813485851584,
			0.0852112144356445,
			0.9934370096919309
		],
		"finger2-3.R": [
			0.08713288337879498,
			0.04826675602575414,
			0.058446247242846444,
			0.9933087219389931
		],
		"toe3-3.L": [
			0.04290467966793778,
			-0.003412754511565863,
			-0.0013472101709264355,
			0.999072433106825
		],
		"risorius03.L": [
			-1.745329214486443e-8,
			-5.235987998730707e-8,
			8.662785736608193e-16,
			0.999999999999998
		]
	},
	"fly02": {
		"toe1-1.L": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger5-2.R": [
			0.16149536913973128,
			0.1958143020853058,
			0.5365328706721632,
			0.8048033819098641
		],
		"finger1-3.R": [
			0.44119465027563526,
			-0.07485084595502733,
			-0.1714394463388918,
			0.8776976402309576
		],
		"toe5-2.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe4-2.R": [
			-4.363322858580418e-8,
			1.7453292144864463e-8,
			-7.615435000746977e-16,
			0.9999999999999989
		],
		"clavicle.R": [
			-0.011073306696043157,
			-0.04261186650146187,
			-0.3556428714334566,
			0.9335843607894486
		],
		"neck03": [
			-0.21164821103129924,
			1.2309928831832906e-7,
			-8.799803801732553e-9,
			0.9773459135675736
		],
		"neck02": [
			-0.1068850546348813,
			5.980383466219763e-8,
			-1.5205890666102758e-8,
			0.9942713840273661
		],
		"neck01": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"clavicle.L": [
			-0.01107329111907355,
			0.042611850083084546,
			0.35564293079784504,
			0.9335843391091178
		],
		"toe5-2.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe4-2.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"finger5-2.L": [
			0.16149532453058058,
			-0.19581445515726648,
			-0.5365326923543382,
			0.8048034724957581
		],
		"finger1-3.L": [
			0.441194707102631,
			0.07485078350410368,
			0.17143952142697078,
			0.8776976023245915
		],
		"toe1-1.R": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oculi02.L": [
			3.49065860660857e-8,
			-4.363323047318346e-8,
			2.6179938217296602e-8,
			0.999999999999998
		],
		"oculi01.L": [
			-1.523087000149398e-16,
			-1.7453292144864463e-8,
			-8.726646072432222e-9,
			0.9999999999999997
		],
		"jaw": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger4-2.R": [
			0.2947375279219385,
			0.2255362656575245,
			0.4719524336422625,
			0.7997024964865798
		],
		"oculi01.R": [
			3.490658428972883e-8,
			-8.726647515722163e-9,
			3.490658428972884e-8,
			0.9999999999999987
		],
		"oculi02.R": [
			-3.490658428972884e-8,
			8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"oris03.L": [
			1.745329303304289e-8,
			-1.7453293144065185e-8,
			2.6179939993653494e-8,
			0.9999999999999993
		],
		"finger1-1.L": [
			0.18919229569314291,
			0.009503842129843787,
			0.1989455374085896,
			0.9615282759130577
		],
		"tongue07.R": [
			8.726645628343061e-9,
			-8.726645406298417e-9,
			-2.6179939993653514e-8,
			0.9999999999999997
		],
		"eye.R": [
			2.6179939993653494e-8,
			8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"finger2-1.R": [
			0.4478678587658469,
			0.29051645070895504,
			0.2836993116494643,
			0.796573457705934
		],
		"finger4-3.R": [
			0.3233991392396569,
			0.2188468569790485,
			0.5429558682875719,
			0.7434500487736412
		],
		"finger2-1.L": [
			0.44786783395254626,
			-0.29051645520501623,
			-0.2836992611645572,
			0.7965734879974671
		],
		"eye.L": [
			0,
			0,
			0,
			1
		],
		"tongue07.L": [
			8.726646072432225e-9,
			-8.726646294476836e-9,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"wrist.L": [
			-6.981316857945735e-8,
			1.7453289591351506e-8,
			-4.3633230362158894e-8,
			0.9999999999999964
		],
		"finger5-3.R": [
			0.1710710973286539,
			0.19352488014394875,
			0.5819783352794361,
			0.7710927425993683
		],
		"lowerleg01.R": [
			-0.05565694216640542,
			0.013816914202162467,
			-0.00262695332912716,
			0.9983508886092219
		],
		"lowerarm02.L": [
			-0.24139999762420453,
			0.24526021107084084,
			-0.3210175080444658,
			0.8823385005435512
		],
		"oris07.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"oris07.R": [
			2.6179939993653527e-8,
			-8.726645739365324e-9,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"tongue00": [
			4.3633228585804185e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999991
		],
		"lowerarm02.R": [
			-0.24139994845662502,
			-0.24526016189430355,
			0.3210175509704126,
			0.8823385120472056
		],
		"lowerleg01.L": [
			-0.04041100666428339,
			-0.011726032203489667,
			0.0024850862931137226,
			0.9991112425827551
		],
		"tongue03": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-1.R": [
			0.18919223386349418,
			-0.009503814555472667,
			-0.19894557453669984,
			0.9615282806693198
		],
		"metacarpal4.L": [
			2.6179940881831864e-8,
			2.617994077080965e-8,
			-3.490658428972883e-8,
			0.9999999999999988
		],
		"finger1-2.R": [
			0.03184086741096788,
			-0.004603336861669249,
			-0.014908053117355007,
			0.9993711614833127
		],
		"pelvis.R": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"toe2-1.R": [
			-3.490658428972886e-8,
			-1.1102230246251565e-16,
			-8.726646072432225e-9,
			0.9999999999999993
		],
		"toe2-3.L": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe5-3.L": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"levator05.L": [
			-2.6179939993653494e-8,
			1.745329158975295e-8,
			-1.745329303304287e-8,
			0.9999999999999994
		],
		"finger4-1.L": [
			0.25722476063681715,
			-0.16419813952594575,
			-0.45914485279533107,
			0.8343023418660074
		],
		"finger4-1.R": [
			0.2572248164085497,
			0.16419795080155886,
			0.4591448857485007,
			0.8343023436783291
		],
		"levator05.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe5-3.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-3.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"finger4-2.L": [
			0.2947374566443655,
			-0.22553641854518292,
			-0.4719523643257617,
			0.7997025205462002
		],
		"toe2-1.L": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"finger1-2.L": [
			0.031840848803580686,
			0.004603396485956868,
			0.014908090369412765,
			0.9993711612458094
		],
		"pelvis.L": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"metacarpal4.R": [
			2.6179939993653494e-8,
			8.726646405499139e-9,
			2.6506363249292466e-16,
			0.9999999999999997
		],
		"tongue04": [
			-2.6179939993653507e-8,
			-1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"toe3-2.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"levator03.R": [
			-1.7453291256686047e-8,
			3.4906584289728926e-8,
			-1.745329303304288e-8,
			0.999999999999999
		],
		"upperleg02.R": [
			0.0008239119092129214,
			0.0015474656326706082,
			0.06929219342405116,
			0.99759486689225
		],
		"upperleg02.L": [
			0.0008239026320767684,
			-0.0015474749097748042,
			-0.06929219342358414,
			0.997594866885553
		],
		"levator03.L": [
			-3.4906584289728807e-8,
			-3.490658451177353e-8,
			1.4362437249803944e-15,
			0.9999999999999988
		],
		"toe3-2.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"metacarpal3.L": [
			9.138523059687561e-16,
			3.4906584289728926e-8,
			-2.6179939993653487e-8,
			0.999999999999999
		],
		"tongue01": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"breast.L": [
			-0.06287932418484363,
			0.006216936210679425,
			-0.00046626935888454985,
			0.9980016647717046
		],
		"temporalis02.R": [
			0,
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0.9999999999999997
		],
		"tongue02": [
			0,
			0,
			0,
			1
		],
		"oris04.R": [
			3.490658428972881e-8,
			-8.726646738566046e-9,
			1.7453292144864403e-8,
			0.9999999999999988
		],
		"oris04.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"temporalis02.L": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"breast.R": [
			-0.06287927252060536,
			0.006216999213584762,
			-0.0004662467706062283,
			0.9980016676449027
		],
		"oris03.R": [
			-6.853892559463472e-16,
			2.6179939993653534e-8,
			2.6179939993653514e-8,
			0.9999999999999994
		],
		"oris06.L": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"orbicularis04.R": [
			1.745329214486445e-8,
			-4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"toe1-2.R": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe1-2.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"orbicularis04.L": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"metacarpal3.R": [
			3.0461740002987937e-16,
			8.726646183454534e-9,
			-3.490658428972886e-8,
			0.9999999999999994
		],
		"oris06.R": [
			2.617993999365348e-8,
			-1.745329247793137e-8,
			-8.726646516521431e-9,
			0.9999999999999996
		],
		"levator04.L": [
			-1.7453292144864456e-8,
			-8.726646183454534e-9,
			1.5230870001493993e-16,
			1
		],
		"tongue06.L": [
			0,
			0,
			-1.745329214486446e-8,
			1
		],
		"toe2-2.L": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"toe2-2.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"tongue06.R": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"levator04.R": [
			-8.726645628343012e-9,
			4.3633228474782015e-8,
			-8.726646516521458e-9,
			0.9999999999999989
		],
		"toe4-1.L": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"upperleg01.R": [
			0,
			0,
			0,
			1
		],
		"metacarpal1.R": [
			5.235987998730672e-8,
			-2.6179938550363602e-8,
			-2.617994177001015e-8,
			0.9999999999999981
		],
		"levator02.R": [
			-8.726646516521448e-9,
			-8.726646405499139e-9,
			-2.6179939993653477e-8,
			0.9999999999999996
		],
		"toe3-1.L": [
			-3.490658428972884e-8,
			8.726646405499139e-9,
			8.726645628342989e-9,
			0.9999999999999991
		],
		"toe3-1.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"levator02.L": [
			-1.7453292144864443e-8,
			1.7453292255886765e-8,
			-8.726646516521435e-9,
			0.9999999999999997
		],
		"finger5-1.R": [
			0.13893866866353616,
			0.14976955158637517,
			0.4964626598249684,
			0.8436764517083176
		],
		"metacarpal1.L": [
			1.745329214486445e-8,
			-8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"toe4-1.R": [
			-2.6179939993653507e-8,
			-4.440892098500626e-16,
			-1.745329219192525e-8,
			0.9999999999999997
		],
		"upperleg01.L": [
			0.0007301798693039033,
			-0.005686881798041554,
			-0.018017623181249557,
			0.9998212297544358
		],
		"head": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe5-1.R": [
			-2.6179939993653507e-8,
			1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"special01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			3.490658428972882e-8,
			-8.726645850387627e-9,
			-1.7453292144864483e-8,
			0.9999999999999989
		],
		"special04": [
			-1.7453292144864456e-8,
			2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"metacarpal2.L": [
			-2.617993999365348e-8,
			-8.726646738566046e-9,
			-2.6179939993653468e-8,
			0.9999999999999991
		],
		"metacarpal2.R": [
			4.569261529843784e-16,
			1.7453292255886765e-8,
			-2.6179939993653494e-8,
			0.9999999999999994
		],
		"temporalis01.R": [
			1.745329214486445e-8,
			8.726646627543744e-9,
			-2.6179939993653573e-8,
			0.9999999999999997
		],
		"toe5-1.L": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"risorius02.R": [
			-8.726645184253789e-9,
			-3.490658440075123e-8,
			2.6179939993653494e-8,
			0.999999999999999
		],
		"special05.L": [
			8.726646516521438e-9,
			3.490658440075123e-8,
			-8.726645628343022e-9,
			0.9999999999999994
		],
		"finger2-2.L": [
			0.3355111908923531,
			-0.2186241328650067,
			-0.2057606375330736,
			0.8929156115540827
		],
		"foot.L": [
			0.4215109878252823,
			0.03842461666417851,
			0.002689069141736184,
			0.9060048591944284
		],
		"toe3-3.R": [
			8.726646072432231e-9,
			0,
			-8.72664594740284e-9,
			0.9999999999999998
		],
		"levator06.R": [
			0,
			2.6179939993653504e-8,
			1.1102230246251565e-16,
			0.9999999999999998
		],
		"orbicularis03.R": [
			8.726646072432228e-9,
			-1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"levator06.L": [
			2.7755575615628914e-16,
			1.7453292144864463e-8,
			-1.7453292144864453e-8,
			0.9999999999999997
		],
		"orbicularis03.L": [
			1.7453292144864456e-8,
			-8.726646183454534e-9,
			-1.5230870001493993e-16,
			1
		],
		"foot.R": [
			0.42151087359320133,
			-0.03842461304665834,
			-0.0026890733317647985,
			0.9060049124809028
		],
		"root": [
			0.6909823063560021,
			3.1262938904319526e-8,
			1.7811586844805503e-8,
			0.7228716707016114
		],
		"finger2-2.R": [
			0.33551120403167645,
			0.21862411265420745,
			0.20576075664037308,
			0.8929155841187657
		],
		"risorius02.L": [
			1.7453292144864463e-8,
			8.726645850387627e-9,
			8.726646072432226e-9,
			0.9999999999999996
		],
		"special05.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			-4.402746914158785e-17,
			1.0000000000000002
		],
		"lowerleg02.L": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"tongue05.L": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			8.726646072432231e-9,
			0.9999999999999994
		],
		"finger5-1.L": [
			0.13893859078412435,
			-0.14976963307176294,
			-0.4964626003888687,
			0.8436764850436415
		],
		"toe4-3.R": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"wrist.R": [
			6.092348000597549e-16,
			-8.726645961409929e-9,
			6.98131685794573e-8,
			0.9999999999999977
		],
		"toe4-3.L": [
			2.6179939993653507e-8,
			2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"finger3-3.L": [
			0.35551401188670445,
			-0.2761602765083432,
			-0.4141916011402878,
			0.7910692805158724
		],
		"tongue05.R": [
			0,
			0,
			0,
			1
		],
		"lowerleg02.R": [
			0,
			0,
			0,
			1
		],
		"shoulder01.R": [
			8.726645628343018e-9,
			8.726645628343022e-9,
			5.235987998730709e-8,
			0.9999999999999986
		],
		"finger3-1.L": [
			0.3026799077254229,
			-0.21593342084331424,
			-0.38191672063918286,
			0.8461071148019296
		],
		"special06.R": [
			0,
			0,
			0,
			1
		],
		"finger4-3.L": [
			0.32339906154326997,
			-0.21884693831088242,
			-0.5429558725879924,
			0.7434500554893358
		],
		"finger3-2.L": [
			0.34837744421374967,
			-0.2781571466009113,
			-0.3997347724459731,
			0.8009206389246695
		],
		"upperarm01.R": [
			-0.10334153049989658,
			0.0711548328202779,
			-0.5691106814306802,
			0.8126318662972573
		],
		"finger3-2.R": [
			0.3483774220540156,
			0.2781571337722911,
			0.3997348039791019,
			0.8009206372808552
		],
		"upperarm01.L": [
			-0.10334158948190472,
			-0.0711548113582815,
			0.569110579391037,
			0.8126319321372494
		],
		"special06.L": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"finger3-1.R": [
			0.3026799597493977,
			0.21593336436035815,
			0.3819167332809034,
			0.8461071048999427
		],
		"shoulder01.L": [
			-1.8277046119375055e-15,
			-3.490658440075123e-8,
			-5.235987998730683e-8,
			0.9999999999999979
		],
		"lowerarm01.R": [
			0.15894014823734864,
			-0.14083052135669938,
			0.011925143861030734,
			0.9771195343849101
		],
		"special03": [
			0,
			0,
			0,
			1
		],
		"upperarm02.L": [
			-0.29959012114916067,
			0.20184943797363597,
			-0.0036648061973533165,
			0.9324640115817314
		],
		"spine02": [
			0,
			0,
			0,
			1
		],
		"spine03": [
			-0.03701541641547019,
			0,
			0,
			0.9993146946520847
		],
		"spine01": [
			-0.08468313221543462,
			-1.1102230246251565e-16,
			0,
			0.996407932083132
		],
		"upperarm02.R": [
			-0.29959010426037347,
			-0.20184950697254322,
			0.003664832314927331,
			0.9324640019691396
		],
		"spine04": [
			-0.0829432391053487,
			0,
			0,
			0.9965542730261674
		],
		"spine05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"lowerarm01.L": [
			0.1589402053310419,
			0.14083047985315977,
			-0.011925134042070776,
			0.9771195311996038
		],
		"finger5-3.L": [
			0.17107090306965067,
			-0.19352508938932456,
			-0.5819783067045767,
			0.7710927547481308
		],
		"oris01": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"oris02": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"oris05": [
			1.7453292144864456e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999997
		],
		"risorius03.R": [
			3.490658428972886e-8,
			4.440892098500626e-16,
			-1.7453292072804558e-8,
			0.9999999999999993
		],
		"finger2-3.L": [
			0.45682959772149884,
			-0.3157029517164561,
			-0.26543280113289874,
			0.7881521382359332
		],
		"oris06": [
			2.6179939993653507e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999998
		],
		"finger3-3.R": [
			0.35551413604042875,
			0.2761601179979719,
			0.4141916114361031,
			0.7910692746648286
		],
		"finger2-3.R": [
			0.456829639608369,
			0.31570293507933767,
			0.265432825823665,
			0.7881521123062749
		],
		"toe3-3.L": [
			-8.726646072432228e-9,
			1.1102230246251565e-16,
			8.726646034088026e-9,
			0.9999999999999999
		],
		"risorius03.L": [
			8.726645628343007e-9,
			-1.745329203384216e-8,
			-1.7453292144864443e-8,
			0.9999999999999998
		]
	},
	"fly01": {
		"toe1-1.L": [
			8.726645717160759e-8,
			-8.726648403900583e-9,
			2.617993910547254e-8,
			0.999999999999996
		],
		"finger5-2.R": [
			0.16149422833190544,
			0.19581267743405828,
			0.5365302677526302,
			0.8048057413791722
		],
		"finger4-2.R": [
			0.2947346334742742,
			0.2255351343564529,
			0.47194981585053924,
			0.7997054272169501
		],
		"toe5-2.R": [
			3.490658428972878e-8,
			-1.7453290923619136e-8,
			-3.490658428972879e-8,
			0.9999999999999988
		],
		"toe4-2.R": [
			7.853981998095993e-8,
			-8.726645850387627e-9,
			-6.85389203006783e-16,
			0.9999999999999968
		],
		"clavicle.R": [
			1.7453292144864413e-8,
			-9.992007221626409e-16,
			6.108652440744466e-8,
			0.999999999999998
		],
		"neck03": [
			-0.21165149665612587,
			1.1457030524297807e-7,
			-6.953209531503521e-9,
			0.9773452020464464
		],
		"neck02": [
			-0.10416987955229061,
			0.007792359753213796,
			-0.04261141246464277,
			0.9936157118581137
		],
		"neck01": [
			-0.052429843365014786,
			0.004403683894132593,
			-0.06880151177674253,
			0.9962419741559354
		],
		"clavicle.L": [
			-0.013649695886105867,
			0.03476133919709001,
			0.1330594551407554,
			0.9904042187395448
		],
		"toe5-2.L": [
			-8.72664740469983e-9,
			3.490658451177353e-8,
			3.490658428972884e-8,
			0.9999999999999986
		],
		"toe4-2.L": [
			-1.7453292144864446e-8,
			-1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"finger5-2.L": [
			0.1614940938504726,
			-0.19581265808571247,
			-0.5365300853423949,
			0.804805894677285
		],
		"finger1-3.L": [
			0.4411942997770242,
			0.07485128506678784,
			0.1714375599361324,
			0.8776981474352422
		],
		"toe1-1.R": [
			-8.72664607243223e-9,
			-1.7453291811797556e-8,
			-8.726646072432228e-9,
			0.9999999999999996
		],
		"oculi02.L": [
			-6.10865242833821e-8,
			1.7453293144065185e-8,
			1.7453291256684746e-8,
			0.9999999999999979
		],
		"oculi01.L": [
			-5.235988176366352e-8,
			4.363323036216116e-8,
			2.6179937329117888e-8,
			0.9999999999999971
		],
		"jaw": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"finger1-3.R": [
			0.44119427110998233,
			-0.07485126012073617,
			-0.17143738587512328,
			0.8776981979714739
		],
		"oculi01.R": [
			3.4906587842442525e-8,
			-3.4906587620398e-8,
			7.853981998095919e-8,
			0.9999999999999958
		],
		"oculi02.R": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"wrist.R": [
			-0.10677244532793849,
			0.18864179864785424,
			0.2550483087355296,
			0.942318564463601
		],
		"finger1-1.L": [
			0.1891930734971226,
			0.009500571116515033,
			0.19894765144650428,
			0.9615277177872162
		],
		"tongue07.R": [
			1.745329303304289e-8,
			2.6179940104675836e-8,
			-1.745329125668605e-8,
			0.9999999999999996
		],
		"eye.R": [
			-2.132322011967385e-15,
			3.4906584178706623e-8,
			6.108652428338222e-8,
			0.9999999999999976
		],
		"finger2-1.R": [
			0.4478647215317095,
			0.2905167382121183,
			0.28369867852374353,
			0.7965753422180463
		],
		"finger4-3.R": [
			0.3233970033247304,
			0.2188454896865708,
			0.5429546428061713,
			0.7434522753611372
		],
		"finger2-1.L": [
			0.4478646010590105,
			-0.29051729588450015,
			-0.28369843469743206,
			0.7965752934032277
		],
		"eye.L": [
			-8.726646516521438e-9,
			1.7453292366909068e-8,
			1.7453292144864456e-8,
			0.9999999999999996
		],
		"tongue07.L": [
			-2.6179939993653507e-8,
			8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"wrist.L": [
			5.235987998730683e-8,
			8.726646627543744e-9,
			-8.726645628343008e-9,
			0.9999999999999987
		],
		"finger5-3.R": [
			0.1710700701446609,
			0.19352393098538234,
			0.5819759341469393,
			0.7710950209348152
		],
		"lowerleg01.R": [
			0.1322511101484822,
			-0.01205570917684362,
			-0.0008441056465934179,
			0.991142568567406
		],
		"lowerarm02.L": [
			-0.2414053322915984,
			0.24525611707523154,
			-0.3210221799380334,
			0.8823364792221821
		],
		"oris07.L": [
			-6.10865242833821e-8,
			2.1094237467877974e-15,
			3.4906584459454344e-8,
			0.9999999999999973
		],
		"oris07.R": [
			8.726645628343032e-9,
			2.617993988263123e-8,
			8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue00": [
			1.0471975997461245e-7,
			8.726647071632954e-9,
			-8.726645184263907e-9,
			0.9999999999999946
		],
		"lowerarm02.R": [
			-0.1473653278859534,
			-0.14972036275353162,
			0.19596874634091418,
			0.9578431623035089
		],
		"lowerleg01.L": [
			0.9076691457698592,
			0.08274304821815448,
			0.005793696322547515,
			0.41140824356337863
		],
		"tongue03": [
			-1.7453292144864453e-8,
			8.726646294476836e-9,
			-8.726646072432231e-9,
			0.9999999999999994
		],
		"finger1-1.R": [
			0.18919277113616711,
			-0.009500851981639191,
			-0.19894778513380101,
			0.9615277468444663
		],
		"metacarpal4.L": [
			8.910059850846267e-15,
			1.1344639716526217e-7,
			-7.853981998095936e-8,
			0.9999999999999905
		],
		"finger1-2.R": [
			0.03184138113172976,
			-0.004603268145510819,
			-0.014908316381702386,
			0.9993711415048302
		],
		"pelvis.R": [
			-8.726646072432235e-9,
			2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"toe2-1.R": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			-1.7453292144864463e-8,
			0.9999999999999996
		],
		"toe2-3.L": [
			-2.6179939993653474e-8,
			8.726646627543744e-9,
			1.7453292144864476e-8,
			0.9999999999999994
		],
		"toe5-3.L": [
			8.726645184253797e-9,
			8.726645295276114e-9,
			7.853981998095983e-8,
			0.999999999999997
		],
		"levator05.L": [
			-8.726646072432225e-9,
			-1.7453292366909068e-8,
			1.4736068246078264e-16,
			1
		],
		"finger4-1.L": [
			0.2572219095218385,
			-0.16419638321177332,
			-0.4591415643866603,
			0.8343053762590064
		],
		"finger4-1.R": [
			0.25722223730447674,
			0.1641964899110504,
			0.45914145888782004,
			0.834305312261245
		],
		"levator05.R": [
			1.745329125668597e-8,
			6.981316835741325e-8,
			1.7453293033042816e-8,
			0.9999999999999971
		],
		"toe5-3.R": [
			-4.363322858580412e-8,
			2.6179940992854256e-8,
			2.617993910547514e-8,
			0.9999999999999986
		],
		"toe2-3.R": [
			2.6179939105475045e-8,
			-1.745329158975295e-8,
			-2.6179940881831907e-8,
			0.9999999999999996
		],
		"finger4-2.L": [
			0.2947345551088863,
			-0.22553544614416876,
			-0.4719497775697558,
			0.7997053907591074
		],
		"toe2-1.L": [
			1.745329214486445e-8,
			-3.3306690738754696e-16,
			4.3633228449276404e-8,
			0.9999999999999991
		],
		"finger1-2.L": [
			0.03184143316380762,
			0.0046032145696852655,
			0.014908323346635142,
			0.99937113998989
		],
		"pelvis.L": [
			-6.108652428338212e-8,
			8.726645739365324e-9,
			-8.72664651652142e-9,
			0.9999999999999983
		],
		"metacarpal4.R": [
			5.2359879987306584e-8,
			9.599310868413369e-8,
			4.937374586558452e-15,
			0.9999999999999938
		],
		"tongue04": [
			-2.6179939993653494e-8,
			8.726646405499139e-9,
			-2.6506363249292466e-16,
			0.9999999999999997
		],
		"toe3-2.L": [
			-1.745329214486445e-8,
			8.726645406298417e-9,
			-1.745329214486445e-8,
			0.9999999999999998
		],
		"levator03.R": [
			6.108652428338213e-8,
			1.7453291256686043e-8,
			8.726646960610654e-9,
			0.9999999999999981
		],
		"upperleg02.R": [
			0.0015457553287311506,
			0.0029042312260646463,
			0.13003677769072156,
			0.9915037128166807
		],
		"upperleg02.L": [
			-0.04691792274133048,
			-0.006081831675601945,
			-0.005508024994751632,
			0.9988650466953809
		],
		"levator03.L": [
			0,
			7.853981998095985e-8,
			1.1102230246251565e-16,
			0.9999999999999969
		],
		"toe3-2.R": [
			-1.2217304856676214e-7,
			8.72664285278546e-9,
			-2.617994088182809e-8,
			0.9999999999999921
		],
		"metacarpal3.L": [
			9.138523059687561e-16,
			3.4906584289728926e-8,
			-2.6179939993653487e-8,
			0.999999999999999
		],
		"tongue01": [
			-6.108652428338212e-8,
			-8.726646405499139e-9,
			4.661919405738096e-16,
			0.9999999999999984
		],
		"breast.L": [
			-2.6179939993653507e-8,
			8.726645739365324e-9,
			-1.7453292144864397e-8,
			0.9999999999999994
		],
		"temporalis02.R": [
			8.726645628343032e-9,
			-2.617993988263123e-8,
			-8.726646516521458e-9,
			0.9999999999999997
		],
		"tongue02": [
			0,
			8.726646072432231e-9,
			-2.220446049250313e-16,
			0.9999999999999999
		],
		"oris04.R": [
			2.6179939993653468e-8,
			1.3322676295501878e-15,
			-5.235987999662734e-8,
			0.9999999999999984
		],
		"oris04.L": [
			2.6179939993653507e-8,
			-1.1102230246251565e-16,
			8.72664607243223e-9,
			0.9999999999999997
		],
		"temporalis02.L": [
			2.617993999365348e-8,
			8.726646738566046e-9,
			-2.6179939993653468e-8,
			0.9999999999999991
		],
		"breast.R": [
			-1.7453294809399755e-8,
			6.981316846843555e-8,
			3.490658251337197e-8,
			0.9999999999999964
		],
		"oris03.R": [
			-6.853892030067779e-15,
			5.235987998730707e-8,
			1.308996928628385e-7,
			0.9999999999999902
		],
		"oris06.L": [
			-8.726645184253878e-9,
			-2.617993988263123e-8,
			2.6179939993653474e-8,
			0.9999999999999991
		],
		"orbicularis04.R": [
			3.490658428972886e-8,
			-2.220446049250313e-16,
			0,
			0.9999999999999992
		],
		"toe1-2.R": [
			-1.7453292144864453e-8,
			-2.6179939993653534e-8,
			8.726646516521464e-9,
			0.9999999999999997
		],
		"toe1-2.L": [
			-3.490658428972881e-8,
			8.726646738566046e-9,
			1.7453292144864403e-8,
			0.9999999999999988
		],
		"orbicularis04.L": [
			1.7453292144864463e-8,
			-1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"metacarpal3.R": [
			-2.617993732911801e-8,
			1.3089969330692952e-7,
			-1.7453295697578076e-8,
			0.9999999999999913
		],
		"oris06.R": [
			2.617993999365346e-8,
			3.4906584733818136e-8,
			1.0095481158786604e-15,
			0.9999999999999991
		],
		"levator04.L": [
			1.5230870001493986e-16,
			-1.745329203384216e-8,
			8.726646072432222e-9,
			0.9999999999999999
		],
		"tongue06.L": [
			-2.617993999365353e-8,
			-1.745329336610979e-8,
			-1.7453291256686023e-8,
			0.9999999999999997
		],
		"toe2-2.L": [
			0,
			0,
			-2.617993999365351e-8,
			0.9999999999999998
		],
		"toe2-2.R": [
			7.853981998095993e-8,
			-8.726645850387627e-9,
			-6.85389203006783e-16,
			0.9999999999999968
		],
		"tongue06.R": [
			-8.726645628343012e-9,
			1.745329203384216e-8,
			-3.4906584289728866e-8,
			0.9999999999999993
		],
		"levator04.R": [
			8.726644296075419e-9,
			-6.981316857945785e-8,
			-2.6179940881831808e-8,
			0.9999999999999972
		],
		"toe4-1.L": [
			2.6179940881831887e-8,
			1.7453292810998278e-8,
			-4.363322858580428e-8,
			0.9999999999999982
		],
		"upperleg01.R": [
			1.1344639716525997e-7,
			1.887379141862766e-15,
			-1.7453292146252373e-8,
			0.9999999999999934
		],
		"metacarpal1.R": [
			5.235988531637738e-8,
			9.599311223684737e-8,
			-5.235987465823627e-8,
			0.9999999999999928
		],
		"levator02.R": [
			8.726645717160723e-8,
			-9.599310846208908e-8,
			-8.726654510127331e-9,
			0.9999999999999915
		],
		"toe3-1.L": [
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999987
		],
		"toe3-1.R": [
			6.108652428338216e-8,
			8.726644407097695e-9,
			2.6179940881832314e-8,
			0.9999999999999977
		],
		"levator02.L": [
			5.2359885316377354e-8,
			-8.726646083534462e-8,
			5.2359874658236344e-8,
			0.9999999999999934
		],
		"finger5-1.R": [
			0.13893686545010425,
			0.14976774281572292,
			0.4964589978686238,
			0.8436792246263178
		],
		"metacarpal1.L": [
			-8.726644740164625e-9,
			5.235987998730707e-8,
			-2.617994088183188e-8,
			0.9999999999999984
		],
		"toe4-1.R": [
			-8.726646516521435e-9,
			1.7453292366909068e-8,
			3.49065842897289e-8,
			0.9999999999999992
		],
		"upperleg01.L": [
			-0.6101627844038626,
			-0.053262569992066244,
			-0.021066702555312494,
			0.7902029291326449
		],
		"head": [
			-3.490658428972884e-8,
			-8.726646405499139e-9,
			-8.726645628342989e-9,
			0.9999999999999991
		],
		"toe5-1.R": [
			1.745329303304289e-8,
			2.6179940104675836e-8,
			-1.745329125668605e-8,
			0.9999999999999996
		],
		"special01": [
			8.726646072432235e-9,
			-2.220446049250313e-16,
			0,
			0.9999999999999999
		],
		"temporalis01.L": [
			-1.7453292144864463e-8,
			1.1102230246251565e-16,
			-8.726646072432228e-9,
			0.9999999999999998
		],
		"special04": [
			-2.6179939993653507e-8,
			-2.220446049250313e-16,
			-8.726646120913181e-9,
			0.9999999999999994
		],
		"metacarpal2.L": [
			-1.7453290368507587e-8,
			5.235988020935167e-8,
			-2.617994088183192e-8,
			0.9999999999999982
		],
		"metacarpal2.R": [
			6.108652428338173e-8,
			6.108652428338246e-8,
			2.617994354636745e-8,
			0.9999999999999961
		],
		"temporalis01.R": [
			1.7453291256686083e-8,
			2.617993899445281e-8,
			2.6179940881832245e-8,
			0.9999999999999991
		],
		"toe5-1.L": [
			4.3633228585804066e-8,
			-1.7453290479529926e-8,
			-3.4906584289728754e-8,
			0.9999999999999983
		],
		"risorius02.R": [
			0,
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0.9999999999999982
		],
		"special05.L": [
			3.490658428972882e-8,
			2.6179939993653534e-8,
			-8.726645184253818e-9,
			0.9999999999999988
		],
		"finger2-2.L": [
			0.33551157429870404,
			-0.21862301135799567,
			-0.20576031632208847,
			0.8929158161010484
		],
		"foot.L": [
			0.39030963953651154,
			0.03557890019136278,
			0.0024915039691912,
			0.9199925649449692
		],
		"toe3-3.R": [
			6.108652428338213e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999982
		],
		"levator06.R": [
			0,
			-4.3633228585804185e-8,
			-1.1102230246251565e-16,
			0.9999999999999991
		],
		"orbicularis03.R": [
			8.726646072432225e-9,
			8.726646294476836e-9,
			4.402746914158785e-17,
			1.0000000000000002
		],
		"levator06.L": [
			8.726647404699846e-9,
			4.363322825273741e-8,
			-2.6179939993653474e-8,
			0.9999999999999982
		],
		"orbicularis03.L": [
			-1.7453292144864443e-8,
			-8.726645850387627e-9,
			2.6179939993653534e-8,
			0.9999999999999996
		],
		"foot.R": [
			0.42151256097168505,
			-0.03842315754998349,
			-0.0026906639039947266,
			0.9060041844465931
		],
		"root": [
			0.5505948030469506,
			4.107368156702762e-8,
			-1.472452320563754e-8,
			0.8347726414166238
		],
		"finger2-2.R": [
			0.3355116825319617,
			0.21862284292371825,
			0.20576056339579085,
			0.8929157597374853
		],
		"risorius02.L": [
			-1.3707785118926907e-15,
			2.6179939993653534e-8,
			5.235987998730687e-8,
			0.9999999999999984
		],
		"special05.R": [
			-3.4906584289728793e-8,
			1.7453291478730648e-8,
			-2.617994088183205e-8,
			0.9999999999999991
		],
		"lowerleg02.L": [
			8.726646072432231e-9,
			-1.7453292366909068e-8,
			8.726646072432231e-9,
			0.9999999999999998
		],
		"tongue05.L": [
			2.6179939993653497e-8,
			8.726646516521441e-9,
			-8.726645628343002e-9,
			0.9999999999999996
		],
		"finger5-1.L": [
			0.13893649507193345,
			-0.1497674546267861,
			-0.496459226694198,
			0.8436792021271703
		],
		"toe4-3.R": [
			-1.745329303304289e-8,
			3.490658440075123e-8,
			2.617993910547502e-8,
			0.9999999999999988
		],
		"oris03.L": [
			-5.235987998730707e-8,
			-8.726651068435842e-9,
			-9.59931085731274e-8,
			0.9999999999999939
		],
		"toe4-3.L": [
			1.7453292144864446e-8,
			1.7453292255886765e-8,
			4.946992079080189e-16,
			0.9999999999999999
		],
		"finger3-3.L": [
			0.35551211174939845,
			-0.2761578183085811,
			-0.4141920197591046,
			0.7910707734168932
		],
		"tongue05.R": [
			-8.726646072432225e-9,
			1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"lowerleg02.R": [
			-8.726646072432225e-9,
			8.726646294476836e-9,
			1.7453292144864453e-8,
			0.9999999999999997
		],
		"shoulder01.R": [
			5.235987998730684e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999987
		],
		"finger3-1.L": [
			0.3026774482107774,
			-0.21593229026256444,
			-0.3819143542485009,
			0.8461093513166767
		],
		"special06.R": [
			8.726646072432225e-9,
			-1.7453292366909068e-8,
			-1.4736068246078264e-16,
			1
		],
		"finger4-3.L": [
			0.3233967788976022,
			-0.21884572581598893,
			-0.5429546554870621,
			0.7434522942164168
		],
		"finger3-2.L": [
			0.3483746365875754,
			-0.2781561791338504,
			-0.3997338745111656,
			0.8009226443049438
		],
		"upperarm01.R": [
			-0.0976125610258238,
			-0.2057493173324496,
			0.17487202902806115,
			0.9578928853534823
		],
		"finger3-2.R": [
			0.3483746747428549,
			0.2781561174666214,
			0.39973376450685216,
			0.8009227040276017
		],
		"upperarm01.L": [
			-0.09713173424685675,
			-0.08947748273388312,
			0.5513096875419525,
			0.8237820310665925
		],
		"special06.L": [
			8.726646072432228e-9,
			8.726645850387627e-9,
			1.7453292144864463e-8,
			0.9999999999999996
		],
		"finger3-1.R": [
			0.302677628302055,
			0.21593237456824943,
			0.3819143168246552,
			0.8461092822698008
		],
		"shoulder01.L": [
			0.0004695337135363538,
			-0.004931191364138887,
			0.10492748671421753,
			0.9944675386465155
		],
		"lowerarm01.R": [
			-2.617994177001034e-8,
			2.6179941881032676e-8,
			6.108652428338127e-8,
			0.9999999999999972
		],
		"special03": [
			-1.745329214486445e-8,
			4.440892098500626e-16,
			8.726646160864038e-9,
			0.9999999999999999
		],
		"upperarm02.L": [
			-0.299593259068849,
			0.20185089821267987,
			-0.0036673895392238236,
			0.932462677143277
		],
		"spine02": [
			-0.07497340409018087,
			0.007380659468401163,
			0.04883729345022435,
			0.9959615621666321
		],
		"spine03": [
			-0.037016267280176075,
			1.1102230246251565e-16,
			0,
			0.999314663135012
		],
		"spine01": [
			-0.003488816806629014,
			-0.004293404666667611,
			0.0647940575704885,
			0.9978833223063754
		],
		"upperarm02.R": [
			-0.11869894823755854,
			-0.13374955717231163,
			0.0025302274498037788,
			0.9838776415756992
		],
		"spine04": [
			-0.08294492849857886,
			-1.1102230246251565e-16,
			0,
			0.9965541324164813
		],
		"spine05": [
			8.726645717160763e-8,
			1.1102230246251565e-16,
			0,
			0.9999999999999962
		],
		"lowerarm01.L": [
			0.15894200069156508,
			0.1408310039755586,
			-0.011923679585717013,
			0.977119181369671
		],
		"finger5-3.L": [
			0.17106990006488448,
			-0.19352400618834453,
			-0.5819758869187116,
			0.7710950754386797
		],
		"oris01": [
			0,
			0,
			0,
			1
		],
		"oris02": [
			0,
			0,
			8.726646072432231e-9,
			1
		],
		"oris05": [
			-6.108652428338212e-8,
			8.726646405499139e-9,
			-4.661919405738096e-16,
			0.9999999999999984
		],
		"risorius03.R": [
			8.726645717160759e-8,
			2.617994021569814e-8,
			2.2073853230039648e-15,
			0.9999999999999961
		],
		"finger2-3.L": [
			0.4568275532986892,
			-0.3156980785076505,
			-0.2654352151638768,
			0.7881544622246438
		],
		"oris06": [
			0,
			0,
			-8.726646072432231e-9,
			1
		],
		"finger3-3.R": [
			0.3555122747511458,
			0.2761574777665229,
			0.4141919497020587,
			0.7910708557246342
		],
		"finger2-3.R": [
			0.4568276621147382,
			0.3156977836714028,
			0.26543525215312797,
			0.7881545047934141
		],
		"toe3-3.L": [
			8.726648292878315e-9,
			-2.6179940881831953e-8,
			8.72664571716036e-8,
			0.9999999999999958
		],
		"risorius03.L": [
			-6.981316857945734e-8,
			1.7453290812596833e-8,
			-2.6179940881830544e-8,
			0.9999999999999971
		]
	}
};

/***/ },
/* 150 */
/***/ function(module, exports) {

module.exports = {
	"old": "age",
	"averageweight": "weight",
	"maxheight": "height",
	"averagemuscle": "muscle",
	"asian": "race",
	"female": "gender",
	"minfirmness": "breastfirmness",
	"minheight": "height",
	"young": "age",
	"averagecup": "breastsize",
	"minmuscle": "muscle",
	"minweight": "weight",
	"mincup": "breastsize",
	"averagefirmness": "breastfirmness",
	"idealproportions": "bodyproportions",
	"averageheight": "height",
	"regularproportions": "bodyproportions",
	"maxweight": "weight",
	"maxfirmness": "breastfirmness",
	"maxmuscle": "muscle",
	"child": "age",
	"baby": "age",
	"uncommonproportions": "bodyproportions",
	"caucasian": "race",
	"maxcup": "breastsize",
	"african": "race",
	"male": "gender"
};

/***/ },
/* 151 */
/***/ function(module, exports) {

module.exports = {
	"images": {
		"bob01_diffuse.png": "data/hair/bob01/bob01_diffuse.png",
		"lit_asian.png": "data/litspheres/lit_asian.png",
		"reset.png": "data/themes/makehuman/icons/reset.png",
		"middleage_darkskinned_male_diffuse.png": "data/skins/textures/middleage_darkskinned_male_diffuse.png",
		"wireframe.png": "data/themes/makehuman/icons/wireframe.png",
		"l-hand-trans-in-out.png": "data/targets/armslegs/images/l-hand-trans-in-out.png",
		"l-foot-scale-decr-incr.png": "data/targets/armslegs/images/l-foot-scale-decr-incr.png",
		"l-foot-trans-down-up.png": "data/targets/armslegs/images/l-foot-trans-down-up.png",
		"r-ear-width-min-max.png": "data/targets/ears/images/r-ear-width-min-max.png",
		"shoes02_diffuse.png": "data/clothes/shoes02/shoes02_diffuse.png",
		"shoes05_diffuse.png": "data/clothes/shoes05/shoes05_diffuse.png",
		"short01_diffuse.png": "data/hair/short01/short01_diffuse.png",
		"l-cheek-inner-deflate-inflate.png": "data/targets/cheek/images/l-cheek-inner-deflate-inflate.png",
		"symm.png": "data/themes/makehuman/icons/symm.png",
		"head-back-scale-depth-less-more.png": "data/targets/head/images/head-back-scale-depth-less-more.png",
		"young_darkskinned_female_diffuse.png": "data/skins/textures/young_darkskinned_female_diffuse.png",
		"male_worksuit01_ao.png": "data/clothes/male_worksuit01/male_worksuit01_ao.png",
		"mouth-upperlip-height-min-max.png": "data/targets/mouth/images/mouth-upperlip-height-min-max.png",
		"torso-trans-depth-forward-backward.png": "data/targets/torso/images/torso-trans-depth-forward-backward.png",
		"female_elegantsuit01_ao.png": "data/clothes/female_elegantsuit01/female_elegantsuit01_ao.png",
		"resetcam.png": "data/themes/makehuman/icons/resetCam.png",
		"male_casualsuit04_normal.png": "data/clothes/male_casualsuit04/male_casualsuit04_normal.png",
		"r-eye-move-in-out.png": "data/targets/eyes/images/r-eye-move-in-out.png",
		"r-hand-fingers-length-decr-incr.png": "data/targets/armslegs/images/r-hand-fingers-length-decr-incr.png",
		"l-upperarm-muscle-decr-incr.png": "data/targets/armslegs/images/l-upperarm-muscle-decr-incr.png",
		"breast-volume-vert-up-down.png": "data/targets/breast/images/breast-volume-vert-up-down.png",
		"shoes01_normal.png": "data/clothes/shoes01/shoes01_normal.png",
		"fedora_normal.png": "data/clothes/fedora01/materials/fedora_normal.png",
		"nose-trans-horiz-in-out.png": "data/targets/nose/images/nose-trans-horiz-in-out.png",
		"l-eye-size-small-big.png": "data/targets/eyes/images/l-eye-size-small-big.png",
		"r-lowerleg-scale-horiz-decr-incr.png": "data/targets/armslegs/images/r-lowerleg-scale-horiz-decr-incr.png",
		"bluegreen_eye.png": "data/eyes/materials/bluegreen_eye.png",
		"l-eye-move-in-out.png": "data/targets/eyes/images/l-eye-move-in-out.png",
		"chin-prominent-less-more.png": "data/targets/chin/images/chin-prominent-less-more.png",
		"lit_refl_sharp_aniso_hard_blonde.png": "data/litspheres/lit_refl_sharp_aniso_hard_blonde.png",
		"mouth-philtrum-volume-increase-decrease.png": "data/targets/mouth/images/mouth-philtrum-volume-increase-decrease.png",
		"torso-vshape-less-more.png": "data/targets/torso/images/torso-vshape-less-more.png",
		"mouth-upperlip-middle-down-up.png": "data/targets/mouth/images/mouth-upperlip-middle-down-up.png",
		"eyebrow011.png": "data/eyebrows/eyebrow011/eyebrow011.png",
		"hip-waist-down-up.png": "data/targets/hip/images/hip-waist-down-up.png",
		"breast-point-min-max.png": "data/targets/breast/images/breast-point-min-max.png",
		"female_sportsuit01_ao.png": "data/clothes/female_sportsuit01/female_sportsuit01_ao.png",
		"down_arrow.png": "data/themes/makehuman/images/down_arrow.png",
		"green_eye.png": "data/eyes/materials/green_eye.png",
		"r-hand-scale-decr-incr.png": "data/targets/armslegs/images/r-hand-scale-decr-incr.png",
		"old_lightskinned_male_diffuse.png": "data/skins/textures/old_lightskinned_male_diffuse.png",
		"r-cheek-volume-deflate-inflate.png": "data/targets/cheek/images/r-cheek-volume-deflate-inflate.png",
		"legs-upperlegheight-decr-incr.png": "data/targets/legs/images/legs-upperlegheight-decr-incr.png",
		"breast-dist-min-max.png": "data/targets/breast/images/breast-dist-min-max.png",
		"head-oval.png": "data/targets/head/images/head-oval.png",
		"load.png": "data/themes/makehuman/icons/load.png",
		"r-foot-trans-in-out.png": "data/targets/armslegs/images/r-foot-trans-in-out.png",
		"head-skinny-fat.png": "data/targets/head/images/head-skinny-fat.png",
		"r-cheek-trans-vert-down-up.png": "data/targets/cheek/images/r-cheek-trans-vert-down-up.png",
		"l-lowerleg-scale-depth-decr-incr.png": "data/targets/armslegs/images/l-lowerleg-scale-depth-decr-incr.png",
		"l-eye-corner2-down-up.png": "data/targets/eyes/images/l-eye-corner2-down-up.png",
		"pose.png": "data/themes/makehuman/icons/pose.png",
		"female_casualsuit01_normal.png": "data/clothes/female_casualsuit01/female_casualsuit01_normal.png",
		"l-upperarm-scale-vert-decr-incr.png": "data/targets/armslegs/images/l-upperarm-scale-vert-decr-incr.png",
		"l-hand-fingers-diameter-decr-incr.png": "data/targets/armslegs/images/l-hand-fingers-diameter-decr-incr.png",
		"brown_eye.png": "data/eyes/materials/brown_eye.png",
		"eyebrow007.png": "data/eyebrows/eyebrow007/eyebrow007.png",
		"chin-height-min-max.png": "data/targets/chin/images/chin-height-min-max.png",
		"l-cheek-trans-vert-down-up.png": "data/targets/cheek/images/l-cheek-trans-vert-down-up.png",
		"male_casualsuit05_diffuse.png": "data/clothes/male_casualsuit05/male_casualsuit05_diffuse.png",
		"l-eye-push1-in-out.png": "data/targets/eyes/images/l-eye-push1-in-out.png",
		"symm1.png": "data/themes/makehuman/icons/symm1.png",
		"eyebrow012.png": "data/eyebrows/eyebrow012/eyebrow012.png",
		"male_casualsuit05_ao.png": "data/clothes/male_casualsuit05/male_casualsuit05_ao.png",
		"r-ear-wing-in-out.png": "data/targets/ears/images/r-ear-wing-in-out.png",
		"ponytail01_diffuse.png": "data/hair/ponytail01/ponytail01_diffuse.png",
		"buttocks-volume-decr-incr.png": "data/targets/buttocks/images/buttocks-volume-decr-incr.png",
		"male_worksuit01_normal.png": "data/clothes/male_worksuit01/male_worksuit01_normal.png",
		"l-eye-move-down-up.png": "data/targets/eyes/images/l-eye-move-down-up.png",
		"r-upperleg-skinny-fat.png": "data/targets/armslegs/images/r-upperleg-skinny-fat.png",
		"notfound.png": "data/icons/notfound.png",
		"fedora_texture_grey.png": "data/clothes/fedora01/materials/fedora_texture_grey.png",
		"nose-hump-lesshump-morehump.png": "data/targets/nose/images/nose-hump-lesshump-morehump.png",
		"r-lowerarm-skinny-fat.png": "data/targets/armslegs/images/r-lowerarm-skinny-fat.png",
		"breast-trans-vert-down-up.target.png": "data/targets/breast/images/breast-trans-vert-down-up.target.png",
		"l-lowerarm-scale-vert-decr-incr.png": "data/targets/armslegs/images/l-lowerarm-scale-vert-decr-incr.png",
		"l-cheek-volume-deflate-inflate.png": "data/targets/cheek/images/l-cheek-volume-deflate-inflate.png",
		"young_lightskinned_female_diffuse3.png": "data/skins/textures/young_lightskinned_female_diffuse3.png",
		"l-ear-trans-depth-backward-forward.png": "data/targets/ears/images/l-ear-trans-depth-backward-forward.png",
		"eyebrows-trans-vert-less-more.png": "data/targets/eyebrows/images/eyebrows-trans-vert-less-more.png",
		"bob02_diffuse.png": "data/hair/bob02/bob02_diffuse.png",
		"r-foot-scale-decr-incr.png": "data/targets/armslegs/images/r-foot-scale-decr-incr.png",
		"eyebrow004.png": "data/eyebrows/eyebrow004/eyebrow004.png",
		"head-scale-horiz-less-more.png": "data/targets/head/images/head-scale-horiz-less-more.png",
		"male_casualsuit06_ao.png": "data/clothes/male_casualsuit06/male_casualsuit06_ao.png",
		"r-ear-lobe-min-max.png": "data/targets/ears/images/r-ear-lobe-min-max.png",
		"penis-circ-min-max.png": "data/targets/genitals/images/penis-circ-min-max.png",
		"splash.png": "data/themes/default/images/splash.png",
		"young_lightskinned_male_diffuse3.png": "data/skins/textures/young_lightskinned_male_diffuse3.png",
		"head-scale-vert-less-more.png": "data/targets/head/images/head-scale-vert-less-more.png",
		"head-angle-in-out.png": "data/targets/head/images/head-angle-in-out.png",
		"l-lowerarm-skinny-fat.png": "data/targets/armslegs/images/l-lowerarm-skinny-fat.png",
		"head-trans-in-out.png": "data/targets/head/images/head-trans-in-out.png",
		"middleage_lightskinned_female_diffuse2.png": "data/skins/textures/middleage_lightskinned_female_diffuse2.png",
		"skinmat_african.png": "data/litspheres/skinmat_african.png",
		"breast-trans-vert-down-up.png": "data/targets/breast/images/breast-trans-vert-down-up.png",
		"young_caucasian_female_special_suit.png": "data/skins/textures/young_caucasian_female_special_suit.png",
		"male_casualsuit04_diffuse.png": "data/clothes/male_casualsuit04/male_casualsuit04_diffuse.png",
		"nose-width3-min-max.png": "data/targets/nose/images/nose-width3-min-max.png",
		"lit_leather.png": "data/litspheres/lit_leather.png",
		"head-rectangular.png": "data/targets/head/images/head-rectangular.png",
		"lit_african_sweat.png": "data/litspheres/lit_african_sweat.png",
		"lit_hair.png": "data/litspheres/lit_hair.png",
		"head-age-less-more.png": "data/targets/head/images/head-age-less-more.png",
		"r-foot-scale-horiz-decr-incr.png": "data/targets/armslegs/images/r-foot-scale-horiz-decr-incr.png",
		"r-eye-corner2-down-up.png": "data/targets/eyes/images/r-eye-corner2-down-up.png",
		"torso-scale-depth-decr-incr.png": "data/targets/torso/images/torso-scale-depth-decr-incr.png",
		"lit_refl_sharp_aniso_hard.png": "data/litspheres/lit_refl_sharp_aniso_hard.png",
		"head-square.png": "data/targets/head/images/head-square.png",
		"r-lowerarm-scale-vert-decr-incr.png": "data/targets/armslegs/images/r-lowerarm-scale-vert-decr-incr.png",
		"mouth-scale-horiz-decr-incr.png": "data/targets/mouth/images/mouth-scale-horiz-decr-incr.png",
		"eyebrow002.png": "data/eyebrows/eyebrow002/eyebrow002.png",
		"r-ear-flap-in-out.png": "data/targets/ears/images/r-ear-flap-in-out.png",
		"male_casualsuit04_ao.png": "data/clothes/male_casualsuit04/male_casualsuit04_ao.png",
		"r-upperarm-scale-depth-decr-incr.png": "data/targets/armslegs/images/r-upperarm-scale-depth-decr-incr.png",
		"lit_toon01.png": "data/litspheres/lit_toon01.png",
		"neck-scale-vert-less-more.png": "data/targets/neck/images/neck-scale-vert-less-more.png",
		"short02_normal.png": "data/hair/short02/short02_normal.png",
		"skinmat_eye.png": "data/litspheres/skinmat_eye.png",
		"texture_notfound.png": "data/textures/texture_notfound.png",
		"hip-scale-horiz-decr-incr.png": "data/targets/hip/images/hip-scale-horiz-decr-incr.png",
		"middleage_darkskinned_female_diffuse.png": "data/skins/textures/middleage_darkskinned_female_diffuse.png",
		"l-upperarm-shoulder-muscle-decr-incr.png": "data/targets/armslegs/images/l-upperarm-shoulder-muscle-decr-incr.png",
		"r-eye-height1-min-max.png": "data/targets/eyes/images/r-eye-height1-min-max.png",
		"r-lowerarm-muscle-decr-incr.png": "data/targets/armslegs/images/r-lowerarm-muscle-decr-incr.png",
		"grid.png": "data/themes/makehuman/icons/grid.png",
		"branch-open.png": "data/themes/makehuman/images/branch-open.png",
		"male_casualsuit02_ao.png": "data/clothes/male_casualsuit02/male_casualsuit02_ao.png",
		"l-lowerleg-scale-vert-decr-incr.png": "data/targets/armslegs/images/l-lowerleg-scale-vert-decr-incr.png",
		"female_casualsuit01_ao.png": "data/clothes/female_casualsuit01/female_casualsuit01_ao.png",
		"short02_diffuse.png": "data/hair/short02/short02_diffuse.png",
		"shoes04_diffuse.png": "data/clothes/shoes04/shoes04_diffuse.png",
		"forehead-scale-vert-less-more.png": "data/targets/forehead/images/forehead-scale-vert-less-more.png",
		"lit_caucasian_sweat.png": "data/litspheres/lit_caucasian_sweat.png",
		"eyelashes02.png": "data/eyelashes/eyelashes02/eyelashes02.png",
		"nose-width2-min-max.png": "data/targets/nose/images/nose-width2-min-max.png",
		"r-eye-move-down-up.png": "data/targets/eyes/images/r-eye-move-down-up.png",
		"hip-trans-down-up.png": "data/targets/hip/images/hip-trans-down-up.png",
		"male_casualsuit02_diffuse.png": "data/clothes/male_casualsuit02/male_casualsuit02_diffuse.png",
		"lit_refl_sharp_aniso.png": "data/litspheres/lit_refl_sharp_aniso.png",
		"head-trans-backward-forward.png": "data/targets/head/images/head-trans-backward-forward.png",
		"r-upperarm-muscle-decr-incr.png": "data/targets/armslegs/images/r-upperarm-muscle-decr-incr.png",
		"branch-closed.png": "data/themes/makehuman/images/branch-closed.png",
		"l-upperleg-scale-horiz-decr-incr.png": "data/targets/armslegs/images/l-upperleg-scale-horiz-decr-incr.png",
		"l-eye-height1-min-max.png": "data/targets/eyes/images/l-eye-height1-min-max.png",
		"grey_eye.png": "data/eyes/materials/grey_eye.png",
		"r-cheek-bones-in-out.png": "data/targets/cheek/images/r-cheek-bones-in-out.png",
		"help.png": "data/themes/makehuman/icons/help.png",
		"stereo2.png": "data/themes/makehuman/icons/stereo2.png",
		"torso-scale-horiz-decr-incr.png": "data/targets/torso/images/torso-scale-horiz-decr-incr.png",
		"r-upperleg-muscle-decr-incr.png": "data/targets/armslegs/images/r-upperleg-muscle-decr-incr.png",
		"symm2.png": "data/themes/makehuman/icons/symm2.png",
		"mouth-scale-vert-decr-incr.png": "data/targets/mouth/images/mouth-scale-vert-decr-incr.png",
		"r-ear-size-small-big.png": "data/targets/ears/images/r-ear-size-small-big.png",
		"mouth-cupidsbow-decr-incr.png": "data/targets/mouth/images/mouth-cupidsbow-decr-incr.png",
		"l-ear-rot-backward-forward.png": "data/targets/ears/images/l-ear-rot-backward-forward.png",
		"l-ear-shape2-square-round.png": "data/targets/ears/images/l-ear-shape2-square-round.png",
		"female_casualsuit01_diffuse.png": "data/clothes/female_casualsuit01/female_casualsuit01_diffuse.png",
		"eyebrows-trans-depth-less-more.png": "data/targets/eyebrows/images/eyebrows-trans-depth-less-more.png",
		"nose-trans-vert-down-up.png": "data/targets/nose/images/nose-trans-vert-down-up.png",
		"nose-greek-lessgreek-moregreek.png": "data/targets/nose/images/nose-greek-lessgreek-moregreek.png",
		"fedora_displacement.png": "data/clothes/fedora01/materials/fedora_displacement.png",
		"female_sportsuit01_diffuse.png": "data/clothes/female_sportsuit01/female_sportsuit01_diffuse.png",
		"r-eye-size-small-big.png": "data/targets/eyes/images/r-eye-size-small-big.png",
		"r-ear-shape2-square-round.png": "data/targets/ears/images/r-ear-shape2-square-round.png",
		"r-foot-trans-down-up.png": "data/targets/armslegs/images/r-foot-trans-down-up.png",
		"chin-bones-in-out.png": "data/targets/chin/images/chin-bones-in-out.png",
		"stomach-pregnant-decr-incr.png": "data/targets/stomach/images/stomach-pregnant-decr-incr.png",
		"head-invertedtriangular.png": "data/targets/head/images/head-invertedtriangular.png",
		"mouth-upperlip-width-min-max.png": "data/targets/mouth/images/mouth-upperlip-width-min-max.png",
		"mono.png": "data/themes/makehuman/icons/mono.png",
		"eyebrow001.png": "data/eyebrows/eyebrow001/eyebrow001.png",
		"r-eye-height2-min-max.png": "data/targets/eyes/images/r-eye-height2-min-max.png",
		"eyelashes03.png": "data/eyelashes/eyelashes03/eyelashes03.png",
		"male_casualsuit03_ao.png": "data/clothes/male_casualsuit03/male_casualsuit03_ao.png",
		"lit_asian_sweat.png": "data/litspheres/lit_asian_sweat.png",
		"head-trans-down-up.png": "data/targets/head/images/head-trans-down-up.png",
		"r-foot-scale-vert-decr-incr.png": "data/targets/armslegs/images/r-foot-scale-vert-decr-incr.png",
		"lit_african.png": "data/litspheres/lit_african.png",
		"young_lightskinned_female_diffuse.png": "data/skins/textures/young_lightskinned_female_diffuse.png",
		"l-eye-height2-min-max.png": "data/targets/eyes/images/l-eye-height2-min-max.png",
		"neck-scale-depth-less-more.png": "data/targets/neck/images/neck-scale-depth-less-more.png",
		"eyelashes01.png": "data/eyelashes/eyelashes01/eyelashes01.png",
		"legs-lowerlegheight-decr-incr.png": "data/targets/legs/images/legs-lowerlegheight-decr-incr.png",
		"r-ear-trans-depth-backward-forward.png": "data/targets/ears/images/r-ear-trans-depth-backward-forward.png",
		"neck-trans-vert-down-up.png": "data/targets/neck/images/neck-trans-vert-down-up.png",
		"shoes01_diffuse.png": "data/clothes/shoes01/shoes01_diffuse.png",
		"male_casualsuit03_normal.png": "data/clothes/male_casualsuit03/male_casualsuit03_normal.png",
		"nose-scale-horiz-decr-incr.png": "data/targets/nose/images/nose-scale-horiz-decr-incr.png",
		"nose-scale-depth-decr-incr.png": "data/targets/nose/images/nose-scale-depth-decr-incr.png",
		"l-foot-scale-vert-decr-incr.png": "data/targets/armslegs/images/l-foot-scale-vert-decr-incr.png",
		"front.png": "data/themes/makehuman/icons/front.png",
		"young_darkskinned_male_diffuse.png": "data/skins/textures/young_darkskinned_male_diffuse.png",
		"l-upperarm-skinny-fat.png": "data/targets/armslegs/images/l-upperarm-skinny-fat.png",
		"long01_diffuse.png": "data/hair/long01/long01_diffuse.png",
		"l-lowerarm-scale-horiz-decr-incr.png": "data/targets/armslegs/images/l-lowerarm-scale-horiz-decr-incr.png",
		"r-foot-trans-forward-backward.png": "data/targets/armslegs/images/r-foot-trans-forward-backward.png",
		"torso-trans-vert-down-up.png": "data/targets/torso/images/torso-trans-vert-down-up.png",
		"forehead-trans-depth-forward-backward.png": "data/targets/forehead/images/forehead-trans-depth-forward-backward.png",
		"checkbox-orange.png": "data/themes/makehuman/images/checkbox-orange.png",
		"r-lowerleg-skinny-fat.png": "data/targets/armslegs/images/r-lowerleg-skinny-fat.png",
		"pelvis-tone-decr-incr.png": "data/targets/pelvis/images/pelvis-tone-decr-incr.png",
		"tongue01_diffuse.png": "data/tongue/tongue01/tongue01_diffuse.png",
		"l-upperarm-scale-horiz-decr-incr.png": "data/targets/armslegs/images/l-upperarm-scale-horiz-decr-incr.png",
		"eyebrows-angle-up-down.png": "data/targets/eyebrows/images/eyebrows-angle-up-down.png",
		"undo.png": "data/themes/makehuman/icons/undo.png",
		"r-lowerleg-scale-depth-decr-incr.png": "data/targets/armslegs/images/r-lowerleg-scale-depth-decr-incr.png",
		"old_lightskinned_female_diffuse2.png": "data/skins/textures/old_lightskinned_female_diffuse2.png",
		"l-upperleg-scale-vert-decr-incr.png": "data/targets/armslegs/images/l-upperleg-scale-vert-decr-incr.png",
		"chin-prognathism-less-more.png": "data/targets/chin/images/chin-prognathism-less-more.png",
		"eyebrow010.png": "data/eyebrows/eyebrow010/eyebrow010.png",
		"l-upperleg-skinny-fat.png": "data/targets/armslegs/images/l-upperleg-skinny-fat.png",
		"shoes04_normal.png": "data/clothes/shoes04/shoes04_normal.png",
		"mouth-lowerlip-volume-deflate-inflate.png": "data/targets/mouth/images/mouth-lowerlip-volume-deflate-inflate.png",
		"checkbox.png": "data/themes/makehuman/images/checkbox.png",
		"r-upperarm-skinny-fat.png": "data/targets/armslegs/images/r-upperarm-skinny-fat.png",
		"neck-back-scale-depth-less-more.png": "data/targets/neck/images/neck-back-scale-depth-less-more.png",
		"r-upperleg-scale-depth-decr-incr.png": "data/targets/armslegs/images/r-upperleg-scale-depth-decr-incr.png",
		"neck-scale-horiz-less-more.png": "data/targets/neck/images/neck-scale-horiz-less-more.png",
		"penis01_default.png": "data/genitals/penis01/penis01_default.png",
		"l-hand-scale-decr-incr.png": "data/targets/armslegs/images/l-hand-scale-decr-incr.png",
		"l-ear-flap-in-out.png": "data/targets/ears/images/l-ear-flap-in-out.png",
		"middleage_lightskinned_female_diffuse.png": "data/skins/textures/middleage_lightskinned_female_diffuse.png",
		"nose-flaring-decr-incr.png": "data/targets/nose/images/nose-flaring-decr-incr.png",
		"background.png": "data/themes/makehuman/icons/background.png",
		"r-foot-scale-depth-decr-incr.png": "data/targets/armslegs/images/r-foot-scale-depth-decr-incr.png",
		"l-foot-trans-forward-backward.png": "data/targets/armslegs/images/l-foot-trans-forward-backward.png",
		"torso-scale-vert-decr-incr.png": "data/targets/torso/images/torso-scale-vert-decr-incr.png",
		"shoes03_diffuse.png": "data/clothes/shoes03/shoes03_diffuse.png",
		"nose-point-down-up.png": "data/targets/nose/images/nose-point-down-up.png",
		"mouth-upperlip-volume-deflate-inflate.png": "data/targets/mouth/images/mouth-upperlip-volume-deflate-inflate.png",
		"bulge-decr-incr.png": "data/targets/pelvis/images/bulge-decr-incr.png",
		"lit_standard_skin.png": "data/litspheres/lit_standard_skin.png",
		"old_lightskinned_male_diffuse2.png": "data/skins/textures/old_lightskinned_male_diffuse2.png",
		"mouth-upperlip-ext-down-up.png": "data/targets/mouth/images/mouth-upperlip-ext-down-up.png",
		"female_elegantsuit01_normal.png": "data/clothes/female_elegantsuit01/female_elegantsuit01_normal.png",
		"mouth-lowerlip-width-min-max.png": "data/targets/mouth/images/mouth-lowerlip-width-min-max.png",
		"l-lowerleg-muscle-decr-incr.png": "data/targets/armslegs/images/l-lowerleg-muscle-decr-incr.png",
		"mouth-lowerlip-ext-up-down.png": "data/targets/mouth/images/mouth-lowerlip-ext-up-down.png",
		"female_casualsuit02_normal.png": "data/clothes/female_casualsuit02/female_casualsuit02_normal.png",
		"r-lowerarm-scale-horiz-decr-incr.png": "data/targets/armslegs/images/r-lowerarm-scale-horiz-decr-incr.png",
		"nose-height-min-max.png": "data/targets/nose/images/nose-height-min-max.png",
		"mouth-angles-down-up.png": "data/targets/mouth/images/mouth-angles-down-up.png",
		"r-lowerleg-scale-vert-decr-incr.png": "data/targets/armslegs/images/r-lowerleg-scale-vert-decr-incr.png",
		"l-eye-height3-min-max.png": "data/targets/eyes/images/l-eye-height3-min-max.png",
		"young_lightskinned_female_diffuse2.png": "data/skins/textures/young_lightskinned_female_diffuse2.png",
		"r-lowerarm-scale-depth-decr-incr.png": "data/targets/armslegs/images/r-lowerarm-scale-depth-decr-incr.png",
		"eyebrow009.png": "data/eyebrows/eyebrow009/eyebrow009.png",
		"r-ear-trans-vert-down-up.png": "data/targets/ears/images/r-ear-trans-vert-down-up.png",
		"middleage_lightskinned_male_diffuse.png": "data/skins/textures/middleage_lightskinned_male_diffuse.png",
		"male_casualsuit06_diffuse.png": "data/clothes/male_casualsuit06/male_casualsuit06_diffuse.png",
		"female_sportsuit01_normal.png": "data/clothes/female_sportsuit01/female_sportsuit01_normal.png",
		"nose-trans-depth-backward-forward.png": "data/targets/nose/images/nose-trans-depth-backward-forward.png",
		"nose-volume-potato-point.png": "data/targets/nose/images/nose-volume-potato-point.png",
		"lightblue_eye.png": "data/eyes/materials/lightblue_eye.png",
		"bottom.png": "data/themes/makehuman/icons/bottom.png",
		"old_darkskinned_female_diffuse.png": "data/skins/textures/old_darkskinned_female_diffuse.png",
		"skinmat_caucasian.png": "data/litspheres/skinmat_caucasian.png",
		"mouth-trans-in-out.png": "data/targets/mouth/images/mouth-trans-in-out.png",
		"brownlight_eye.png": "data/eyes/materials/brownlight_eye.png",
		"forehead-temple-in-out.png": "data/targets/forehead/images/forehead-temple-in-out.png",
		"l-foot-trans-in-out.png": "data/targets/armslegs/images/l-foot-trans-in-out.png",
		"male_casualsuit02_normal.png": "data/clothes/male_casualsuit02/male_casualsuit02_normal.png",
		"young_lightskinned_male_diffuse.png": "data/skins/textures/young_lightskinned_male_diffuse.png",
		"r-ear-shape1-pointed-triangle.png": "data/targets/ears/images/r-ear-shape1-pointed-triangle.png",
		"fedora_texture_black.png": "data/clothes/fedora01/materials/fedora_texture_black.png",
		"r-upperarm-scale-horiz-decr-incr.png": "data/targets/armslegs/images/r-upperarm-scale-horiz-decr-incr.png",
		"hip-trans-forward-backward.png": "data/targets/hip/images/hip-trans-forward-backward.png",
		"forehead-nubian-less-more.png": "data/targets/forehead/images/forehead-nubian-less-more.png",
		"r-eye-push2-out-in.png": "data/targets/eyes/images/r-eye-push2-out-in.png",
		"l-ear-width-min-max.png": "data/targets/ears/images/l-ear-width-min-max.png",
		"l-lowerleg-scale-horiz-decr-incr.png": "data/targets/armslegs/images/l-lowerleg-scale-horiz-decr-incr.png",
		"mouth-scale-depth-decr-incr.png": "data/targets/mouth/images/mouth-scale-depth-decr-incr.png",
		"lit_refl_sharp.png": "data/litspheres/lit_refl_sharp.png",
		"l-upperarm-scale-depth-decr-incr.png": "data/targets/armslegs/images/l-upperarm-scale-depth-decr-incr.png",
		"head-diamond.png": "data/targets/head/images/head-diamond.png",
		"young_lightskinned_male_diffuse2.png": "data/skins/textures/young_lightskinned_male_diffuse2.png",
		"neck-trans-horiz-in-out.png": "data/targets/neck/images/neck-trans-horiz-in-out.png",
		"l-eye-push2-out-in.png": "data/targets/eyes/images/l-eye-push2-out-in.png",
		"hip-trans-in-out.png": "data/targets/hip/images/hip-trans-in-out.png",
		"eyebrow005.png": "data/eyebrows/eyebrow005/eyebrow005.png",
		"nose-compression-compress-uncompress.png": "data/targets/nose/images/nose-compression-compress-uncompress.png",
		"r-cheek-inner-deflate-inflate.png": "data/targets/cheek/images/r-cheek-inner-deflate-inflate.png",
		"mouth-trans-backward-forward.png": "data/targets/mouth/images/mouth-trans-backward-forward.png",
		"hip-scale-depth-decr-incr.png": "data/targets/hip/images/hip-scale-depth-decr-incr.png",
		"stomach-tone-decr-incr.png": "data/targets/stomach/images/stomach-tone-decr-incr.png",
		"old_lightskinned_female_diffuse.png": "data/skins/textures/old_lightskinned_female_diffuse.png",
		"nose-scale-vert-decr-incr.png": "data/targets/nose/images/nose-scale-vert-decr-incr.png",
		"l-eye-corner1-down-up.png": "data/targets/eyes/images/l-eye-corner1-down-up.png",
		"neck-trans-depth-forward-backward.png": "data/targets/neck/images/neck-trans-depth-forward-backward.png",
		"old_darkskinned_male_diffuse.png": "data/skins/textures/old_darkskinned_male_diffuse.png",
		"fedora_texture.png": "data/clothes/fedora01/materials/fedora_texture.png",
		"left.png": "data/themes/makehuman/icons/left.png",
		"torso-muscle-dorsi-decr-incr.png": "data/targets/torso/images/torso-muscle-dorsi-decr-incr.png",
		"l-foot-scale-horiz-decr-incr.png": "data/targets/armslegs/images/l-foot-scale-horiz-decr-incr.png",
		"l-lowerarm-muscle-decr-incr.png": "data/targets/armslegs/images/l-lowerarm-muscle-decr-incr.png",
		"breastfirmness.png": "data/targets/breast/images/breastfirmness.png",
		"l-upperleg-muscle-decr-incr.png": "data/targets/armslegs/images/l-upperleg-muscle-decr-incr.png",
		"skinmat_asian.png": "data/litspheres/skinmat_asian.png",
		"hip-scale-vert-decr-incr.png": "data/targets/hip/images/hip-scale-vert-decr-incr.png",
		"eyelashes04.png": "data/eyelashes/eyelashes04/eyelashes04.png",
		"mouth-lowerlip-height-min-max.png": "data/targets/mouth/images/mouth-lowerlip-height-min-max.png",
		"afro_diffuse.png": "data/hair/afro01/afro_diffuse.png",
		"deepblue_eye.png": "data/eyes/materials/deepblue_eye.png",
		"l-ear-lobe-min-max.png": "data/targets/ears/images/l-ear-lobe-min-max.png",
		"l-ear-trans-vert-down-up.png": "data/targets/ears/images/l-ear-trans-vert-down-up.png",
		"r-ear-height-min-max.png": "data/targets/ears/images/r-ear-height-min-max.png",
		"short03_diffuse.png": "data/hair/short03/short03_diffuse.png",
		"breastsize.png": "data/targets/breast/images/breastsize.png",
		"export.png": "data/themes/makehuman/icons/export.png",
		"female_elegantsuit01_diffuse.png": "data/clothes/female_elegantsuit01/female_elegantsuit01_diffuse.png",
		"male_casualsuit03_diffuse.png": "data/clothes/male_casualsuit03/male_casualsuit03_diffuse.png",
		"r-eye-push1-in-out.png": "data/targets/eyes/images/r-eye-push1-in-out.png",
		"head-scale-depth-less-more.png": "data/targets/head/images/head-scale-depth-less-more.png",
		"redo.png": "data/themes/makehuman/icons/redo.png",
		"l-hand-fingers-length-decr-incr.png": "data/targets/armslegs/images/l-hand-fingers-length-decr-incr.png",
		"nose-nostril-width-min-max.png": "data/targets/nose/images/nose-nostril-width-min-max.png",
		"top.png": "data/themes/makehuman/icons/top.png",
		"female_casualsuit02_diffuse.png": "data/clothes/female_casualsuit02/female_casualsuit02_diffuse.png",
		"l-ear-size-small-big.png": "data/targets/ears/images/l-ear-size-small-big.png",
		"r-eye-height3-min-max.png": "data/targets/eyes/images/r-eye-height3-min-max.png",
		"male_worksuit01_diffuse.png": "data/clothes/male_worksuit01/male_worksuit01_diffuse.png",
		"r-upperarm-scale-vert-decr-incr.png": "data/targets/armslegs/images/r-upperarm-scale-vert-decr-incr.png",
		"nose-nostrils-angle-down-up.png": "data/targets/nose/images/nose-nostrils-angle-down-up.png",
		"head-round.png": "data/targets/head/images/head-round.png",
		"blue_eye.png": "data/eyes/materials/blue_eye.png",
		"nose-septumangle-decr-incr.png": "data/targets/nose/images/nose-septumangle-decr-incr.png",
		"l-upperleg-scale-depth-decr-incr.png": "data/targets/armslegs/images/l-upperleg-scale-depth-decr-incr.png",
		"l-cheek-bones-in-out.png": "data/targets/cheek/images/l-cheek-bones-in-out.png",
		"r-leg-genu-varun-valgus.png": "data/targets/armslegs/images/r-leg-genu-varun-valgus.png",
		"female_casualsuit02_ao.png": "data/clothes/female_casualsuit02/female_casualsuit02_ao.png",
		"short04_diffuse.png": "data/hair/short04/short04_diffuse.png",
		"torso-muscle-pectoral-decr-incr.png": "data/targets/torso/images/torso-muscle-pectoral-decr-incr.png",
		"male_casualsuit05_normal.png": "data/clothes/male_casualsuit05/male_casualsuit05_normal.png",
		"male_casualsuit01_normal.png": "data/clothes/male_casualsuit01/male_casualsuit01_normal.png",
		"l-ear-height-min-max.png": "data/targets/ears/images/l-ear-height-min-max.png",
		"eyebrow006.png": "data/eyebrows/eyebrow006/eyebrow006.png",
		"mouth-lowerlip-middle-up-down.png": "data/targets/mouth/images/mouth-lowerlip-middle-up-down.png",
		"ice_eye.png": "data/eyes/materials/ice_eye.png",
		"nose-point-width-less-more.png": "data/targets/nose/images/nose-point-width-less-more.png",
		"eyebrow003.png": "data/eyebrows/eyebrow003/eyebrow003.png",
		"savetgt.png": "data/themes/makehuman/icons/savetgt.png",
		"grab.png": "data/themes/makehuman/icons/grab.png",
		"r-eye-corner1-down-up.png": "data/targets/eyes/images/r-eye-corner1-down-up.png",
		"lit_matte.png": "data/litspheres/lit_matte.png",
		"torso-trans-horiz-in-out.png": "data/targets/torso/images/torso-trans-horiz-in-out.png",
		"male_casualsuit01_diffuse.png": "data/clothes/male_casualsuit01/male_casualsuit01_diffuse.png",
		"r-upperarm-shoulder-muscle-decr-incr.png": "data/targets/armslegs/images/r-upperarm-shoulder-muscle-decr-incr.png",
		"braid01_diffuse.png": "data/hair/braid01/braid01_diffuse.png",
		"nose-curve-concave-convex.png": "data/targets/nose/images/nose-curve-concave-convex.png",
		"l-foot-scale-depth-decr-incr.png": "data/targets/armslegs/images/l-foot-scale-depth-decr-incr.png",
		"lit_caucasian.png": "data/litspheres/lit_caucasian.png",
		"smooth.png": "data/themes/makehuman/icons/smooth.png",
		"stomach-navel-down-up.png": "data/targets/stomach/images/stomach-navel-down-up.png",
		"save.png": "data/themes/makehuman/icons/save.png",
		"l-lowerarm-scale-depth-decr-incr.png": "data/targets/armslegs/images/l-lowerarm-scale-depth-decr-incr.png",
		"r-lowerleg-muscle-decr-incr.png": "data/targets/armslegs/images/r-lowerleg-muscle-decr-incr.png",
		"l-ear-wing-in-out.png": "data/targets/ears/images/l-ear-wing-in-out.png",
		"back.png": "data/themes/makehuman/icons/back.png",
		"right.png": "data/themes/makehuman/icons/right.png",
		"shoes06_diffuse.png": "data/clothes/shoes06/shoes06_diffuse.png",
		"r-hand-fingers-diameter-decr-incr.png": "data/targets/armslegs/images/r-hand-fingers-diameter-decr-incr.png",
		"r-ear-rot-backward-forward.png": "data/targets/ears/images/r-ear-rot-backward-forward.png",
		"mouth-cupidsbow-width-min-max.png": "data/targets/mouth/images/mouth-cupidsbow-width-min-max.png",
		"teeth.png": "data/teeth/materials/teeth.png",
		"l-ear-shape1-pointed-triangle.png": "data/targets/ears/images/l-ear-shape1-pointed-triangle.png",
		"penis-length-min-max.png": "data/targets/genitals/images/penis-length-min-max.png",
		"r-hand-trans-in-out.png": "data/targets/armslegs/images/r-hand-trans-in-out.png",
		"mouth-up-down.png": "data/targets/mouth/images/mouth-up-down.png",
		"male_casualsuit01_ao.png": "data/clothes/male_casualsuit01/male_casualsuit01_ao.png",
		"r-upperleg-scale-horiz-decr-incr.png": "data/targets/armslegs/images/r-upperleg-scale-horiz-decr-incr.png",
		"r-upperleg-scale-vert-decr-incr.png": "data/targets/armslegs/images/r-upperleg-scale-vert-decr-incr.png",
		"mouth-trans-down-up.png": "data/targets/mouth/images/mouth-trans-down-up.png",
		"eyebrow008.png": "data/eyebrows/eyebrow008/eyebrow008.png",
		"handle.png": "data/themes/makehuman/images/handle.png",
		"stereo1.png": "data/themes/makehuman/icons/stereo1.png",
		"chin-width-min-max.png": "data/targets/chin/images/chin-width-min-max.png",
		"l-leg-genu-varun-valgus.png": "data/targets/armslegs/images/l-leg-genu-varun-valgus.png",
		"young_caucasian_male_special_suit.png": "data/skins/textures/young_caucasian_male_special_suit.png",
		"nose-width1-min-max.png": "data/targets/nose/images/nose-width1-min-max.png",
		"l-lowerleg-skinny-fat.png": "data/targets/armslegs/images/l-lowerleg-skinny-fat.png",
		"male_elegantsuit01_diffuse.png": "data/clothes/male_elegantsuit01/male_elegantsuit01_diffuse.png",
		"penis-testicles-min-max.png": "data/targets/genitals/images/penis-testicles-min-max.png",
		"middleage_lightskinned_male_diffuse2.png": "data/skins/textures/middleage_lightskinned_male_diffuse2.png",
		"head-triangular.png": "data/targets/head/images/head-triangular.png",
		"male_casualsuit06_normal.png": "data/clothes/male_casualsuit06/male_casualsuit06_normal.png",
		"qexport.png": "data/themes/makehuman/icons/qexport.png"
	},
	"targets": {
		"data/targets/expression/units/african/nose-compression.target": [
			"expression",
			"units",
			"nose",
			"compression"
		],
		"data/targets/chin/chin-triangle.target": [
			"chin",
			"chin",
			"triangle"
		],
		"data/targets/macrodetails/african-female-young.target": [
			"macrodetails"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/ears/l-ear-trans-depth-forward.target": [
			"ears",
			"l",
			"ear",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-move-out.target": [
			"eyes",
			"l",
			"eye",
			"move",
			"out"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/nose-left-dilatation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"dilatation"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/eyebrows-right-down.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"down"
		],
		"data/targets/breast/nipple-point-in.target": [
			"breast",
			"nipple",
			"point",
			"in"
		],
		"data/targets/eyes/l-eye-push1-in.target": [
			"eyes",
			"l",
			"eye",
			"push1",
			"in"
		],
		"data/targets/ears/l-ear-lobe-min.target": [
			"ears",
			"l",
			"ear",
			"lobe",
			"min"
		],
		"data/targets/macrodetails/universal-female-young-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-male-baby-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/mouth/mouth-cupidsbow-width-max.target": [
			"mouth",
			"mouth",
			"cupidsbow",
			"width",
			"max"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/nose/nose-scale-depth-decr.target": [
			"nose",
			"nose",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/eyebrows-right-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"inner",
			"up"
		],
		"data/targets/neck/neck-scale-horiz-less.target": [
			"neck",
			"neck",
			"scale",
			"horiz",
			"less"
		],
		"data/targets/nose/nose-hump-morehump.target": [
			"nose",
			"nose",
			"hump",
			"morehump"
		],
		"data/targets/expression/units/asian/eye-right-closure.target": [
			"expression",
			"units",
			"eye",
			"right",
			"closure"
		],
		"data/targets/macrodetails/asian-female-child.target": [
			"macrodetails"
		],
		"data/targets/eyes/l-eye-push2-out.target": [
			"eyes",
			"l",
			"eye",
			"push2",
			"out"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-trans-in.target": [
			"mouth",
			"mouth",
			"trans",
			"in"
		],
		"data/targets/eyes/r-eye-push2-in.target": [
			"eyes",
			"r",
			"eye",
			"push2",
			"in"
		],
		"data/targets/macrodetails/universal-female-baby-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/l-eye-move-up.target": [
			"eyes",
			"l",
			"eye",
			"move",
			"up"
		],
		"data/targets/armslegs/l-foot-scale-vert-decr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/armslegs/r-upperarm-scale-depth-incr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-upperleg-scale-horiz-decr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/expression/units/african/eyebrows-left-down.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"down"
		],
		"data/targets/nose/nose-height-min.target": [
			"nose",
			"nose",
			"height",
			"min"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/ears/l-ear-shape1-pointed.target": [
			"ears",
			"l",
			"ear",
			"shape1",
			"pointed"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/nose-compression.target": [
			"expression",
			"units",
			"nose",
			"compression"
		],
		"data/targets/macrodetails/universal-female-young-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/eyes/r-eye-height3-min.target": [
			"eyes",
			"r",
			"eye",
			"height3",
			"min"
		],
		"data/targets/cheek/r-cheek-bones-in.target": [
			"cheek",
			"r",
			"cheek",
			"bones",
			"in"
		],
		"data/targets/armslegs/r-hand-scale-incr.target": [
			"armslegs",
			"r",
			"hand",
			"scale",
			"incr"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/torso/torso-trans-horiz-out.target": [
			"torso",
			"torso",
			"trans",
			"horiz",
			"out"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-brown-1-r.target": [
			"asym",
			"asym",
			"brown",
			"1",
			"r"
		],
		"data/targets/asym/asym-nose-4-l.target": [
			"asym",
			"asym",
			"nose",
			"4",
			"l"
		],
		"data/targets/armslegs/r-upperarm-scale-depth-decr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/eyes/r-eye-corner1-down.target": [
			"eyes",
			"r",
			"eye",
			"corner1",
			"down"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-male-young-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/african-female-child.target": [
			"macrodetails"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/ears/r-ear-size-small.target": [
			"ears",
			"r",
			"ear",
			"size",
			"small"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/eyes/r-eye-bag-height-max.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"height",
			"max"
		],
		"data/targets/armslegs/l-hand-fingers-length-decr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"length",
			"decr"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/pelvis/bulge-decr.target": [
			"pelvis",
			"bulge",
			"decr"
		],
		"data/targets/neck/neck-trans-vert-down.target": [
			"neck",
			"neck",
			"trans",
			"vert",
			"down"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/african/eyebrows-left-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"extern",
			"up"
		],
		"data/targets/pelvis/pelvis-tone-incr.target": [
			"pelvis",
			"pelvis",
			"tone",
			"incr"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-upperarm-scale-depth-decr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/armslegs/l-foot-scale-horiz-decr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-mouth-2-l.target": [
			"asym",
			"asym",
			"mouth",
			"2",
			"l"
		],
		"data/targets/eyes/r-eye-size-small.target": [
			"eyes",
			"r",
			"eye",
			"size",
			"small"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/nose-right-dilatation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"dilatation"
		],
		"data/targets/eyes/l-eye-corner1-up.target": [
			"eyes",
			"l",
			"eye",
			"corner1",
			"up"
		],
		"data/targets/measure/measure-lowerarmlenght-increase.target": [
			"measure",
			"measure",
			"lowerarmlenght",
			"increase"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/eyes/l-eye-bag-height-min.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"height",
			"min"
		],
		"data/targets/buttocks/buttocks-volume-decr.target": [
			"buttocks",
			"buttocks",
			"volume",
			"decr"
		],
		"data/targets/mouth/mouth-upperlip-volume-inflate.target": [
			"mouth",
			"mouth",
			"upperlip",
			"volume",
			"inflate"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/breast-point-min.target": [
			"breast",
			"breast",
			"point",
			"min"
		],
		"data/targets/ears/l-ear-height-min.target": [
			"ears",
			"l",
			"ear",
			"height",
			"min"
		],
		"data/targets/asym/asym-top-2-r.target": [
			"asym",
			"asym",
			"top",
			"2",
			"r"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/measure/measure-lowerarmlenght-decrease.target": [
			"measure",
			"measure",
			"lowerarmlenght",
			"decrease"
		],
		"data/targets/armslegs/r-hand-fingers-distance-decr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"distance",
			"decr"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/nose/nose-volume-point.target": [
			"nose",
			"nose",
			"volume",
			"point"
		],
		"data/targets/asym/asym-eye-8-l.target": [
			"asym",
			"asym",
			"eye",
			"8",
			"l"
		],
		"data/targets/expression/units/caucasian/nose-right-elevation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"elevation"
		],
		"data/targets/eyes/l-eye-push1-out.target": [
			"eyes",
			"l",
			"eye",
			"push1",
			"out"
		],
		"data/targets/expression/units/asian/eyebrows-right-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"inner",
			"up"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-minmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/neck/neck-scale-vert-more.target": [
			"neck",
			"neck",
			"scale",
			"vert",
			"more"
		],
		"data/targets/armslegs/l-upperleg-skinny.target": [
			"armslegs",
			"l",
			"upperleg",
			"skinny"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-corner2-down.target": [
			"eyes",
			"l",
			"eye",
			"corner2",
			"down"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-baby-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/hip/hip-trans-forward.target": [
			"hip",
			"hip",
			"trans",
			"forward"
		],
		"data/targets/macrodetails/universal-male-baby-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-female-old-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/neck/neck-trans-horiz-out.target": [
			"neck",
			"neck",
			"trans",
			"horiz",
			"out"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/genitals/penis-length-max.target": [
			"genitals",
			"penis",
			"length",
			"max"
		],
		"data/targets/measure/measure-hips-decrease.target": [
			"measure",
			"measure",
			"hips",
			"decrease"
		],
		"data/targets/expression/units/caucasian/nose-left-dilatation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"dilatation"
		],
		"data/targets/expression/units/caucasian/eyebrows-right-down.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"down"
		],
		"data/targets/head/head-trans-down.target": [
			"head",
			"head",
			"trans",
			"down"
		],
		"data/targets/macrodetails/universal-female-baby-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperarm-muscle-decr.target": [
			"armslegs",
			"r",
			"upperarm",
			"muscle",
			"decr"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-foot-trans-out.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"out"
		],
		"data/targets/mouth/mouth-trans-up.target": [
			"mouth",
			"mouth",
			"trans",
			"up"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/nose-left-elevation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"elevation"
		],
		"data/targets/macrodetails/caucasian-female-baby.target": [
			"macrodetails"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/eye-right-slit.target": [
			"expression",
			"units",
			"eye",
			"right",
			"slit"
		],
		"data/targets/ears/r-ear-shape1-pointed.target": [
			"ears",
			"r",
			"ear",
			"shape1",
			"pointed"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/breast-dist-min.target": [
			"breast",
			"breast",
			"dist",
			"min"
		],
		"data/targets/ears/l-ear-size-small.target": [
			"ears",
			"l",
			"ear",
			"size",
			"small"
		],
		"data/targets/nose/nose-width3-min.target": [
			"nose",
			"nose",
			"width3",
			"min"
		],
		"data/targets/breast/breast-volume-vert-down.target": [
			"breast",
			"breast",
			"volume",
			"vert",
			"down"
		],
		"data/targets/chin/chin-prominent-more.target": [
			"chin",
			"chin",
			"prominent",
			"more"
		],
		"data/targets/mouth/mouth-upperlip-volume-deflate.target": [
			"mouth",
			"mouth",
			"upperlip",
			"volume",
			"deflate"
		],
		"data/targets/mouth/mouth-cupidsbow-decr.target": [
			"mouth",
			"mouth",
			"cupidsbow",
			"decr"
		],
		"data/targets/eyes/l-eye-bag-max.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"max"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/measure/measure-shoulder-increase.target": [
			"measure",
			"measure",
			"shoulder",
			"increase"
		],
		"data/targets/macrodetails/african-male-baby.target": [
			"macrodetails"
		],
		"data/targets/expression/units/caucasian/eyebrows-left-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"up"
		],
		"data/targets/ears/r-ear-trans-depth-forward.target": [
			"ears",
			"r",
			"ear",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-epicanthus-in.target": [
			"eyes",
			"l",
			"eye",
			"epicanthus",
			"in"
		],
		"data/targets/armslegs/r-upperleg-scale-horiz-decr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/macrodetails/universal-male-baby-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/mouth/mouth-lowerlip-ext-down.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"ext",
			"down"
		],
		"data/targets/breast/female-young-minmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/asian-female-young.target": [
			"macrodetails"
		],
		"data/targets/ears/l-ear-rot-forward.target": [
			"ears",
			"l",
			"ear",
			"rot",
			"forward"
		],
		"data/targets/armslegs/r-hand-trans-in.target": [
			"armslegs",
			"r",
			"hand",
			"trans",
			"in"
		],
		"data/targets/legs/legs-upperlegheight-decr.target": [
			"legs",
			"legs",
			"upperlegheight",
			"decr"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/ears/l-ear-shape2-round.target": [
			"ears",
			"l",
			"ear",
			"shape2",
			"round"
		],
		"data/targets/ears/r-ear-height-min.target": [
			"ears",
			"r",
			"ear",
			"height",
			"min"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/eyebrows-left-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"inner",
			"up"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/mouth-pursing.target": [
			"expression",
			"units",
			"mouth",
			"pursing"
		],
		"data/targets/breast/female-old-minmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperarm-shoulder-muscle-incr.target": [
			"armslegs",
			"r",
			"upperarm",
			"shoulder",
			"muscle",
			"incr"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-hand-fingers-distance-decr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"distance",
			"decr"
		],
		"data/targets/nose/nose-nostril-width-min.target": [
			"nose",
			"nose",
			"nostril",
			"width",
			"min"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/head/head-scale-depth-less.target": [
			"head",
			"head",
			"scale",
			"depth",
			"less"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/mouth-elevation.target": [
			"expression",
			"units",
			"mouth",
			"elevation"
		],
		"data/targets/armslegs/l-foot-scale-depth-incr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/caucasian/nose-depression.target": [
			"expression",
			"units",
			"nose",
			"depression"
		],
		"data/targets/eyes/r-eye-eyefold-angle-up.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"angle",
			"up"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/eyebrows-right-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"extern",
			"up"
		],
		"data/targets/expression/units/caucasian/nose-compression.target": [
			"expression",
			"units",
			"nose",
			"compression"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/measure/measure-hips-increase.target": [
			"measure",
			"measure",
			"hips",
			"increase"
		],
		"data/targets/eyes/l-eye-height1-min.target": [
			"eyes",
			"l",
			"eye",
			"height1",
			"min"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/head/head-trans-forward.target": [
			"head",
			"head",
			"trans",
			"forward"
		],
		"data/targets/measure/measure-waist-increase.target": [
			"measure",
			"measure",
			"waist",
			"increase"
		],
		"data/targets/armslegs/r-lowerarm-muscle-incr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"muscle",
			"incr"
		],
		"data/targets/mouth/mouth-lowerlip-volume-inflate.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"volume",
			"inflate"
		],
		"data/targets/asym/asym-nose-4-r.target": [
			"asym",
			"asym",
			"nose",
			"4",
			"r"
		],
		"data/targets/armslegs/l-lowerleg-muscle-incr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"muscle",
			"incr"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/mouth-open.target": [
			"expression",
			"units",
			"mouth",
			"open"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-dimples-out.target": [
			"mouth",
			"mouth",
			"dimples",
			"out"
		],
		"data/targets/eyes/l-eye-corner1-down.target": [
			"eyes",
			"l",
			"eye",
			"corner1",
			"down"
		],
		"data/targets/macrodetails/universal-male-old-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/expression/units/african/mouth-upward-retraction.target": [
			"expression",
			"units",
			"mouth",
			"upward",
			"retraction"
		],
		"data/targets/genitals/penis-testicles-min.target": [
			"genitals",
			"penis",
			"testicles",
			"min"
		],
		"data/targets/head/head-back-scale-depth-more.target": [
			"head",
			"head",
			"back",
			"scale",
			"depth",
			"more"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/torso/torso-scale-depth-decr.target": [
			"torso",
			"torso",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/macrodetails/universal-male-child-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/measure/measure-napetowaist-increase.target": [
			"measure",
			"measure",
			"napetowaist",
			"increase"
		],
		"data/targets/stomach/stomach-pregnant-decr.target": [
			"stomach",
			"stomach",
			"pregnant",
			"decr"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/breast-volume-vert-up.target": [
			"breast",
			"breast",
			"volume",
			"vert",
			"up"
		],
		"data/targets/nose/nose-compression-uncompress.target": [
			"nose",
			"nose",
			"compression",
			"uncompress"
		],
		"data/targets/chin/chin-height-min.target": [
			"chin",
			"chin",
			"height",
			"min"
		],
		"data/targets/expression/units/asian/nose-left-elevation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"elevation"
		],
		"data/targets/measure/measure-upperarmlenght-increase.target": [
			"measure",
			"measure",
			"upperarmlenght",
			"increase"
		],
		"data/targets/nose/nose-nostril-width-max.target": [
			"nose",
			"nose",
			"nostril",
			"width",
			"max"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/caucasian-male-young.target": [
			"macrodetails"
		],
		"data/targets/breast/female-young-minmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-scale-depth-incr.target": [
			"nose",
			"nose",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/expression/units/caucasian/mouth-retraction.target": [
			"expression",
			"units",
			"mouth",
			"retraction"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asymm-breast-1-l.target": [
			"asym",
			"asymm",
			"breast",
			"1",
			"l"
		],
		"data/targets/macrodetails/universal-male-child-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-male-young-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/hip/hip-trans-backward.target": [
			"hip",
			"hip",
			"trans",
			"backward"
		],
		"data/targets/nose/nose-trans-horiz-in.target": [
			"nose",
			"nose",
			"trans",
			"horiz",
			"in"
		],
		"data/targets/eyes/r-eye-eyefold-concave.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"concave"
		],
		"data/targets/macrodetails/african-male-old.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/universal-male-child-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/head/head-square.target": [
			"head",
			"head",
			"square"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-brown-1-l.target": [
			"asym",
			"asym",
			"brown",
			"1",
			"l"
		],
		"data/targets/armslegs/r-foot-scale-horiz-decr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/asym/asym-ear-1-l.target": [
			"asym",
			"asym",
			"ear",
			"1",
			"l"
		],
		"data/targets/asym/asym-top-2-l.target": [
			"asym",
			"asym",
			"top",
			"2",
			"l"
		],
		"data/targets/mouth/mouth-lowerlip-middle-up.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"middle",
			"up"
		],
		"data/targets/macrodetails/universal-male-old-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-width1-min.target": [
			"nose",
			"nose",
			"width1",
			"min"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-minmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/head/head-trans-backward.target": [
			"head",
			"head",
			"trans",
			"backward"
		],
		"data/targets/eyes/l-eye-height3-min.target": [
			"eyes",
			"l",
			"eye",
			"height3",
			"min"
		],
		"data/targets/head/head-oval.target": [
			"head",
			"head",
			"oval"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/nose/nose-scale-vert-decr.target": [
			"nose",
			"nose",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/ears/l-ear-wing-out.target": [
			"ears",
			"l",
			"ear",
			"wing",
			"out"
		],
		"data/targets/armslegs/l-upperleg-scale-horiz-incr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/armslegs/l-upperarm-scale-horiz-incr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/measure/measure-wrist-increase.target": [
			"measure",
			"measure",
			"wrist",
			"increase"
		],
		"data/targets/armslegs/r-upperarm-scale-vert-decr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/cheek/l-cheek-trans-vert-up.target": [
			"cheek",
			"l",
			"cheek",
			"trans",
			"vert",
			"up"
		],
		"data/targets/eyes/l-eye-bag-in.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"in"
		],
		"data/targets/measure/measure-ankle-increase.target": [
			"measure",
			"measure",
			"ankle",
			"increase"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/nose-right-dilatation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"dilatation"
		],
		"data/targets/ears/r-ear-trans-depth-backward.target": [
			"ears",
			"r",
			"ear",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/armslegs/l-upperleg-fat.target": [
			"armslegs",
			"l",
			"upperleg",
			"fat"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-hand-fingers-length-incr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"length",
			"incr"
		],
		"data/targets/mouth/mouth-scale-depth-incr.target": [
			"mouth",
			"mouth",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/neck/neck-trans-depth-backward.target": [
			"neck",
			"neck",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-temple-2-r.target": [
			"asym",
			"asym",
			"temple",
			"2",
			"r"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/african/nose-left-elevation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"elevation"
		],
		"data/targets/torso/torso-vshape-less.target": [
			"torso",
			"torso",
			"vshape",
			"less"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/chin/chin-jaw-drop-less.target": [
			"chin",
			"chin",
			"jaw",
			"drop",
			"less"
		],
		"data/targets/macrodetails/asian-male-baby.target": [
			"macrodetails"
		],
		"data/targets/asym/asym-ear-4-r.target": [
			"asym",
			"asym",
			"ear",
			"4",
			"r"
		],
		"data/targets/mouth/mouth-lowerlip-width-min.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"width",
			"min"
		],
		"data/targets/nose/nose-greek-moregreek.target": [
			"nose",
			"nose",
			"greek",
			"moregreek"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-compression-compress.target": [
			"nose",
			"nose",
			"compression",
			"compress"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/head/head-scale-depth-more.target": [
			"head",
			"head",
			"scale",
			"depth",
			"more"
		],
		"data/targets/eyes/l-eye-epicanthus-out.target": [
			"eyes",
			"l",
			"eye",
			"epicanthus",
			"out"
		],
		"data/targets/chin/chin-prognathism-more.target": [
			"chin",
			"chin",
			"prognathism",
			"more"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/asian/mouth-part-later.target": [
			"expression",
			"units",
			"mouth",
			"part",
			"later"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-upperarm-shoulder-muscle-decr.target": [
			"armslegs",
			"l",
			"upperarm",
			"shoulder",
			"muscle",
			"decr"
		],
		"data/targets/expression/units/asian/eyebrows-left-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"extern",
			"up"
		],
		"data/targets/ears/r-ear-rot-backward.target": [
			"ears",
			"r",
			"ear",
			"rot",
			"backward"
		],
		"data/targets/eyes/l-eye-height2-min.target": [
			"eyes",
			"l",
			"eye",
			"height2",
			"min"
		],
		"data/targets/legs/legs-lowerlegheight-incr.target": [
			"legs",
			"legs",
			"lowerlegheight",
			"incr"
		],
		"data/targets/armslegs/l-lowerarm-scale-horiz-incr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/eye-right-closure.target": [
			"expression",
			"units",
			"eye",
			"right",
			"closure"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/mouth-pursing.target": [
			"expression",
			"units",
			"mouth",
			"pursing"
		],
		"data/targets/head/head-trans-out.target": [
			"head",
			"head",
			"trans",
			"out"
		],
		"data/targets/expression/units/african/mouth-corner-puller.target": [
			"expression",
			"units",
			"mouth",
			"corner",
			"puller"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-male-old-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-child-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/asym/asym-eye-4-r.target": [
			"asym",
			"asym",
			"eye",
			"4",
			"r"
		],
		"data/targets/macrodetails/universal-male-young-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/measure/measure-upperarmlenght-decrease.target": [
			"measure",
			"measure",
			"upperarmlenght",
			"decrease"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/asym/asymm-trunk-1-l.target": [
			"asym",
			"asymm",
			"trunk",
			"1",
			"l"
		],
		"data/targets/armslegs/l-upperarm-scale-horiz-decr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/macrodetails/universal-female-old-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/caucasian-male-baby.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/universal-female-young-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-lowerleg-skinny.target": [
			"armslegs",
			"l",
			"lowerleg",
			"skinny"
		],
		"data/targets/measure/measure-bust-increase.target": [
			"measure",
			"measure",
			"bust",
			"increase"
		],
		"data/targets/armslegs/l-foot-trans-in.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"in"
		],
		"data/targets/eyes/r-eye-push1-out.target": [
			"eyes",
			"r",
			"eye",
			"push1",
			"out"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/ears/r-ear-shape2-square.target": [
			"ears",
			"r",
			"ear",
			"shape2",
			"square"
		],
		"data/targets/measure/measure-lowerlegheight-decrease.target": [
			"measure",
			"measure",
			"lowerlegheight",
			"decrease"
		],
		"data/targets/armslegs/r-foot-scale-incr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"incr"
		],
		"data/targets/ears/l-ear-width-min.target": [
			"ears",
			"l",
			"ear",
			"width",
			"min"
		],
		"data/targets/armslegs/r-foot-scale-depth-incr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/armslegs/r-hand-fingers-diameter-decr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"diameter",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/eyebrows-right-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"extern",
			"up"
		],
		"data/targets/expression/units/african/nose-right-dilatation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"dilatation"
		],
		"data/targets/breast/female-child-minmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/cheek/r-cheek-bones-out.target": [
			"cheek",
			"r",
			"cheek",
			"bones",
			"out"
		],
		"data/targets/asym/asym-brown-2-r.target": [
			"asym",
			"asym",
			"brown",
			"2",
			"r"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/universal-male-child-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/mouth-retraction.target": [
			"expression",
			"units",
			"mouth",
			"retraction"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-lowerleg-scale-horiz-incr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/expression/units/asian/eyebrows-right-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"extern",
			"up"
		],
		"data/targets/measure/measure-waist-decrease.target": [
			"measure",
			"measure",
			"waist",
			"decrease"
		],
		"data/targets/hip/hip-scale-depth-incr.target": [
			"hip",
			"hip",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/ears/r-ear-trans-vert-up.target": [
			"ears",
			"r",
			"ear",
			"trans",
			"vert",
			"up"
		],
		"data/targets/measure/measure-underbust-decrease.target": [
			"measure",
			"measure",
			"underbust",
			"decrease"
		],
		"data/targets/chin/chin-cleft-out.target": [
			"chin",
			"chin",
			"cleft",
			"out"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-minmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/cheek/l-cheek-bones-in.target": [
			"cheek",
			"l",
			"cheek",
			"bones",
			"in"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-jaw-3-l.target": [
			"asym",
			"asym",
			"jaw",
			"3",
			"l"
		],
		"data/targets/macrodetails/asian-male-young.target": [
			"macrodetails"
		],
		"data/targets/torso/torso-trans-vert-down.target": [
			"torso",
			"torso",
			"trans",
			"vert",
			"down"
		],
		"data/targets/ears/r-ear-shape2-round.target": [
			"ears",
			"r",
			"ear",
			"shape2",
			"round"
		],
		"data/targets/eyebrows/eyebrows-angle-down.target": [
			"eyebrows",
			"eyebrows",
			"angle",
			"down"
		],
		"data/targets/macrodetails/universal-male-baby-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/neck/neck-double-more.target": [
			"neck",
			"neck",
			"double",
			"more"
		],
		"data/targets/expression/units/caucasian/eyebrows-left-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"inner",
			"up"
		],
		"data/targets/armslegs/r-upperleg-scale-vert-incr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/eyebrows-left-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"inner",
			"up"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-upperleg-scale-depth-decr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/macrodetails/universal-male-old-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/ears/r-ear-height-max.target": [
			"ears",
			"r",
			"ear",
			"height",
			"max"
		],
		"data/targets/ears/l-ear-lobe-max.target": [
			"ears",
			"l",
			"ear",
			"lobe",
			"max"
		],
		"data/targets/armslegs/r-foot-scale-horiz-incr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/head/head-age-less.target": [
			"head",
			"head",
			"age",
			"less"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/r-eye-move-out.target": [
			"eyes",
			"r",
			"eye",
			"move",
			"out"
		],
		"data/targets/breast/breast-point-max.target": [
			"breast",
			"breast",
			"point",
			"max"
		],
		"data/targets/asym/asym-cheek-2-l.target": [
			"asym",
			"asym",
			"cheek",
			"2",
			"l"
		],
		"data/targets/ears/r-ear-width-min.target": [
			"ears",
			"r",
			"ear",
			"width",
			"min"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-ear-4-l.target": [
			"asym",
			"asym",
			"ear",
			"4",
			"l"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-nose-1-l.target": [
			"asym",
			"asym",
			"nose",
			"1",
			"l"
		],
		"data/targets/eyes/r-eye-height1-max.target": [
			"eyes",
			"r",
			"eye",
			"height1",
			"max"
		],
		"data/targets/mouth/mouth-scale-horiz-decr.target": [
			"mouth",
			"mouth",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/breast-dist-max.target": [
			"breast",
			"breast",
			"dist",
			"max"
		],
		"data/targets/breast/nipple-point-out.target": [
			"breast",
			"nipple",
			"point",
			"out"
		],
		"data/targets/armslegs/r-lowerarm-scale-vert-incr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/armslegs/l-lowerleg-scale-vert-decr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-hand-trans-out.target": [
			"armslegs",
			"r",
			"hand",
			"trans",
			"out"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-jaw-2-l.target": [
			"asym",
			"asym",
			"jaw",
			"2",
			"l"
		],
		"data/targets/measure/measure-upperlegheight-increase.target": [
			"measure",
			"measure",
			"upperlegheight",
			"increase"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-jaw-1-l.target": [
			"asym",
			"asym",
			"jaw",
			"1",
			"l"
		],
		"data/targets/expression/units/caucasian/mouth-part-later.target": [
			"expression",
			"units",
			"mouth",
			"part",
			"later"
		],
		"data/targets/expression/units/asian/eyebrows-right-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"up"
		],
		"data/targets/macrodetails/universal-female-child-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/torso/torso-trans-depth-backward.target": [
			"torso",
			"torso",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/breast/female-old-minmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-young-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-old-minmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-upperarm-skinny.target": [
			"armslegs",
			"l",
			"upperarm",
			"skinny"
		],
		"data/targets/nose/nose-trans-vert-down.target": [
			"nose",
			"nose",
			"trans",
			"vert",
			"down"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-move-up.target": [
			"eyes",
			"r",
			"eye",
			"move",
			"up"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/r-lowerleg-scale-horiz-incr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/mouth-parling.target": [
			"expression",
			"units",
			"mouth",
			"parling"
		],
		"data/targets/eyes/r-eye-eyefold-angle-down.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"angle",
			"down"
		],
		"data/targets/ears/r-ear-width-max.target": [
			"ears",
			"r",
			"ear",
			"width",
			"max"
		],
		"data/targets/expression/units/caucasian/mouth-compression.target": [
			"expression",
			"units",
			"mouth",
			"compression"
		],
		"data/targets/neck/neck-trans-depth-forward.target": [
			"neck",
			"neck",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/head/head-scale-horiz-less.target": [
			"head",
			"head",
			"scale",
			"horiz",
			"less"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-nose-3-l.target": [
			"asym",
			"asym",
			"nose",
			"3",
			"l"
		],
		"data/targets/forehead/forehead-trans-depth-backward.target": [
			"forehead",
			"forehead",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/legs/legs-upperlegheight-incr.target": [
			"legs",
			"legs",
			"upperlegheight",
			"incr"
		],
		"data/targets/forehead/forehead-nubian-more.target": [
			"forehead",
			"forehead",
			"nubian",
			"more"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-lowerarm-fat.target": [
			"armslegs",
			"l",
			"lowerarm",
			"fat"
		],
		"data/targets/asym/asym-eye-2-l.target": [
			"asym",
			"asym",
			"eye",
			"2",
			"l"
		],
		"data/targets/ears/l-ear-width-max.target": [
			"ears",
			"l",
			"ear",
			"width",
			"max"
		],
		"data/targets/measure/measure-frontchest-increase.target": [
			"measure",
			"measure",
			"frontchest",
			"increase"
		],
		"data/targets/expression/units/african/eyebrows-left-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"up"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-foot-scale-horiz-incr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/macrodetails/universal-male-baby-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-female-child-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-bag-out.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"out"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/asian/eyebrows-left-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"up"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/stomach/stomach-navel-out.target": [
			"stomach",
			"stomach",
			"navel",
			"out"
		],
		"data/targets/pelvis/pelvis-tone-decr.target": [
			"pelvis",
			"pelvis",
			"tone",
			"decr"
		],
		"data/targets/eyes/r-eye-bag-max.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"max"
		],
		"data/targets/armslegs/l-foot-scale-depth-decr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-hand-fingers-distance-incr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"distance",
			"incr"
		],
		"data/targets/asym/asym-eye-5-l.target": [
			"asym",
			"asym",
			"eye",
			"5",
			"l"
		],
		"data/targets/legs/legs-lowerlegheight-decr.target": [
			"legs",
			"legs",
			"lowerlegheight",
			"decr"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/hip/hip-trans-in.target": [
			"hip",
			"hip",
			"trans",
			"in"
		],
		"data/targets/armslegs/r-lowerleg-muscle-decr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"muscle",
			"decr"
		],
		"data/targets/measure/measure-calf-increase.target": [
			"measure",
			"measure",
			"calf",
			"increase"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/cheek/r-cheek-trans-vert-up.target": [
			"cheek",
			"r",
			"cheek",
			"trans",
			"vert",
			"up"
		],
		"data/targets/head/head-angle-out.target": [
			"head",
			"head",
			"angle",
			"out"
		],
		"data/targets/hip/hip-scale-horiz-decr.target": [
			"hip",
			"hip",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/nose/nose-volume-potato.target": [
			"nose",
			"nose",
			"volume",
			"potato"
		],
		"data/targets/torso/torso-trans-depth-forward.target": [
			"torso",
			"torso",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/expression/units/asian/mouth-depression-retraction.target": [
			"expression",
			"units",
			"mouth",
			"depression",
			"retraction"
		],
		"data/targets/mouth/mouth-upperlip-width-max.target": [
			"mouth",
			"mouth",
			"upperlip",
			"width",
			"max"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-scale-horiz-decr.target": [
			"nose",
			"nose",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-eye-3-l.target": [
			"asym",
			"asym",
			"eye",
			"3",
			"l"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/asian/eyebrows-right-down.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"down"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-lowerarm-scale-depth-incr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/expression/units/african/nose-right-elevation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"elevation"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-bag-out.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"out"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/mouth-corner-puller.target": [
			"expression",
			"units",
			"mouth",
			"corner",
			"puller"
		],
		"data/targets/neck/neck-trans-horiz-in.target": [
			"neck",
			"neck",
			"trans",
			"horiz",
			"in"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-flaring-decr.target": [
			"nose",
			"nose",
			"flaring",
			"decr"
		],
		"data/targets/nose/nose-point-width-less.target": [
			"nose",
			"nose",
			"point",
			"width",
			"less"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/cheek/r-cheek-volume-deflate.target": [
			"cheek",
			"r",
			"cheek",
			"volume",
			"deflate"
		],
		"data/targets/head/head-scale-horiz-more.target": [
			"head",
			"head",
			"scale",
			"horiz",
			"more"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/r-eye-move-in.target": [
			"eyes",
			"r",
			"eye",
			"move",
			"in"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/eye-right-closure.target": [
			"expression",
			"units",
			"eye",
			"right",
			"closure"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/r-eye-push1-in.target": [
			"eyes",
			"r",
			"eye",
			"push1",
			"in"
		],
		"data/targets/head/head-rectangular.target": [
			"head",
			"head",
			"rectangular"
		],
		"data/targets/armslegs/r-foot-scale-vert-incr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/forehead/forehead-scale-vert-less.target": [
			"forehead",
			"forehead",
			"scale",
			"vert",
			"less"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-upperarm-muscle-decr.target": [
			"armslegs",
			"l",
			"upperarm",
			"muscle",
			"decr"
		],
		"data/targets/ears/l-ear-size-big.target": [
			"ears",
			"l",
			"ear",
			"size",
			"big"
		],
		"data/targets/macrodetails/asian-female-baby.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/asian-male-old.target": [
			"macrodetails"
		],
		"data/targets/torso/torso-muscle-pectoral-incr.target": [
			"torso",
			"torso",
			"muscle",
			"pectoral",
			"incr"
		],
		"data/targets/expression/units/caucasian/neck-platysma.target": [
			"expression",
			"units",
			"neck",
			"platysma"
		],
		"data/targets/expression/units/african/eye-left-opened-up.target": [
			"expression",
			"units",
			"eye",
			"left",
			"opened",
			"up"
		],
		"data/targets/nose/nose-point-down.target": [
			"nose",
			"nose",
			"point",
			"down"
		],
		"data/targets/chin/chin-jaw-drop-more.target": [
			"chin",
			"chin",
			"jaw",
			"drop",
			"more"
		],
		"data/targets/macrodetails/universal-female-baby-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-upperleg-fat.target": [
			"armslegs",
			"r",
			"upperleg",
			"fat"
		],
		"data/targets/torso/torso-scale-vert-incr.target": [
			"torso",
			"torso",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/armslegs/l-upperarm-muscle-incr.target": [
			"armslegs",
			"l",
			"upperarm",
			"muscle",
			"incr"
		],
		"data/targets/eyes/l-eye-height1-max.target": [
			"eyes",
			"l",
			"eye",
			"height1",
			"max"
		],
		"data/targets/ears/r-ear-flap-in.target": [
			"ears",
			"r",
			"ear",
			"flap",
			"in"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/african-male-young.target": [
			"macrodetails"
		],
		"data/targets/eyes/l-eye-eyefold-up.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"up"
		],
		"data/targets/nose/nose-nostrils-angle-up.target": [
			"nose",
			"nose",
			"nostrils",
			"angle",
			"up"
		],
		"data/targets/cheek/r-cheek-inner-deflate.target": [
			"cheek",
			"r",
			"cheek",
			"inner",
			"deflate"
		],
		"data/targets/nose/nose-width3-max.target": [
			"nose",
			"nose",
			"width3",
			"max"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/r-upperarm-scale-horiz-incr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/mouth/mouth-upperlip-middle-down.target": [
			"mouth",
			"mouth",
			"upperlip",
			"middle",
			"down"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/r-foot-trans-out.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"out"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/mouth/mouth-trans-out.target": [
			"mouth",
			"mouth",
			"trans",
			"out"
		],
		"data/targets/asym/asymm-breast-1-r.target": [
			"asym",
			"asymm",
			"breast",
			"1",
			"r"
		],
		"data/targets/ears/l-ear-trans-vert-down.target": [
			"ears",
			"l",
			"ear",
			"trans",
			"vert",
			"down"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-bag-min.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"min"
		],
		"data/targets/measure/measure-neckcirc-increase.target": [
			"measure",
			"measure",
			"neckcirc",
			"increase"
		],
		"data/targets/mouth/mouth-laugh-lines-out.target": [
			"mouth",
			"mouth",
			"laugh",
			"lines",
			"out"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-scale-horiz-incr.target": [
			"nose",
			"nose",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/nose/nose-greek-lessgreek.target": [
			"nose",
			"nose",
			"greek",
			"lessgreek"
		],
		"data/targets/measure/measure-shoulder-decrease.target": [
			"measure",
			"measure",
			"shoulder",
			"decrease"
		],
		"data/targets/armslegs/r-upperarm-scale-vert-incr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/torso/torso-vshape-more.target": [
			"torso",
			"torso",
			"vshape",
			"more"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-old-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-minmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-upperarm-scale-depth-incr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/caucasian/eye-left-opened-up.target": [
			"expression",
			"units",
			"eye",
			"left",
			"opened",
			"up"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/torso/torso-scale-depth-incr.target": [
			"torso",
			"torso",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-male-old-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/measure/measure-kneecirc-decrease.target": [
			"measure",
			"measure",
			"kneecirc",
			"decrease"
		],
		"data/targets/ears/l-ear-height-max.target": [
			"ears",
			"l",
			"ear",
			"height",
			"max"
		],
		"data/targets/asym/asym-eye-7-l.target": [
			"asym",
			"asym",
			"eye",
			"7",
			"l"
		],
		"data/targets/measure/measure-thighcirc-decrease.target": [
			"measure",
			"measure",
			"thighcirc",
			"decrease"
		],
		"data/targets/armslegs/l-lowerleg-scale-depth-incr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-move-in.target": [
			"eyes",
			"l",
			"eye",
			"move",
			"in"
		],
		"data/targets/armslegs/r-hand-fingers-diameter-incr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"diameter",
			"incr"
		],
		"data/targets/asym/asym-ear-2-l.target": [
			"asym",
			"asym",
			"ear",
			"2",
			"l"
		],
		"data/targets/armslegs/r-foot-trans-down.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"down"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/mouth-eversion.target": [
			"expression",
			"units",
			"mouth",
			"eversion"
		],
		"data/targets/breast/female-old-minmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/measure/measure-bust-decrease.target": [
			"measure",
			"measure",
			"bust",
			"decrease"
		],
		"data/targets/asym/asym-eye-5-r.target": [
			"asym",
			"asym",
			"eye",
			"5",
			"r"
		],
		"data/targets/nose/nose-nostrils-angle-down.target": [
			"nose",
			"nose",
			"nostrils",
			"angle",
			"down"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/eyes/r-eye-bag-height-min.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"height",
			"min"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/head/head-diamond.target": [
			"head",
			"head",
			"diamond"
		],
		"data/targets/eyes/r-eye-size-big.target": [
			"eyes",
			"r",
			"eye",
			"size",
			"big"
		],
		"data/targets/eyes/r-eye-height3-max.target": [
			"eyes",
			"r",
			"eye",
			"height3",
			"max"
		],
		"data/targets/armslegs/l-lowerarm-scale-vert-decr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-curve-concave.target": [
			"nose",
			"nose",
			"curve",
			"concave"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/cheek/l-cheek-inner-inflate.target": [
			"cheek",
			"l",
			"cheek",
			"inner",
			"inflate"
		],
		"data/targets/breast/breast-trans-vert-up.target": [
			"breast",
			"breast",
			"trans",
			"vert",
			"up"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/mouth/mouth-lowerlip-width-max.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"width",
			"max"
		],
		"data/targets/asym/asymm-trunk-1-r.target": [
			"asym",
			"asymm",
			"trunk",
			"1",
			"r"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-lowerarm-skinny.target": [
			"armslegs",
			"r",
			"lowerarm",
			"skinny"
		],
		"data/targets/asym/asym-mouth-1-l.target": [
			"asym",
			"asym",
			"mouth",
			"1",
			"l"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyebrows/eyebrows-trans-vert-more.target": [
			"eyebrows",
			"eyebrows",
			"trans",
			"vert",
			"more"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-lowerleg-fat.target": [
			"armslegs",
			"r",
			"lowerleg",
			"fat"
		],
		"data/targets/measure/measure-neckheight-increase.target": [
			"measure",
			"measure",
			"neckheight",
			"increase"
		],
		"data/targets/cheek/l-cheek-volume-inflate.target": [
			"cheek",
			"l",
			"cheek",
			"volume",
			"inflate"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-cheek-1-l.target": [
			"asym",
			"asym",
			"cheek",
			"1",
			"l"
		],
		"data/targets/armslegs/l-foot-scale-vert-incr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/mouth/mouth-laugh-lines-in.target": [
			"mouth",
			"mouth",
			"laugh",
			"lines",
			"in"
		],
		"data/targets/eyebrows/eyebrows-trans-depth-less.target": [
			"eyebrows",
			"eyebrows",
			"trans",
			"depth",
			"less"
		],
		"data/targets/mouth/mouth-scale-vert-decr.target": [
			"mouth",
			"mouth",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-upperarm-fat.target": [
			"armslegs",
			"r",
			"upperarm",
			"fat"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-hand-fingers-length-incr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"length",
			"incr"
		],
		"data/targets/expression/units/caucasian/eye-left-closure.target": [
			"expression",
			"units",
			"eye",
			"left",
			"closure"
		],
		"data/targets/macrodetails/universal-female-young-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/stomach/stomach-navel-up.target": [
			"stomach",
			"stomach",
			"navel",
			"up"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/head/head-scale-vert-less.target": [
			"head",
			"head",
			"scale",
			"vert",
			"less"
		],
		"data/targets/eyes/r-eye-move-down.target": [
			"eyes",
			"r",
			"eye",
			"move",
			"down"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-leg-genu-valgus.target": [
			"armslegs",
			"l",
			"leg",
			"genu",
			"valgus"
		],
		"data/targets/macrodetails/universal-male-child-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/forehead/forehead-temple-in.target": [
			"forehead",
			"forehead",
			"temple",
			"in"
		],
		"data/targets/forehead/forehead-trans-depth-forward.target": [
			"forehead",
			"forehead",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-upperarm-scale-vert-decr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/mouth/mouth-lowerlip-middle-down.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"middle",
			"down"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/ears/l-ear-rot-backward.target": [
			"ears",
			"l",
			"ear",
			"rot",
			"backward"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/hip/hip-scale-depth-decr.target": [
			"hip",
			"hip",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/eyes/r-eye-height2-min.target": [
			"eyes",
			"r",
			"eye",
			"height2",
			"min"
		],
		"data/targets/mouth/mouth-upperlip-height-min.target": [
			"mouth",
			"mouth",
			"upperlip",
			"height",
			"min"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-male-child-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/nose-depression.target": [
			"expression",
			"units",
			"nose",
			"depression"
		],
		"data/targets/macrodetails/universal-male-baby-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/measure/measure-upperlegheight-decrease.target": [
			"measure",
			"measure",
			"upperlegheight",
			"decrease"
		],
		"data/targets/armslegs/r-upperleg-scale-depth-decr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/mouth-parling.target": [
			"expression",
			"units",
			"mouth",
			"parling"
		],
		"data/targets/expression/units/caucasian/eye-right-opened-up.target": [
			"expression",
			"units",
			"eye",
			"right",
			"opened",
			"up"
		],
		"data/targets/macrodetails/universal-male-old-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/l-hand-trans-out.target": [
			"armslegs",
			"l",
			"hand",
			"trans",
			"out"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-lowerleg-scale-depth-decr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/asym/asym-temple-1-r.target": [
			"asym",
			"asym",
			"temple",
			"1",
			"r"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/head/head-trans-in.target": [
			"head",
			"head",
			"trans",
			"in"
		],
		"data/targets/macrodetails/asian-male-child.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/universal-female-old-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/expression/units/asian/mouth-eversion.target": [
			"expression",
			"units",
			"mouth",
			"eversion"
		],
		"data/targets/torso/torso-scale-horiz-incr.target": [
			"torso",
			"torso",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/expression/units/african/eye-left-closure.target": [
			"expression",
			"units",
			"eye",
			"left",
			"closure"
		],
		"data/targets/macrodetails/universal-female-child-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/cheek/l-cheek-volume-deflate.target": [
			"cheek",
			"l",
			"cheek",
			"volume",
			"deflate"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/hip/hip-scale-vert-incr.target": [
			"hip",
			"hip",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-lowerleg-scale-horiz-decr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-eyefold-concave.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"concave"
		],
		"data/targets/eyes/l-eye-size-big.target": [
			"eyes",
			"l",
			"eye",
			"size",
			"big"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/torso/torso-trans-horiz-in.target": [
			"torso",
			"torso",
			"trans",
			"horiz",
			"in"
		],
		"data/targets/mouth/mouth-scale-depth-decr.target": [
			"mouth",
			"mouth",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/r-upperarm-scale-horiz-decr.target": [
			"armslegs",
			"r",
			"upperarm",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/armslegs/r-foot-trans-forward.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"forward"
		],
		"data/targets/mouth/mouth-philtrum-volume-decrease.target": [
			"mouth",
			"mouth",
			"philtrum",
			"volume",
			"decrease"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-hand-scale-decr.target": [
			"armslegs",
			"l",
			"hand",
			"scale",
			"decr"
		],
		"data/targets/eyes/l-eye-corner2-up.target": [
			"eyes",
			"l",
			"eye",
			"corner2",
			"up"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-female-baby-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/expression/units/african/mouth-protusion.target": [
			"expression",
			"units",
			"mouth",
			"protusion"
		],
		"data/targets/nose/nose-width1-max.target": [
			"nose",
			"nose",
			"width1",
			"max"
		],
		"data/targets/expression/units/asian/eye-left-slit.target": [
			"expression",
			"units",
			"eye",
			"left",
			"slit"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/mouth-protusion.target": [
			"expression",
			"units",
			"mouth",
			"protusion"
		],
		"data/targets/expression/units/caucasian/mouth-upward-retraction.target": [
			"expression",
			"units",
			"mouth",
			"upward",
			"retraction"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-hand-fingers-diameter-decr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"diameter",
			"decr"
		],
		"data/targets/armslegs/r-foot-trans-up.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"up"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-scale-horiz-incr.target": [
			"mouth",
			"mouth",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/macrodetails/universal-female-old-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-male-young-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/eyes/r-eye-epicanthus-out.target": [
			"eyes",
			"r",
			"eye",
			"epicanthus",
			"out"
		],
		"data/targets/eyebrows/eyebrows-trans-depth-more.target": [
			"eyebrows",
			"eyebrows",
			"trans",
			"depth",
			"more"
		],
		"data/targets/macrodetails/universal-male-young-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-female-baby-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/l-lowerarm-skinny.target": [
			"armslegs",
			"l",
			"lowerarm",
			"skinny"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/mouth-protusion.target": [
			"expression",
			"units",
			"mouth",
			"protusion"
		],
		"data/targets/asym/asym-jaw-1-r.target": [
			"asym",
			"asym",
			"jaw",
			"1",
			"r"
		],
		"data/targets/mouth/mouth-trans-backward.target": [
			"mouth",
			"mouth",
			"trans",
			"backward"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/cheek/l-cheek-bones-out.target": [
			"cheek",
			"l",
			"cheek",
			"bones",
			"out"
		],
		"data/targets/hip/hip-scale-horiz-incr.target": [
			"hip",
			"hip",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/armslegs/l-upperleg-muscle-incr.target": [
			"armslegs",
			"l",
			"upperleg",
			"muscle",
			"incr"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-child-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/nose/nose-trans-depth-forward.target": [
			"nose",
			"nose",
			"trans",
			"depth",
			"forward"
		],
		"data/targets/asym/asym-eye-1-l.target": [
			"asym",
			"asym",
			"eye",
			"1",
			"l"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/measure/measure-kneecirc-increase.target": [
			"measure",
			"measure",
			"kneecirc",
			"increase"
		],
		"data/targets/measure/measure-underbust-increase.target": [
			"measure",
			"measure",
			"underbust",
			"increase"
		],
		"data/targets/breast/female-young-minmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/l-eye-bag-height-max.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"height",
			"max"
		],
		"data/targets/expression/units/caucasian/mouth-depression-retraction.target": [
			"expression",
			"units",
			"mouth",
			"depression",
			"retraction"
		],
		"data/targets/macrodetails/universal-female-baby-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/l-lowerleg-scale-vert-incr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-foot-scale-depth-decr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/asym/asym-nose-2-r.target": [
			"asym",
			"asym",
			"nose",
			"2",
			"r"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/hip/hip-scale-vert-decr.target": [
			"hip",
			"hip",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/mouth/mouth-upperlip-width-min.target": [
			"mouth",
			"mouth",
			"upperlip",
			"width",
			"min"
		],
		"data/targets/eyes/l-eye-eyefold-convex.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"convex"
		],
		"data/targets/mouth/mouth-cupidsbow-incr.target": [
			"mouth",
			"mouth",
			"cupidsbow",
			"incr"
		],
		"data/targets/armslegs/r-upperarm-shoulder-muscle-decr.target": [
			"armslegs",
			"r",
			"upperarm",
			"shoulder",
			"muscle",
			"decr"
		],
		"data/targets/macrodetails/caucasian-female-old.target": [
			"macrodetails"
		],
		"data/targets/ears/l-ear-trans-depth-backward.target": [
			"ears",
			"l",
			"ear",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/chin/chin-bones-out.target": [
			"chin",
			"chin",
			"bones",
			"out"
		],
		"data/targets/macrodetails/universal-female-baby-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-male-baby-minmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/nose/nose-point-up.target": [
			"nose",
			"nose",
			"point",
			"up"
		],
		"data/targets/macrodetails/african-female-baby.target": [
			"macrodetails"
		],
		"data/targets/asym/asym-top-1-l.target": [
			"asym",
			"asym",
			"top",
			"1",
			"l"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/neck-platysma.target": [
			"expression",
			"units",
			"neck",
			"platysma"
		],
		"data/targets/eyes/r-eye-eyefold-down.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"down"
		],
		"data/targets/armslegs/r-upperleg-scale-depth-incr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/armslegs/r-lowerarm-scale-vert-decr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/head/head-round.target": [
			"head",
			"head",
			"round"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-eye-4-l.target": [
			"asym",
			"asym",
			"eye",
			"4",
			"l"
		],
		"data/targets/ears/l-ear-flap-out.target": [
			"ears",
			"l",
			"ear",
			"flap",
			"out"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperleg-muscle-incr.target": [
			"armslegs",
			"r",
			"upperleg",
			"muscle",
			"incr"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-old-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-upperarm-skinny.target": [
			"armslegs",
			"r",
			"upperarm",
			"skinny"
		],
		"data/targets/asym/asym-jaw-3-r.target": [
			"asym",
			"asym",
			"jaw",
			"3",
			"r"
		],
		"data/targets/macrodetails/african-female-old.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/height/male-child-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-point-width-more.target": [
			"nose",
			"nose",
			"point",
			"width",
			"more"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-scale-vert-incr.target": [
			"mouth",
			"mouth",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/expression/units/african/mouth-elevation.target": [
			"expression",
			"units",
			"mouth",
			"elevation"
		],
		"data/targets/armslegs/l-foot-scale-decr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"decr"
		],
		"data/targets/asym/asym-mouth-2-r.target": [
			"asym",
			"asym",
			"mouth",
			"2",
			"r"
		],
		"data/targets/armslegs/r-lowerleg-muscle-incr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"muscle",
			"incr"
		],
		"data/targets/asym/asym-ear-3-r.target": [
			"asym",
			"asym",
			"ear",
			"3",
			"r"
		],
		"data/targets/macrodetails/height/female-child-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/hip/hip-waist-down.target": [
			"hip",
			"hip",
			"waist",
			"down"
		],
		"data/targets/armslegs/l-hand-fingers-diameter-incr.target": [
			"armslegs",
			"l",
			"hand",
			"fingers",
			"diameter",
			"incr"
		],
		"data/targets/macrodetails/universal-female-child-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/head/head-fat.target": [
			"head",
			"head",
			"fat"
		],
		"data/targets/head/head-skinny.target": [
			"head",
			"head",
			"skinny"
		],
		"data/targets/macrodetails/asian-female-old.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/caucasian-male-child.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/mouth/mouth-angles-down.target": [
			"mouth",
			"mouth",
			"angles",
			"down"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/male-young-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-minmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-foot-trans-forward.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"forward"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/asian/mouth-depression.target": [
			"expression",
			"units",
			"mouth",
			"depression"
		],
		"data/targets/macrodetails/universal-female-baby-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/asym/asym-nose-3-r.target": [
			"asym",
			"asym",
			"nose",
			"3",
			"r"
		],
		"data/targets/measure/measure-wrist-decrease.target": [
			"measure",
			"measure",
			"wrist",
			"decrease"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/nose/nose-septumangle-decr.target": [
			"nose",
			"nose",
			"septumangle",
			"decr"
		],
		"data/targets/measure/measure-waisttohip-decrease.target": [
			"measure",
			"measure",
			"waisttohip",
			"decrease"
		],
		"data/targets/expression/units/caucasian/eyebrows-left-down.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"down"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/universal-male-baby-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/universal-female-young-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/cheek/r-cheek-volume-inflate.target": [
			"cheek",
			"r",
			"cheek",
			"volume",
			"inflate"
		],
		"data/targets/expression/units/african/mouth-part-later.target": [
			"expression",
			"units",
			"mouth",
			"part",
			"later"
		],
		"data/targets/forehead/forehead-scale-vert-more.target": [
			"forehead",
			"forehead",
			"scale",
			"vert",
			"more"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/head/head-triangular.target": [
			"head",
			"head",
			"triangular"
		],
		"data/targets/macrodetails/african-male-child.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-eye-1-r.target": [
			"asym",
			"asym",
			"eye",
			"1",
			"r"
		],
		"data/targets/armslegs/r-lowerarm-scale-horiz-decr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/eyes/r-eye-eyefold-up.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"up"
		],
		"data/targets/head/head-invertedtriangular.target": [
			"head",
			"head",
			"invertedtriangular"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/hip/hip-waist-up.target": [
			"hip",
			"hip",
			"waist",
			"up"
		],
		"data/targets/head/head-trans-up.target": [
			"head",
			"head",
			"trans",
			"up"
		],
		"data/targets/expression/units/asian/eye-left-closure.target": [
			"expression",
			"units",
			"eye",
			"left",
			"closure"
		],
		"data/targets/armslegs/l-lowerarm-scale-depth-decr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/mouth/mouth-dimples-in.target": [
			"mouth",
			"mouth",
			"dimples",
			"in"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-female-child-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-eye-2-r.target": [
			"asym",
			"asym",
			"eye",
			"2",
			"r"
		],
		"data/targets/macrodetails/universal-female-old-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-upperleg-scale-vert-decr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/nose/nose-trans-vert-up.target": [
			"nose",
			"nose",
			"trans",
			"vert",
			"up"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-young-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/l-foot-trans-backward.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"backward"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/ears/r-ear-wing-out.target": [
			"ears",
			"r",
			"ear",
			"wing",
			"out"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/hip/hip-trans-up.target": [
			"hip",
			"hip",
			"trans",
			"up"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/male-young-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-minmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/torso/torso-muscle-dorsi-decr.target": [
			"torso",
			"torso",
			"muscle",
			"dorsi",
			"decr"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-trans-horiz-out.target": [
			"nose",
			"nose",
			"trans",
			"horiz",
			"out"
		],
		"data/targets/breast/nipple-size-min.target": [
			"breast",
			"nipple",
			"size",
			"min"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/eyes/r-eye-height2-max.target": [
			"eyes",
			"r",
			"eye",
			"height2",
			"max"
		],
		"data/targets/neck/neck-scale-vert-less.target": [
			"neck",
			"neck",
			"scale",
			"vert",
			"less"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/head/head-back-scale-depth-less.target": [
			"head",
			"head",
			"back",
			"scale",
			"depth",
			"less"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-upperlip-middle-up.target": [
			"mouth",
			"mouth",
			"upperlip",
			"middle",
			"up"
		],
		"data/targets/armslegs/r-lowerarm-scale-depth-incr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/breast/female-young-minmuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-hand-scale-decr.target": [
			"armslegs",
			"r",
			"hand",
			"scale",
			"decr"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-upperarm-shoulder-muscle-incr.target": [
			"armslegs",
			"l",
			"upperarm",
			"shoulder",
			"muscle",
			"incr"
		],
		"data/targets/cheek/l-cheek-trans-vert-down.target": [
			"cheek",
			"l",
			"cheek",
			"trans",
			"vert",
			"down"
		],
		"data/targets/asym/asym-eye-8-r.target": [
			"asym",
			"asym",
			"eye",
			"8",
			"r"
		],
		"data/targets/neck/neck-trans-vert-up.target": [
			"neck",
			"neck",
			"trans",
			"vert",
			"up"
		],
		"data/targets/measure/measure-waisttohip-increase.target": [
			"measure",
			"measure",
			"waisttohip",
			"increase"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/measure/measure-neckheight-decrease.target": [
			"measure",
			"measure",
			"neckheight",
			"decrease"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/male-old-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/asian/mouth-upward-retraction.target": [
			"expression",
			"units",
			"mouth",
			"upward",
			"retraction"
		],
		"data/targets/macrodetails/caucasian-male-old.target": [
			"macrodetails"
		],
		"data/targets/breast/female-child-minmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-child-maxmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-lowerarm-scale-horiz-incr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/armslegs/l-upperarm-fat.target": [
			"armslegs",
			"l",
			"upperarm",
			"fat"
		],
		"data/targets/asym/asym-mouth-1-r.target": [
			"asym",
			"asym",
			"mouth",
			"1",
			"r"
		],
		"data/targets/macrodetails/height/male-baby-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-temple-2-l.target": [
			"asym",
			"asym",
			"temple",
			"2",
			"l"
		],
		"data/targets/eyes/l-eye-eyefold-angle-up.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"angle",
			"up"
		],
		"data/targets/torso/torso-muscle-dorsi-incr.target": [
			"torso",
			"torso",
			"muscle",
			"dorsi",
			"incr"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-eye-7-r.target": [
			"asym",
			"asym",
			"eye",
			"7",
			"r"
		],
		"data/targets/mouth/mouth-lowerlip-ext-up.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"ext",
			"up"
		],
		"data/targets/measure/measure-upperarm-decrease.target": [
			"measure",
			"measure",
			"upperarm",
			"decrease"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-push2-in.target": [
			"eyes",
			"l",
			"eye",
			"push2",
			"in"
		],
		"data/targets/expression/units/asian/mouth-corner-puller.target": [
			"expression",
			"units",
			"mouth",
			"corner",
			"puller"
		],
		"data/targets/armslegs/r-leg-genu-varun.target": [
			"armslegs",
			"r",
			"leg",
			"genu",
			"varun"
		],
		"data/targets/nose/nose-width2-min.target": [
			"nose",
			"nose",
			"width2",
			"min"
		],
		"data/targets/expression/units/african/eye-right-opened-up.target": [
			"expression",
			"units",
			"eye",
			"right",
			"opened",
			"up"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/chin/chin-width-max.target": [
			"chin",
			"chin",
			"width",
			"max"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/torso/torso-muscle-pectoral-decr.target": [
			"torso",
			"torso",
			"muscle",
			"pectoral",
			"decr"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/measure/measure-lowerlegheight-increase.target": [
			"measure",
			"measure",
			"lowerlegheight",
			"increase"
		],
		"data/targets/chin/chin-prominent-less.target": [
			"chin",
			"chin",
			"prominent",
			"less"
		],
		"data/targets/nose/nose-septumangle-incr.target": [
			"nose",
			"nose",
			"septumangle",
			"incr"
		],
		"data/targets/macrodetails/height/male-old-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/measure/measure-napetowaist-decrease.target": [
			"measure",
			"measure",
			"napetowaist",
			"decrease"
		],
		"data/targets/asym/asym-cheek-1-r.target": [
			"asym",
			"asym",
			"cheek",
			"1",
			"r"
		],
		"data/targets/nose/nose-scale-vert-incr.target": [
			"nose",
			"nose",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/breast/female-young-minmuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-minmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/male-old-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/stomach/stomach-pregnant-incr.target": [
			"stomach",
			"stomach",
			"pregnant",
			"incr"
		],
		"data/targets/eyes/r-eye-corner2-up.target": [
			"eyes",
			"r",
			"eye",
			"corner2",
			"up"
		],
		"data/targets/breast/nipple-size-max.target": [
			"breast",
			"nipple",
			"size",
			"max"
		],
		"data/targets/armslegs/r-foot-trans-in.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"in"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-child-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/torso/torso-scale-vert-decr.target": [
			"torso",
			"torso",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/eyes/r-eye-corner2-down.target": [
			"eyes",
			"r",
			"eye",
			"corner2",
			"down"
		],
		"data/targets/expression/units/asian/mouth-pursing.target": [
			"expression",
			"units",
			"mouth",
			"pursing"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/expression/units/african/eye-right-slit.target": [
			"expression",
			"units",
			"eye",
			"right",
			"slit"
		],
		"data/targets/head/head-scale-vert-more.target": [
			"head",
			"head",
			"scale",
			"vert",
			"more"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-maxmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/eyebrows/eyebrows-trans-vert-less.target": [
			"eyebrows",
			"eyebrows",
			"trans",
			"vert",
			"less"
		],
		"data/targets/armslegs/l-upperleg-muscle-decr.target": [
			"armslegs",
			"l",
			"upperleg",
			"muscle",
			"decr"
		],
		"data/targets/expression/units/african/mouth-compression.target": [
			"expression",
			"units",
			"mouth",
			"compression"
		],
		"data/targets/eyes/r-eye-height1-min.target": [
			"eyes",
			"r",
			"eye",
			"height1",
			"min"
		],
		"data/targets/genitals/penis-testicles-max.target": [
			"genitals",
			"penis",
			"testicles",
			"max"
		],
		"data/targets/chin/chin-height-max.target": [
			"chin",
			"chin",
			"height",
			"max"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/male-young-maxmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/chin/chin-bones-in.target": [
			"chin",
			"chin",
			"bones",
			"in"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-child-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/asym/asym-eye-6-r.target": [
			"asym",
			"asym",
			"eye",
			"6",
			"r"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/l-upperleg-scale-depth-incr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/expression/units/african/eye-left-slit.target": [
			"expression",
			"units",
			"eye",
			"left",
			"slit"
		],
		"data/targets/ears/r-ear-size-big.target": [
			"ears",
			"r",
			"ear",
			"size",
			"big"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-hand-scale-incr.target": [
			"armslegs",
			"l",
			"hand",
			"scale",
			"incr"
		],
		"data/targets/macrodetails/universal-female-young-minmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-young-maxmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/mouth-depression.target": [
			"expression",
			"units",
			"mouth",
			"depression"
		],
		"data/targets/expression/units/african/nose-depression.target": [
			"expression",
			"units",
			"nose",
			"depression"
		],
		"data/targets/macrodetails/caucasian-female-child.target": [
			"macrodetails"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-child-maxmuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-child-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/head/head-age-more.target": [
			"head",
			"head",
			"age",
			"more"
		],
		"data/targets/nose/nose-hump-lesshump.target": [
			"nose",
			"nose",
			"hump",
			"lesshump"
		],
		"data/targets/mouth/mouth-philtrum-volume-increase.target": [
			"mouth",
			"mouth",
			"philtrum",
			"volume",
			"increase"
		],
		"data/targets/eyes/r-eye-push2-out.target": [
			"eyes",
			"r",
			"eye",
			"push2",
			"out"
		],
		"data/targets/expression/units/asian/eye-right-slit.target": [
			"expression",
			"units",
			"eye",
			"right",
			"slit"
		],
		"data/targets/armslegs/l-lowerarm-muscle-decr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"muscle",
			"decr"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-epicanthus-in.target": [
			"eyes",
			"r",
			"eye",
			"epicanthus",
			"in"
		],
		"data/targets/genitals/penis-circ-min.target": [
			"genitals",
			"penis",
			"circ",
			"min"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-female-old-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-minmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-young-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/nose/nose-width2-max.target": [
			"nose",
			"nose",
			"width2",
			"max"
		],
		"data/targets/macrodetails/height/female-child-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-hand-fingers-length-decr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"length",
			"decr"
		],
		"data/targets/macrodetails/universal-female-child-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/r-lowerleg-scale-depth-decr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/armslegs/l-lowerarm-scale-horiz-decr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/armslegs/l-upperleg-scale-vert-incr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/cheek/l-cheek-inner-deflate.target": [
			"cheek",
			"l",
			"cheek",
			"inner",
			"deflate"
		],
		"data/targets/neck/neck-back-scale-depth-more.target": [
			"neck",
			"neck",
			"back",
			"scale",
			"depth",
			"more"
		],
		"data/targets/pelvis/bulge-incr.target": [
			"pelvis",
			"bulge",
			"incr"
		],
		"data/targets/expression/units/african/mouth-depression.target": [
			"expression",
			"units",
			"mouth",
			"depression"
		],
		"data/targets/mouth/mouth-upperlip-height-max.target": [
			"mouth",
			"mouth",
			"upperlip",
			"height",
			"max"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-male-old-maxmuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/mouth/mouth-cupidsbow-width-min.target": [
			"mouth",
			"mouth",
			"cupidsbow",
			"width",
			"min"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/asian/nose-left-dilatation.target": [
			"expression",
			"units",
			"nose",
			"left",
			"dilatation"
		],
		"data/targets/breast/female-old-minmuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/l-leg-genu-varun.target": [
			"armslegs",
			"l",
			"leg",
			"genu",
			"varun"
		],
		"data/targets/measure/measure-ankle-decrease.target": [
			"measure",
			"measure",
			"ankle",
			"decrease"
		],
		"data/targets/mouth/mouth-angles-up.target": [
			"mouth",
			"mouth",
			"angles",
			"up"
		],
		"data/targets/breast/female-old-maxmuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/nose/nose-curve-convex.target": [
			"nose",
			"nose",
			"curve",
			"convex"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-young-maxmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/neck/neck-double-less.target": [
			"neck",
			"neck",
			"double",
			"less"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-minmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-old-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/universal-male-child-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-old-maxmuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-child-minmuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-upperleg-skinny.target": [
			"armslegs",
			"r",
			"upperleg",
			"skinny"
		],
		"data/targets/chin/chin-cleft-in.target": [
			"chin",
			"chin",
			"cleft",
			"in"
		],
		"data/targets/expression/units/caucasian/eye-left-slit.target": [
			"expression",
			"units",
			"eye",
			"left",
			"slit"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-leg-genu-valgus.target": [
			"armslegs",
			"r",
			"leg",
			"genu",
			"valgus"
		],
		"data/targets/breast/female-child-averagemuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-eyefold-convex.target": [
			"eyes",
			"r",
			"eye",
			"eyefold",
			"convex"
		],
		"data/targets/macrodetails/universal-female-baby-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/ears/r-ear-shape1-triangle.target": [
			"ears",
			"r",
			"ear",
			"shape1",
			"triangle"
		],
		"data/targets/armslegs/l-lowerleg-scale-horiz-decr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/ears/l-ear-shape2-square.target": [
			"ears",
			"l",
			"ear",
			"shape2",
			"square"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-averagemuscle-minweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/genitals/penis-length-min.target": [
			"genitals",
			"penis",
			"length",
			"min"
		],
		"data/targets/cheek/r-cheek-trans-vert-down.target": [
			"cheek",
			"r",
			"cheek",
			"trans",
			"vert",
			"down"
		],
		"data/targets/macrodetails/height/female-baby-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-minmuscle-maxweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/caucasian/mouth-elevation.target": [
			"expression",
			"units",
			"mouth",
			"elevation"
		],
		"data/targets/breast/female-young-minmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-nose-2-l.target": [
			"asym",
			"asym",
			"nose",
			"2",
			"l"
		],
		"data/targets/breast/female-old-maxmuscle-averageweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-young-minmuscle-minweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/armslegs/r-foot-scale-decr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"decr"
		],
		"data/targets/head/head-angle-in.target": [
			"head",
			"head",
			"angle",
			"in"
		],
		"data/targets/chin/chin-prognathism-less.target": [
			"chin",
			"chin",
			"prognathism",
			"less"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperarm-muscle-incr.target": [
			"armslegs",
			"r",
			"upperarm",
			"muscle",
			"incr"
		],
		"data/targets/armslegs/l-lowerarm-muscle-incr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"muscle",
			"incr"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/nose/nose-trans-depth-backward.target": [
			"nose",
			"nose",
			"trans",
			"depth",
			"backward"
		],
		"data/targets/asym/asym-top-1-r.target": [
			"asym",
			"asym",
			"top",
			"1",
			"r"
		],
		"data/targets/mouth/mouth-trans-down.target": [
			"mouth",
			"mouth",
			"trans",
			"down"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/expression/units/african/eyebrows-right-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"up"
		],
		"data/targets/macrodetails/universal-female-young-averagemuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-child-averagemuscle-averageweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-child-averagemuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-bag-in.target": [
			"eyes",
			"r",
			"eye",
			"bag",
			"in"
		],
		"data/targets/breast/female-young-maxmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/r-lowerleg-scale-vert-incr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/armslegs/l-lowerleg-fat.target": [
			"armslegs",
			"l",
			"lowerleg",
			"fat"
		],
		"data/targets/measure/measure-neckcirc-decrease.target": [
			"measure",
			"measure",
			"neckcirc",
			"decrease"
		],
		"data/targets/expression/units/caucasian/mouth-open.target": [
			"expression",
			"units",
			"mouth",
			"open"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/mouth/mouth-lowerlip-volume-deflate.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"volume",
			"deflate"
		],
		"data/targets/armslegs/l-lowerleg-muscle-decr.target": [
			"armslegs",
			"l",
			"lowerleg",
			"muscle",
			"decr"
		],
		"data/targets/macrodetails/height/male-child-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-old-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/neck/neck-scale-depth-less.target": [
			"neck",
			"neck",
			"scale",
			"depth",
			"less"
		],
		"data/targets/expression/units/asian/mouth-retraction.target": [
			"expression",
			"units",
			"mouth",
			"retraction"
		],
		"data/targets/macrodetails/caucasian-female-young.target": [
			"macrodetails"
		],
		"data/targets/ears/r-ear-wing-in.target": [
			"ears",
			"r",
			"ear",
			"wing",
			"in"
		],
		"data/targets/expression/units/asian/eye-left-opened-up.target": [
			"expression",
			"units",
			"eye",
			"left",
			"opened",
			"up"
		],
		"data/targets/asym/asym-jaw-2-r.target": [
			"asym",
			"asym",
			"jaw",
			"2",
			"r"
		],
		"data/targets/macrodetails/proportions/female-young-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-averageweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/caucasian/eyebrows-right-inner-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"inner",
			"up"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-temple-1-l.target": [
			"asym",
			"asym",
			"temple",
			"1",
			"l"
		],
		"data/targets/genitals/penis-circ-max.target": [
			"genitals",
			"penis",
			"circ",
			"max"
		],
		"data/targets/hip/hip-trans-out.target": [
			"hip",
			"hip",
			"trans",
			"out"
		],
		"data/targets/armslegs/r-hand-fingers-distance-incr.target": [
			"armslegs",
			"r",
			"hand",
			"fingers",
			"distance",
			"incr"
		],
		"data/targets/breast/female-old-averagemuscle-averageweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-old-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/nose/nose-height-max.target": [
			"nose",
			"nose",
			"height",
			"max"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/universal-male-child-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/female-old-minmuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-foot-scale-incr.target": [
			"armslegs",
			"l",
			"foot",
			"scale",
			"incr"
		],
		"data/targets/eyes/l-eye-bag-min.target": [
			"eyes",
			"l",
			"eye",
			"bag",
			"min"
		],
		"data/targets/forehead/forehead-nubian-less.target": [
			"forehead",
			"forehead",
			"nubian",
			"less"
		],
		"data/targets/breast/female-young-maxmuscle-maxweight-averagecup-minfirmness.target": [
			"breast"
		],
		"data/targets/stomach/stomach-tone-decr.target": [
			"stomach",
			"stomach",
			"tone",
			"decr"
		],
		"data/targets/armslegs/r-lowerarm-scale-depth-decr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"scale",
			"depth",
			"decr"
		],
		"data/targets/macrodetails/height/female-old-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/ears/r-ear-flap-out.target": [
			"ears",
			"r",
			"ear",
			"flap",
			"out"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/cheek/r-cheek-inner-inflate.target": [
			"cheek",
			"r",
			"cheek",
			"inner",
			"inflate"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-eye-6-l.target": [
			"asym",
			"asym",
			"eye",
			"6",
			"l"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/male-child-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/ears/r-ear-trans-vert-down.target": [
			"ears",
			"r",
			"ear",
			"trans",
			"vert",
			"down"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/eyes/l-eye-height2-max.target": [
			"eyes",
			"l",
			"eye",
			"height2",
			"max"
		],
		"data/targets/macrodetails/proportions/male-old-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/measure/measure-calf-decrease.target": [
			"measure",
			"measure",
			"calf",
			"decrease"
		],
		"data/targets/ears/l-ear-flap-in.target": [
			"ears",
			"l",
			"ear",
			"flap",
			"in"
		],
		"data/targets/breast/female-child-minmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/ears/l-ear-wing-in.target": [
			"ears",
			"l",
			"ear",
			"wing",
			"in"
		],
		"data/targets/armslegs/r-lowerleg-scale-vert-decr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/ears/r-ear-lobe-min.target": [
			"ears",
			"r",
			"ear",
			"lobe",
			"min"
		],
		"data/targets/macrodetails/height/male-baby-maxmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-nose-1-r.target": [
			"asym",
			"asym",
			"nose",
			"1",
			"r"
		],
		"data/targets/mouth/mouth-lowerlip-height-min.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"height",
			"min"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/hip/hip-trans-down.target": [
			"hip",
			"hip",
			"trans",
			"down"
		],
		"data/targets/buttocks/buttocks-volume-incr.target": [
			"buttocks",
			"buttocks",
			"volume",
			"incr"
		],
		"data/targets/breast/female-young-averagemuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/eyes/r-eye-corner1-up.target": [
			"eyes",
			"r",
			"eye",
			"corner1",
			"up"
		],
		"data/targets/neck/neck-back-scale-depth-less.target": [
			"neck",
			"neck",
			"back",
			"scale",
			"depth",
			"less"
		],
		"data/targets/armslegs/r-foot-trans-backward.target": [
			"armslegs",
			"r",
			"foot",
			"trans",
			"backward"
		],
		"data/targets/breast/breast-trans-vert-down.target": [
			"breast",
			"breast",
			"trans",
			"vert",
			"down"
		],
		"data/targets/breast/female-child-maxmuscle-minweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/mouth/mouth-lowerlip-height-max.target": [
			"mouth",
			"mouth",
			"lowerlip",
			"height",
			"max"
		],
		"data/targets/ears/l-ear-shape1-triangle.target": [
			"ears",
			"l",
			"ear",
			"shape1",
			"triangle"
		],
		"data/targets/expression/units/caucasian/eyebrows-right-up.target": [
			"expression",
			"units",
			"eyebrows",
			"right",
			"up"
		],
		"data/targets/asym/asym-ear-1-r.target": [
			"asym",
			"asym",
			"ear",
			"1",
			"r"
		],
		"data/targets/neck/neck-scale-depth-more.target": [
			"neck",
			"neck",
			"scale",
			"depth",
			"more"
		],
		"data/targets/mouth/mouth-trans-forward.target": [
			"mouth",
			"mouth",
			"trans",
			"forward"
		],
		"data/targets/stomach/stomach-navel-down.target": [
			"stomach",
			"stomach",
			"navel",
			"down"
		],
		"data/targets/asym/asym-ear-2-r.target": [
			"asym",
			"asym",
			"ear",
			"2",
			"r"
		],
		"data/targets/expression/units/caucasian/mouth-eversion.target": [
			"expression",
			"units",
			"mouth",
			"eversion"
		],
		"data/targets/expression/units/asian/neck-platysma.target": [
			"expression",
			"units",
			"neck",
			"platysma"
		],
		"data/targets/macrodetails/proportions/female-old-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/nose/nose-flaring-incr.target": [
			"nose",
			"nose",
			"flaring",
			"incr"
		],
		"data/targets/armslegs/r-lowerarm-muscle-decr.target": [
			"armslegs",
			"r",
			"lowerarm",
			"muscle",
			"decr"
		],
		"data/targets/eyes/l-eye-move-down.target": [
			"eyes",
			"l",
			"eye",
			"move",
			"down"
		],
		"data/targets/armslegs/r-lowerleg-scale-depth-incr.target": [
			"armslegs",
			"r",
			"lowerleg",
			"scale",
			"depth",
			"incr"
		],
		"data/targets/mouth/mouth-upperlip-ext-up.target": [
			"mouth",
			"mouth",
			"upperlip",
			"ext",
			"up"
		],
		"data/targets/asym/asym-brown-2-l.target": [
			"asym",
			"asym",
			"brown",
			"2",
			"l"
		],
		"data/targets/expression/units/african/mouth-depression-retraction.target": [
			"expression",
			"units",
			"mouth",
			"depression",
			"retraction"
		],
		"data/targets/armslegs/l-foot-trans-up.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"up"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-maxweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-averagemuscle-maxweight-maxcup-averagefirmness.target": [
			"breast"
		],
		"data/targets/asym/asym-eye-3-r.target": [
			"asym",
			"asym",
			"eye",
			"3",
			"r"
		],
		"data/targets/macrodetails/proportions/female-child-minmuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperleg-muscle-decr.target": [
			"armslegs",
			"r",
			"upperleg",
			"muscle",
			"decr"
		],
		"data/targets/measure/measure-frontchest-decrease.target": [
			"measure",
			"measure",
			"frontchest",
			"decrease"
		],
		"data/targets/eyes/l-eye-size-small.target": [
			"eyes",
			"l",
			"eye",
			"size",
			"small"
		],
		"data/targets/expression/units/asian/nose-right-elevation.target": [
			"expression",
			"units",
			"nose",
			"right",
			"elevation"
		],
		"data/targets/macrodetails/proportions/male-young-maxmuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/expression/units/asian/mouth-compression.target": [
			"expression",
			"units",
			"mouth",
			"compression"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-averageweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/chin/chin-width-min.target": [
			"chin",
			"chin",
			"width",
			"min"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/eyes/l-eye-eyefold-angle-down.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"angle",
			"down"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-mincup-minfirmness.target": [
			"breast"
		],
		"data/targets/expression/units/asian/eye-right-opened-up.target": [
			"expression",
			"units",
			"eye",
			"right",
			"opened",
			"up"
		],
		"data/targets/macrodetails/height/female-child-minmuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-lowerarm-scale-vert-incr.target": [
			"armslegs",
			"l",
			"lowerarm",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/stomach/stomach-tone-incr.target": [
			"stomach",
			"stomach",
			"tone",
			"incr"
		],
		"data/targets/macrodetails/universal-male-child-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/height/female-young-minmuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/stomach/stomach-navel-in.target": [
			"stomach",
			"stomach",
			"navel",
			"in"
		],
		"data/targets/eyebrows/eyebrows-angle-up.target": [
			"eyebrows",
			"eyebrows",
			"angle",
			"up"
		],
		"data/targets/macrodetails/height/male-child-minmuscle-minweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/breast/female-old-averagemuscle-minweight-mincup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/proportions/female-young-maxmuscle-maxweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/armslegs/r-upperleg-scale-horiz-incr.target": [
			"armslegs",
			"r",
			"upperleg",
			"scale",
			"horiz",
			"incr"
		],
		"data/targets/asym/asym-cheek-2-r.target": [
			"asym",
			"asym",
			"cheek",
			"2",
			"r"
		],
		"data/targets/ears/r-ear-lobe-max.target": [
			"ears",
			"r",
			"ear",
			"lobe",
			"max"
		],
		"data/targets/eyes/l-eye-eyefold-down.target": [
			"eyes",
			"l",
			"eye",
			"eyefold",
			"down"
		],
		"data/targets/expression/units/african/mouth-parling.target": [
			"expression",
			"units",
			"mouth",
			"parling"
		],
		"data/targets/macrodetails/height/female-young-averagemuscle-maxweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/female-young-averagemuscle-minweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/neck/neck-scale-horiz-more.target": [
			"neck",
			"neck",
			"scale",
			"horiz",
			"more"
		],
		"data/targets/macrodetails/height/female-old-minmuscle-minweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-upperleg-scale-vert-decr.target": [
			"armslegs",
			"l",
			"upperleg",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/ears/r-ear-rot-forward.target": [
			"ears",
			"r",
			"ear",
			"rot",
			"forward"
		],
		"data/targets/expression/units/asian/mouth-open.target": [
			"expression",
			"units",
			"mouth",
			"open"
		],
		"data/targets/macrodetails/height/male-old-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/asym/asym-ear-3-l.target": [
			"asym",
			"asym",
			"ear",
			"3",
			"l"
		],
		"data/targets/armslegs/r-lowerarm-fat.target": [
			"armslegs",
			"r",
			"lowerarm",
			"fat"
		],
		"data/targets/ears/l-ear-trans-vert-up.target": [
			"ears",
			"l",
			"ear",
			"trans",
			"vert",
			"up"
		],
		"data/targets/macrodetails/universal-male-young-maxmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/breast/female-young-averagemuscle-averageweight-maxcup-minfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-old-maxmuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/macrodetails/proportions/male-child-minmuscle-minweight-uncommonproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/mouth/mouth-upperlip-ext-down.target": [
			"mouth",
			"mouth",
			"upperlip",
			"ext",
			"down"
		],
		"data/targets/macrodetails/universal-male-young-minmuscle-minweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/measure/measure-thighcirc-increase.target": [
			"measure",
			"measure",
			"thighcirc",
			"increase"
		],
		"data/targets/measure/measure-upperarm-increase.target": [
			"measure",
			"measure",
			"upperarm",
			"increase"
		],
		"data/targets/torso/torso-scale-horiz-decr.target": [
			"torso",
			"torso",
			"scale",
			"horiz",
			"decr"
		],
		"data/targets/torso/torso-trans-vert-up.target": [
			"torso",
			"torso",
			"trans",
			"vert",
			"up"
		],
		"data/targets/armslegs/l-hand-trans-in.target": [
			"armslegs",
			"l",
			"hand",
			"trans",
			"in"
		],
		"data/targets/breast/female-child-maxmuscle-maxweight-mincup-averagefirmness.target": [
			"breast"
		],
		"data/targets/breast/female-old-maxmuscle-maxweight-averagecup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/height/female-baby-averagemuscle-averageweight-minheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/macrodetails/proportions/male-young-averagemuscle-averageweight-idealproportions.target": [
			"macrodetails",
			"proportions"
		],
		"data/targets/breast/female-old-minmuscle-minweight-maxcup-maxfirmness.target": [
			"breast"
		],
		"data/targets/macrodetails/universal-female-old-averagemuscle-maxweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/armslegs/l-upperarm-scale-vert-incr.target": [
			"armslegs",
			"l",
			"upperarm",
			"scale",
			"vert",
			"incr"
		],
		"data/targets/macrodetails/height/male-baby-averagemuscle-maxweight-maxheight.target": [
			"macrodetails",
			"height"
		],
		"data/targets/armslegs/l-foot-trans-down.target": [
			"armslegs",
			"l",
			"foot",
			"trans",
			"down"
		],
		"data/targets/expression/units/caucasian/eyebrows-left-extern-up.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"extern",
			"up"
		],
		"data/targets/armslegs/r-lowerleg-skinny.target": [
			"armslegs",
			"r",
			"lowerleg",
			"skinny"
		],
		"data/targets/macrodetails/universal-female-young-averagemuscle-averageweight.target": [
			"macrodetails",
			"universal"
		],
		"data/targets/forehead/forehead-temple-out.target": [
			"forehead",
			"forehead",
			"temple",
			"out"
		],
		"data/targets/armslegs/r-foot-scale-vert-decr.target": [
			"armslegs",
			"r",
			"foot",
			"scale",
			"vert",
			"decr"
		],
		"data/targets/expression/units/asian/eyebrows-left-down.target": [
			"expression",
			"units",
			"eyebrows",
			"left",
			"down"
		],
		"data/targets/eyes/l-eye-height3-max.target": [
			"eyes",
			"l",
			"eye",
			"height3",
			"max"
		]
	}
};

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

var stringify = __webpack_require__(154);
var parse = __webpack_require__(153);
var formats = __webpack_require__(74);

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

var utils = __webpack_require__(75);

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseValues(str, options) {
    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos));
            val = options.decoder(part.slice(pos + 1));
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function parseObject(chain, val, options) {
    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj;
    if (root === '[]') {
        obj = [];
        obj = obj.concat(parseObject(chain, val, options));
    } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        if (
            !isNaN(index) &&
            root !== cleanRoot &&
            String(index) === cleanRoot &&
            index >= 0 &&
            (options.parseArrays && index <= options.arrayLimit)
        ) {
            obj = [];
            obj[index] = parseObject(chain, val, options);
        } else {
            obj[cleanRoot] = parseObject(chain, val, options);
        }
    }

    return obj;
};

var parseKeys = function parseKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, segment[1])) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].replace(/\[|\]/g, ''))) {
            if (!options.allowPrototypes) {
                continue;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts || {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
'use strict';

var utils = __webpack_require__(75);
var formats = __webpack_require__(74);

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder ? encoder(prefix) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            return [formatter(encoder(prefix)) + '=' + formatter(encoder(obj))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter
            ));
        } else {
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter
            ));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    if (typeof options.format === 'undefined') {
        options.format = formats.default;
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter
        ));
    }

    return keys.join(delimiter);
};


/***/ },
/* 155 */
/***/ function(module, exports) {

/**
 * @author sole / http://soledadpenades.com
 * @author mrdoob / http://mrdoob.com
 * @author Robert Eisele / http://www.xarg.org
 * @author Philippe / http://philippe.elsass.me
 * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html
 * @author Paul Lewis / http://www.aerotwist.com/
 * @author lechecacharro
 * @author Josh Faul / http://jocafa.com/
 * @author egraether / http://egraether.com/
 */

if ( Date.now === undefined ) {

  Date.now = function () {

    return new Date().valueOf();

  }

}

var TWEEN = TWEEN || ( function () {

  var _tweens = [];

  return {

    REVISION: '8',

    getAll: function () {

      return _tweens;

    },

    removeAll: function () {

      _tweens = [];

    },

    add: function ( tween ) {

      _tweens.push( tween );

    },

    remove: function ( tween ) {

      var i = _tweens.indexOf( tween );

      if ( i !== -1 ) {

        _tweens.splice( i, 1 );

      }

    },

    update: function ( time ) {

      if ( _tweens.length === 0 ) return false;

      var i = 0, numTweens = _tweens.length;

      time = time !== undefined ? time : Date.now();

      while ( i < numTweens ) {

        if ( _tweens[ i ].update( time ) ) {

          i ++;

        } else {

          _tweens.splice( i, 1 );

          numTweens --;

        }

      }

      return true;

    }

  };

} )();

TWEEN.Tween = function ( object ) {

  var _object = object;
  var _valuesStart = {};
  var _valuesEnd = {};
  var _duration = 1000;
  var _delayTime = 0;
  var _startTime = null;
  var _easingFunction = TWEEN.Easing.Linear.None;
  var _interpolationFunction = TWEEN.Interpolation.Linear;
  var _chainedTweens = [];
  var _onStartCallback = null;
  var _onStartCallbackFired = false;
  var _onUpdateCallback = null;
  var _onCompleteCallback = null;

  this.to = function ( properties, duration ) {

    if ( duration !== undefined ) {

      _duration = duration;

    }

    _valuesEnd = properties;

    return this;

  };

  this.start = function ( time ) {

    TWEEN.add( this );

    _onStartCallbackFired = false;

    _startTime = time !== undefined ? time : Date.now();
    _startTime += _delayTime;

    for ( var property in _valuesEnd ) {

      // This prevents the interpolation of null values or of non-existing properties
      if( _object[ property ] === null || !(property in _object) ) {

        continue;

      }

      // check if an Array was provided as property value
      if ( _valuesEnd[ property ] instanceof Array ) {

        if ( _valuesEnd[ property ].length === 0 ) {

          continue;

        }

        // create a local copy of the Array with the start value at the front
        _valuesEnd[ property ] = [ _object[ property ] ].concat( _valuesEnd[ property ] );

      }

      _valuesStart[ property ] = _object[ property ];

    }

    return this;

  };

  this.stop = function () {

    TWEEN.remove( this );
    return this;

  };

  this.delay = function ( amount ) {

    _delayTime = amount;
    return this;

  };

  this.easing = function ( easing ) {

    _easingFunction = easing;
    return this;

  };

  this.interpolation = function ( interpolation ) {

    _interpolationFunction = interpolation;
    return this;

  };

  this.chain = function () {

    _chainedTweens = arguments;
    return this;

  };

  this.onStart = function ( callback ) {

    _onStartCallback = callback;
    return this;

  };

  this.onUpdate = function ( callback ) {

    _onUpdateCallback = callback;
    return this;

  };

  this.onComplete = function ( callback ) {

    _onCompleteCallback = callback;
    return this;

  };

  this.update = function ( time ) {

    if ( time < _startTime ) {

      return true;

    }

    if ( _onStartCallbackFired === false ) {

      if ( _onStartCallback !== null ) {

        _onStartCallback.call( _object );

      }

      _onStartCallbackFired = true;

    }

    var elapsed = ( time - _startTime ) / _duration;
    elapsed = elapsed > 1 ? 1 : elapsed;

    var value = _easingFunction( elapsed );

    for ( var property in _valuesStart ) {

      var start = _valuesStart[ property ];
      var end = _valuesEnd[ property ];

      if ( end instanceof Array ) {

        _object[ property ] = _interpolationFunction( end, value );

      } else {

        _object[ property ] = start + ( end - start ) * value;

      }

    }

    if ( _onUpdateCallback !== null ) {

      _onUpdateCallback.call( _object, value );

    }

    if ( elapsed == 1 ) {

      if ( _onCompleteCallback !== null ) {

        _onCompleteCallback.call( _object );

      }

      for ( var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i ++ ) {

        _chainedTweens[ i ].start( time );

      }

      return false;

    }

    return true;

  };

};

TWEEN.Easing = {

  Linear: {

    None: function ( k ) {

      return k;

    }

  },

  Quadratic: {

    In: function ( k ) {

      return k * k;

    },

    Out: function ( k ) {

      return k * ( 2 - k );

    },

    InOut: function ( k ) {

      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k;
      return - 0.5 * ( --k * ( k - 2 ) - 1 );

    }

  },

  Cubic: {

    In: function ( k ) {

      return k * k * k;

    },

    Out: function ( k ) {

      return --k * k * k + 1;

    },

    InOut: function ( k ) {

      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k;
      return 0.5 * ( ( k -= 2 ) * k * k + 2 );

    }

  },

  Quartic: {

    In: function ( k ) {

      return k * k * k * k;

    },

    Out: function ( k ) {

      return 1 - ( --k * k * k * k );

    },

    InOut: function ( k ) {

      if ( ( k *= 2 ) < 1) return 0.5 * k * k * k * k;
      return - 0.5 * ( ( k -= 2 ) * k * k * k - 2 );

    }

  },

  Quintic: {

    In: function ( k ) {

      return k * k * k * k * k;

    },

    Out: function ( k ) {

      return --k * k * k * k * k + 1;

    },

    InOut: function ( k ) {

      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k * k * k;
      return 0.5 * ( ( k -= 2 ) * k * k * k * k + 2 );

    }

  },

  Sinusoidal: {

    In: function ( k ) {

      return 1 - Math.cos( k * Math.PI / 2 );

    },

    Out: function ( k ) {

      return Math.sin( k * Math.PI / 2 );

    },

    InOut: function ( k ) {

      return 0.5 * ( 1 - Math.cos( Math.PI * k ) );

    }

  },

  Exponential: {

    In: function ( k ) {

      return k === 0 ? 0 : Math.pow( 1024, k - 1 );

    },

    Out: function ( k ) {

      return k === 1 ? 1 : 1 - Math.pow( 2, - 10 * k );

    },

    InOut: function ( k ) {

      if ( k === 0 ) return 0;
      if ( k === 1 ) return 1;
      if ( ( k *= 2 ) < 1 ) return 0.5 * Math.pow( 1024, k - 1 );
      return 0.5 * ( - Math.pow( 2, - 10 * ( k - 1 ) ) + 2 );

    }

  },

  Circular: {

    In: function ( k ) {

      return 1 - Math.sqrt( 1 - k * k );

    },

    Out: function ( k ) {

      return Math.sqrt( 1 - ( --k * k ) );

    },

    InOut: function ( k ) {

      if ( ( k *= 2 ) < 1) return - 0.5 * ( Math.sqrt( 1 - k * k) - 1);
      return 0.5 * ( Math.sqrt( 1 - ( k -= 2) * k) + 1);

    }

  },

  Elastic: {

    In: function ( k ) {

      var s, a = 0.1, p = 0.4;
      if ( k === 0 ) return 0;
      if ( k === 1 ) return 1;
      if ( !a || a < 1 ) { a = 1; s = p / 4; }
      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
      return - ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );

    },

    Out: function ( k ) {

      var s, a = 0.1, p = 0.4;
      if ( k === 0 ) return 0;
      if ( k === 1 ) return 1;
      if ( !a || a < 1 ) { a = 1; s = p / 4; }
      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
      return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );

    },

    InOut: function ( k ) {

      var s, a = 0.1, p = 0.4;
      if ( k === 0 ) return 0;
      if ( k === 1 ) return 1;
      if ( !a || a < 1 ) { a = 1; s = p / 4; }
      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
      if ( ( k *= 2 ) < 1 ) return - 0.5 * ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );
      return a * Math.pow( 2, -10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) * 0.5 + 1;

    }

  },

  Back: {

    In: function ( k ) {

      var s = 1.70158;
      return k * k * ( ( s + 1 ) * k - s );

    },

    Out: function ( k ) {

      var s = 1.70158;
      return --k * k * ( ( s + 1 ) * k + s ) + 1;

    },

    InOut: function ( k ) {

      var s = 1.70158 * 1.525;
      if ( ( k *= 2 ) < 1 ) return 0.5 * ( k * k * ( ( s + 1 ) * k - s ) );
      return 0.5 * ( ( k -= 2 ) * k * ( ( s + 1 ) * k + s ) + 2 );

    }

  },

  Bounce: {

    In: function ( k ) {

      return 1 - TWEEN.Easing.Bounce.Out( 1 - k );

    },

    Out: function ( k ) {

      if ( k < ( 1 / 2.75 ) ) {

        return 7.5625 * k * k;

      } else if ( k < ( 2 / 2.75 ) ) {

        return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;

      } else if ( k < ( 2.5 / 2.75 ) ) {

        return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;

      } else {

        return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;

      }

    },

    InOut: function ( k ) {

      if ( k < 0.5 ) return TWEEN.Easing.Bounce.In( k * 2 ) * 0.5;
      return TWEEN.Easing.Bounce.Out( k * 2 - 1 ) * 0.5 + 0.5;

    }

  }

};

TWEEN.Interpolation = {

  Linear: function ( v, k ) {

    var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.Linear;

    if ( k < 0 ) return fn( v[ 0 ], v[ 1 ], f );
    if ( k > 1 ) return fn( v[ m ], v[ m - 1 ], m - f );

    return fn( v[ i ], v[ i + 1 > m ? m : i + 1 ], f - i );

  },

  Bezier: function ( v, k ) {

    var b = 0, n = v.length - 1, pw = Math.pow, bn = TWEEN.Interpolation.Utils.Bernstein, i;

    for ( i = 0; i <= n; i++ ) {
      b += pw( 1 - k, n - i ) * pw( k, i ) * v[ i ] * bn( n, i );
    }

    return b;

  },

  CatmullRom: function ( v, k ) {

    var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.CatmullRom;

    if ( v[ 0 ] === v[ m ] ) {

      if ( k < 0 ) i = Math.floor( f = m * ( 1 + k ) );

      return fn( v[ ( i - 1 + m ) % m ], v[ i ], v[ ( i + 1 ) % m ], v[ ( i + 2 ) % m ], f - i );

    } else {

      if ( k < 0 ) return v[ 0 ] - ( fn( v[ 0 ], v[ 0 ], v[ 1 ], v[ 1 ], -f ) - v[ 0 ] );
      if ( k > 1 ) return v[ m ] - ( fn( v[ m ], v[ m ], v[ m - 1 ], v[ m - 1 ], f - m ) - v[ m ] );

      return fn( v[ i ? i - 1 : 0 ], v[ i ], v[ m < i + 1 ? m : i + 1 ], v[ m < i + 2 ? m : i + 2 ], f - i );

    }

  },

  Utils: {

    Linear: function ( p0, p1, t ) {

      return ( p1 - p0 ) * t + p0;

    },

    Bernstein: function ( n , i ) {

      var fc = TWEEN.Interpolation.Utils.Factorial;
      return fc( n ) / fc( i ) / fc( n - i );

    },

    Factorial: ( function () {

      var a = [ 1 ];

      return function ( n ) {

        var s = 1, i;
        if ( a[ n ] ) return a[ n ];
        for ( i = n; i > 1; i-- ) s *= i;
        return a[ n ] = s;

      };

    } )(),

    CatmullRom: function ( p0, p1, p2, p3, t ) {

      var v0 = ( p2 - p0 ) * 0.5, v1 = ( p3 - p1 ) * 0.5, t2 = t * t, t3 = t * t2;
      return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

    }

  }

};

module.exports = TWEEN;

/***/ },
/* 156 */
/***/ function(module, exports) {

var g;

// This works in non-strict mode
g = (function() { return this; })();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ },
/* 157 */
/***/ function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			configurable: false,
			get: function() { return module.l; }
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			configurable: false,
			get: function() { return module.i; }
		});
		module.webpackPolyfill = 1;
	}
	return module;
}


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);
'use strict';



Object.defineProperty(exports, "__esModule", {
  value: true
});

var _human = __webpack_require__(76);

__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(_human).forEach(function (key) {
  if (key === "default") return;

  __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_define_property___default()(exports, key, {
    enumerable: true,
    get: function get() {
      return _human[key];
    }
  });
});

/***/ }
/******/ ])
});
;
//# sourceMappingURL=makehuman.js.map